<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux</title>
      <link href="/2022/08/25/linux/"/>
      <url>/2022/08/25/linux/</url>
      
        <content type="html"><![CDATA[<h2 id="1-操作系统概述"><a href="#1-操作系统概述" class="headerlink" title="1. 操作系统概述"></a>1. 操作系统概述</h2><h3 id="1-1-操作系统及作用"><a href="#1-1-操作系统及作用" class="headerlink" title="1.1 操作系统及作用"></a>1.1 操作系统及作用</h3><blockquote><p>目标: 了解什么是操作系统、操作系统的作用是什么</p></blockquote><p>操作系统, operating system，简称OS。</p><p>没有安装操作系统的计算机通常被称为裸机。</p><p>操作系统是安装在计算机硬件设备上的第一层软件, 其他的应用软件都直接依赖于操作系统的支持。</p><p>操作系统的主要作用是直接操作硬件设备, 并为应用程序提供易于使用的接口。</p><img src="/medias/linuximg/images/01.png" align="left" width="50%"><h3 id="1-2-不同领域的主流操作系统"><a href="#1-2-不同领域的主流操作系统" class="headerlink" title="1.2 不同领域的主流操作系统"></a>1.2 不同领域的主流操作系统</h3><ul><li>桌面操作系统</li><li>服务器操作系统</li><li>移动设备操作系统</li></ul><h4 id="1-2-1-桌面操作系统"><a href="#1-2-1-桌面操作系统" class="headerlink" title="1.2.1 桌面操作系统"></a>1.2.1 桌面操作系统</h4><ul><li>Windows 系列<ul><li>推广时间长, 应用软件多, 用户群体大</li><li>安全性、稳定性稍差</li></ul></li><li>macOS<ul><li>更加适合于办公场景, 安全稳定</li><li>作为开发机体验相当好</li></ul></li><li>Linux<ul><li>应用软件少, 在桌面操作系统领域市场占有率小</li></ul></li></ul><h4 id="1-2-2-服务器操作系统"><a href="#1-2-2-服务器操作系统" class="headerlink" title="1.2.2 服务器操作系统"></a>1.2.2 服务器操作系统</h4><ul><li>Linux<ul><li>安全、稳定、免费、服务器软件齐全</li><li>服务器操作系统领域占有率高</li></ul></li><li>Windows Server<ul><li>付费, 服务器软件不齐全</li><li>服务器操作系统领域占有率低</li></ul></li></ul><h4 id="1-2-3-移动设备操作系统"><a href="#1-2-3-移动设备操作系统" class="headerlink" title="1.2.3  移动设备操作系统"></a>1.2.3  移动设备操作系统</h4><ul><li>IOS</li><li>Android（基于<code>Linux</code>）</li></ul><h2 id="2-linux-概述"><a href="#2-linux-概述" class="headerlink" title="2. linux 概述"></a>2. linux 概述</h2><h3 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1  简介"></a>2.1  简介</h3><p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux 是一套免费使用和自由传播的操作系统内核，是一个多用户、多任务的操作系统内核。</p><img src="/medias/linuximg/images/03.jpg" align="left" width="30%"><h3 id="2-1-内核与发行版本"><a href="#2-1-内核与发行版本" class="headerlink" title="2.1 内核与发行版本"></a>2.1 内核与发行版本</h3><h4 id="2-1-1-内核版本"><a href="#2-1-1-内核版本" class="headerlink" title="2.1.1 内核版本"></a>2.1.1 内核版本</h4><p><strong>内核（kernel）</strong>是系统的心脏，是运行应用和管理硬件设备的核心程序，它提供了一个在裸机设备与应用程序间的抽象层。</p><p>Linux 内核版本又分为 <strong>稳定版</strong> 和 <strong>开发版</strong>，两种版本是相互关联，相互循环。</p><p><strong>稳定版</strong>：具有工业级强度，可以广泛地应用和部署。新的稳定版相对于较旧的只是修正一些 bug 或加入一些新的驱动程序。</p><p><strong>开发版</strong>：由于要试验各种解决方案，所以变化很快。</p><p>内核源码网址：<a href="http://www.kernel.org/">http://www.kernel.org</a></p><p>所有来自全世界的对 Linux 源码的修改最终都会汇总到这个网站，由 Linus 领导的开源社区对其进行甄别和修改最终决定是否进入到 Linux 主线内核源码中。</p><h4 id="2-1-2-发行版本"><a href="#2-1-2-发行版本" class="headerlink" title="2.1.2 发行版本"></a>2.1.2 发行版本</h4><p>Linux 发行版是一个由 Linux 内核、附加软件和软件包管理器及桌面环境组成的操作系统。Linux 是内核, 而Linux发行版是操作系统。</p><p>这个术语之所以叫Linux发行版, 是因为像 Debian、Ubuntu 这样的机构”发行”了 Linux 内核以及所有必要的软件及实用程序(如网络管理器、软件包管理器、桌面环境等), 使其可以作为一个操作系统使用。</p><h5 id="1-RedHat-Linux"><a href="#1-RedHat-Linux" class="headerlink" title="1.RedHat Linux"></a>1.RedHat Linux</h5><p>RedHat 领导着 Linux 的开发、部署和经营, 从嵌入式设备到安全网页服务器, 它都是用开源软件基础设施解决方案的领头羊。 </p><p>RedHat 解决方案包括 RedHat Linux、开发人员和嵌入式技术，以及培训、管理和技术支持。</p><img src="/medias/linuximg/images/06.png"><h5 id="2-Ubuntu-Linux"><a href="#2-Ubuntu-Linux" class="headerlink" title="2.Ubuntu Linux"></a>2.Ubuntu Linux</h5><p>Ubuntu(乌班图)是一个以桌面应用为主的 Linux 操作系统, 它的目标在于为一般用户提供一个最新的、同时又相当稳定的操作系统。</p><img src="/medias/linuximg/images/04.png"><h5 id="3-CentOS-Linux"><a href="#3-CentOS-Linux" class="headerlink" title="3.CentOS Linux"></a>3.CentOS Linux</h5><p>CentOS 是社区企业操作系统, 是社区驱动的开源项目, 它是免费的。</p><p>由 RedHat Enterprise Linux 源代码编译而成, 很多公司使用 CentOS 替代商业版 RedHat Linux。</p><p>CentOS 的技术支持主要通过社区的官方邮件列表、论坛和聊天室。</p><img src="/medias/linuximg/images/05.png"><h2 id="3-系统安装"><a href="#3-系统安装" class="headerlink" title="3. 系统安装"></a>3. 系统安装</h2><h3 id="3-1-安装虚拟机软件"><a href="#3-1-安装虚拟机软件" class="headerlink" title="3.1 安装虚拟机软件"></a>3.1 安装虚拟机软件</h3><h4 id="3-1-1-虚拟机"><a href="#3-1-1-虚拟机" class="headerlink" title="3.1.1 虚拟机"></a>3.1.1 虚拟机</h4><p>虚拟机（Virtual Machine）指通过软件模拟的具有完整硬件系统功能的、运行在一个完全隔离环境中的完整计算机系统。</p><h4 id="3-1-2-Windows"><a href="#3-1-2-Windows" class="headerlink" title="3.1.2 Windows"></a>3.1.2 Windows</h4><p><a href="https://www.ypojie.com/6066.html">VMware Workstation Pro v16.2.1 虚拟机软件及许可证</a></p><blockquote><p>VM16 -&gt; Windows 10 或更高版64位</p><p>VM15 -&gt; Windows 7 或更高版64位</p><p>VM12 -&gt; Windows 7 或更高版64位</p><p>官方自VM14版本开始不支持某些老旧电脑硬件</p><p>会提示不支持或安装失败, 如遇到请退回12版本。</p></blockquote><img src="/medias/linuximg/vmware_install_windows/01.png" align="left" width="60%"><img src="/medias/linuximg/vmware_install_windows/02.png" align="left" width="60%"><img src="/medias/linuximg/vmware_install_windows/03.png" align="left" width="60%"><img src="/medias/linuximg/vmware_install_windows/04.png" align="left" width="60%"><img src="/medias/linuximg/vmware_install_windows/05.png" align="left" width="60%"><img src="/medias/linuximg/vmware_install_windows/06.png" align="left" width="60%"><img src="/medias/linuximg/vmware_install_windows/07.png" align="left" width="60%"><img src="/medias/linuximg/vmware_install_windows/08.png" align="left" width="60%"><img src="/medias/linuximg/vmware_install_windows/09.png" align="left" width="60%"><img src="/medias/linuximg/vmware_install_windows/10.png" align="left" width="60%"><img src="/medias/linuximg/vmware_install_windows/11.png" align="left" width="60%"><img src="/medias/linuximg/vmware_install_windows/12.png" align="left" width="85%"><h4 id="3-1-3-MacOS"><a href="#3-1-3-MacOS" class="headerlink" title="3.1.3 MacOS"></a>3.1.3 MacOS</h4><p><a href="https://www.macwk.com/soft/vmware-fusion">VMware_Fusion_Pro_12.2.1_(18811640)_(最低11.0)</a></p><p>更多机型对应的版本请访问以上网址中的软件历史版本</p><img src="/medias/linuximg/wmware_install_mac/00.png" align="left" width="45%"><img src="/medias/linuximg/wmware_install_mac/01.png" align="left" width="80%"><img src="/medias/linuximg/wmware_install_mac/02.png" align="left" width="80%"><img src="/medias/linuximg/wmware_install_mac/03.png" align="left" width="80%"><img src="/medias/linuximg/wmware_install_mac/04.png" align="left" width="80%"><img src="/medias/linuximg/wmware_install_mac/05.png" align="left" width="80%"><img src="/medias/linuximg/wmware_install_mac/06.png" align="left" width="80%"><img src="/medias/linuximg/wmware_install_mac/07.png" align="left" width="80%"><img src="/medias/linuximg/wmware_install_mac/08.png" align="left" width="80%"><img src="/medias/linuximg/wmware_install_mac/09.png" align="left" width="80%"><h3 id="3-2-配置虚拟机"><a href="#3-2-配置虚拟机" class="headerlink" title="3.2 配置虚拟机"></a>3.2 配置虚拟机</h3><h4 id="3-2-1-Windows"><a href="#3-2-1-Windows" class="headerlink" title="3.2.1 Windows"></a>3.2.1 Windows</h4><img src="/medias/linuximg/virtualMachine_windows/1.png" align="left" width="80%"><img src="/medias/linuximg/virtualMachine_windows/2.png" align="left" width="80%"><img src="/medias/linuximg/virtualMachine_windows/3.png" align="left" width="80%"><img src="/medias/linuximg/virtualMachine_windows/4.png" align="left" width="80%"><img src="/medias/linuximg/virtualMachine_windows/5.png" align="left" width="80%"><img src="/medias/linuximg/virtualMachine_windows/6.png" align="left" width="80%"><img src="/medias/linuximg/virtualMachine_windows/7.png" align="left" width="80%"><img src="/medias/linuximg/virtualMachine_windows/8.png" align="left" width="80%"><img src="/medias/linuximg/virtualMachine_windows/9.png" align="left" width="80%"><h4 id="3-2-2-MacOS"><a href="#3-2-2-MacOS" class="headerlink" title="3.2.2 MacOS"></a>3.2.2 MacOS</h4><img src="/medias/linuximg/virtualMachine_mac/1.png" width="80%" align="left"><img src="/medias/linuximg/virtualMachine_mac/2.png" width="80%" align="left"><img src="/medias/linuximg/virtualMachine_mac/3.png" width="80%" align="left"><img src="/medias/linuximg/virtualMachine_mac/4.png" width="80%" align="left"><img src="/medias/linuximg/virtualMachine_mac/5.png" width="80%" align="left"><img src="/medias/linuximg/virtualMachine_mac/6.png" width="80%" align="left"><img src="/medias/linuximg/virtualMachine_mac/7.png" width="80%" align="left"><img src="/medias/linuximg/virtualMachine_mac/8.png" width="80%" align="left"><img src="/medias/linuximg/virtualMachine_mac/9.png" width="80%" align="left"><img src="/medias/linuximg/virtualMachine_mac/10.png" width="80%" align="left"><img src="/medias/linuximg/virtualMachine_mac/11.png" width="80%" align="left"><h4 id="3-2-3-配置虚拟机常见问题"><a href="#3-2-3-配置虚拟机常见问题" class="headerlink" title="3.2.3 配置虚拟机常见问题"></a>3.2.3 配置虚拟机常见问题</h4><h5 id="1-VMware版本问题"><a href="#1-VMware版本问题" class="headerlink" title="1. VMware版本问题"></a>1. VMware版本问题</h5><img src="/medias/linuximg/images/07.png" align="left" width="35%"><p>解决思路: 按照版本说明更换合适的虚拟机版本</p><h5 id="2-计算机虚拟化禁用了"><a href="#2-计算机虚拟化禁用了" class="headerlink" title="2. 计算机虚拟化禁用了"></a>2. 计算机虚拟化禁用了</h5><img src="/medias/linuximg/images/08.png" align="left" width="45%"><p>参考：<a href="https://jingyan.baidu.com/article/fc07f98976710e12ffe519de.html">https://jingyan.baidu.com/article/fc07f98976710e12ffe519de.html</a></p><h5 id="3-虚拟机被移动"><a href="#3-虚拟机被移动" class="headerlink" title="3. 虚拟机被移动"></a>3. 虚拟机被移动</h5><img src="/medias/linuximg/images/09.png" align="left" width="45%"><p>点击”我已复制该虚拟机”</p><h5 id="4-不支持CPUID错误"><a href="#4-不支持CPUID错误" class="headerlink" title="4. 不支持CPUID错误"></a>4. 不支持CPUID错误</h5><img src="/medias/linuximg/images/10.png" align="left" width="48%"><img src="/medias/linuximg/images/11.png" align="left" width="48%"><p>先点击”确定”，再点击”放弃”</p><h5 id="5-第一次使用虚拟机"><a href="#5-第一次使用虚拟机" class="headerlink" title="5. 第一次使用虚拟机"></a>5. 第一次使用虚拟机</h5><img src="/medias/linuximg/images/12.png" align="left" width="50%"><img src="/medias/linuximg/images/13.png" align="left" width="50%"><h5 id="6-权限不足"><a href="#6-权限不足" class="headerlink" title="6. 权限不足"></a>6. 权限不足</h5><img src="/medias/linuximg/images/14.png" align="left" width="50%"><img src="/medias/linuximg/images/15.png" align="left" width="50%"><h5 id="7-计算机配置问题"><a href="#7-计算机配置问题" class="headerlink" title="7. 计算机配置问题"></a>7. 计算机配置问题</h5><img src="/medias/linuximg/images/16.png" align="left" width="50%"><p>参考链接: <a href="https://jingyan.baidu.com/article/fc07f98976710e12ffe519de.html">https://jingyan.baidu.com/article/fc07f98976710e12ffe519de.html</a></p><h5 id="8-ISO文件损坏或丢失"><a href="#8-ISO文件损坏或丢失" class="headerlink" title="8. ISO文件损坏或丢失"></a>8. ISO文件损坏或丢失</h5><img src="/medias/linuximg/images/17.png" align="left" width="70%"><p>损坏的解决方案: 重新拷贝一份ISO文件</p><p>丢失的解决方案: 在启动前，请先配置ISO文件</p><h5 id="9-句柄无效"><a href="#9-句柄无效" class="headerlink" title="9. 句柄无效"></a>9. 句柄无效</h5><img src="/medias/linuximg/images/18.png" align="left" width="45%"><ol><li><p>查询虚拟机存放的位置</p><img src="/medias/linuximg/images/19.png" align="left" width="80%"></li><li><p>用记事本打开 CentOS7.vmx 文件</p><p>找到 vmci0.present = “TRUE” 一项: 将 TRUE 修改成 FALSE</p><img src="/medias/linuximg/images/20.png" align="left" width="80%"></li></ol><h3 id="3-3-安装-Ubuntu"><a href="#3-3-安装-Ubuntu" class="headerlink" title="3.3 安装 Ubuntu"></a>3.3 安装 Ubuntu</h3><p>安装系统之前先更改系统文件下载镜像地址, 提升安装系统过程中文件的下载速度。</p><p>安装系统之前先更改 Ubuntu 临时系统的显示分辨率, 否则安装界面将显示不全。</p><img src="/medias/linuximg/ubuntu_install/0.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/1.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/2.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/13.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/14.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/15.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/16.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/17.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/18.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/19.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/20.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/21.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/22.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/23.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/24.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/25.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/26.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/27.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/28.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/29.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/30.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/31.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/32.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/3.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/4.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/5.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/6.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/7.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/8.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/9.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/10.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/11.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/33.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/34.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/35.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/36.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/37.png" align="left" width="80%"><img src="/medias/linuximg/ubuntu_install/38.png" align="left" width="80%"><h3 id="3-4-安装-VMware-Tools"><a href="#3-4-安装-VMware-Tools" class="headerlink" title="3.4 安装 VMware Tools"></a>3.4 安装 VMware Tools</h3><img src="/medias/linuximg/VMwareTools_install/29.png" align="left" width="80%"><img src="/medias/linuximg/VMwareTools_install/30.png" align="left" width="80%"><img src="/medias/linuximg/VMwareTools_install/31.png" align="left" width="80%"><img src="/medias/linuximg/VMwareTools_install/32.png" align="left" width="80%"><img src="/medias/linuximg/VMwareTools_install/33.png" align="left" width="80%"><img src="/medias/linuximg/VMwareTools_install/34.png" align="left" width="80%"><img src="/medias/linuximg/VMwareTools_install/35.png" align="left" width="80%"><img src="/medias/linuximg/VMwareTools_install/36.png" align="left" width="80%"><img src="/medias/linuximg/VMwareTools_install/37.png" align="left" width="80%"><img src="/medias/linuximg/VMwareTools_install/38.png" align="left" width="80%"><img src="/medias/linuximg/VMwareTools_install/39.png" align="left" width="80%"><img src="/medias/linuximg/VMwareTools_install/40.png" align="left" width="80%"><img src="/medias/linuximg/VMwareTools_install/41.png" align="left" width="80%"><img src="/medias/linuximg/VMwareTools_install/42.png" align="left" width="80%"><img src="/medias/linuximg/VMwareTools_install/43.png" align="left" width="80%"><img src="/medias/linuximg/VMwareTools_install/44.png" align="left" width="80%"><h2 id="4-系统快照"><a href="#4-系统快照" class="headerlink" title="4. 系统快照"></a>4. 系统快照</h2><p>快照可以记录当前系统的状态, 用来在操作系统发生故障时将系统恢复至之前没有故障的状态。</p><h3 id="4-1-拍摄快照"><a href="#4-1-拍摄快照" class="headerlink" title="4.1 拍摄快照"></a>4.1 拍摄快照</h3><img src="/medias/linuximg/snap_shot_mac/1.png" align="left" width="90%"><h3 id="4-2-管理快照"><a href="#4-2-管理快照" class="headerlink" title="4.2 管理快照"></a>4.2 管理快照</h3><img src="/medias/linuximg/snap_shot_mac/2.png" align="left" width="90%"><img src="/medias/linuximg/snap_shot_mac/3.png" align="left" width="90%"><h3 id="4-3-恢复快照"><a href="#4-3-恢复快照" class="headerlink" title="4.3 恢复快照"></a>4.3 恢复快照</h3><img src="/medias/linuximg/snap_shot_mac/4.png" align="left" width="90%"><img src="/medias/linuximg/snap_shot_mac/5.png" align="left" width="90%"><img src="/medias/linuximg/snap_shot_mac/6.png" align="left" width="90%"><h2 id="5-文件和目录"><a href="#5-文件和目录" class="headerlink" title="5. 文件和目录"></a>5. 文件和目录</h2><h3 id="5-1-单用户操作系统和多用户操作系统"><a href="#5-1-单用户操作系统和多用户操作系统" class="headerlink" title="5.1 单用户操作系统和多用户操作系统"></a>5.1 单用户操作系统和多用户操作系统</h3><p><strong>单用户操作系统:</strong> 一台计算机在同一时间只能由一个用户使用，一个用户独自享用系统的全部硬件和软件资源 (Windows XP 之前)</p><p><strong>多用户操作系统</strong>：一台计算机在同一时间可以由多个用户使用，多个用户共同享用系统的全部硬件和软件资源 (Linux)</p><h3 id="5-2-Windows-和-Linux-文件系统的区别"><a href="#5-2-Windows-和-Linux-文件系统的区别" class="headerlink" title="5.2 Windows 和 Linux 文件系统的区别"></a>5.2 Windows 和 Linux 文件系统的区别</h3><h4 id="5-2-1-windows"><a href="#5-2-1-windows" class="headerlink" title="5.2.1 windows"></a>5.2.1 windows</h4><p>在 <code>Windows</code> 下, 打开”计算机”, 我们看到的是一个个的驱动器盘符:</p><img src="/medias/linuximg/images/25.png" align="left" width="80%"><p>每个驱动器都有自己的根目录结构, 这样形成了多个树并列的情况, 如下图所示: </p><img src="/medias/linuximg/images/26.png" align="left"><h4 id="5-2-2-Linux"><a href="#5-2-2-Linux" class="headerlink" title="5.2.2 Linux"></a>5.2.2 Linux</h4><p>在 <code>Linux</code> 下, 我们是看不到驱动器盘符，我们看到的是文件夹(目录):</p><img src="/medias/linuximg/images/27.png" align="left" width="80%"><p>linux <code>没有盘符概念, 只有一个根目录 </code>, 所有文件都在它的下面</p><img src="/medias/linuximg/images/28.png" align="left" width="80%"><h3 id="5-3-用户目录"><a href="#5-3-用户目录" class="headerlink" title="5.3 用户目录"></a>5.3 用户目录</h3><p><code>~</code> 表示当前用户的家目录</p><img src="/medias/linuximg/images/29.png" align="left" width="80%"><h3 id="5-4-Linux-主要目录速查表"><a href="#5-4-Linux-主要目录速查表" class="headerlink" title="5.4 Linux 主要目录速查表"></a>5.4 Linux 主要目录速查表</h3><ul><li>/：根目录，<strong>一般根目录下只存放目录</strong>，在 linux 下有且只有一个根目录，所有的东西都是从这里开始<ul><li>当在终端里输入 <code>/home</code>，其实是在告诉电脑，先从 <code>/</code>（根目录）开始，再进入到 <code>home</code> 目录</li></ul></li><li>/bin、/usr/bin：可执行二进制文件的目录，如常用的命令 ls、tar、mv、cat 等</li><li>/boot：放置 linux 系统启动时用到的一些文件，如 linux 的内核文件：<code>/boot/vmlinuz</code>，系统引导管理器：<code>/boot/grub</code></li><li>/dev：存放linux系统下的设备文件，访问该目录下某个文件，相当于访问某个设备，常用的是挂载光驱<code>mount /dev/cdrom /mnt</code></li><li>/etc：系统配置文件存放的目录，不建议在此目录下存放可执行文件，重要的配置文件有 <ul><li>/etc/inittab</li><li>/etc/fstab</li><li>/etc/init.d</li><li>/etc/X11</li><li>/etc/sysconfig</li><li>/etc/xinetd.d</li></ul></li><li>/home：系统默认的用户家目录，新增用户账号时，用户的家目录都存放在此目录下<ul><li><code>~</code> 表示当前用户的家目录</li><li><code>~edu</code> 表示用户 <code>edu</code> 的家目录</li></ul></li><li>/lib、/usr/lib、/usr/local/lib：系统使用的函数库的目录，程序在执行过程中，需要调用一些额外的参数时需要函数库的协助</li><li>/lost+fount：系统异常产生错误时，会将一些遗失的片段放置于此目录下</li><li>/mnt: /media：光盘默认挂载点，通常光盘挂载于 /mnt/cdrom 下，也不一定，可以选择任意位置进行挂载</li><li>/opt：给主机额外安装软件所摆放的目录</li><li>/proc：此目录的数据都在内存中，如系统核心，外部设备，网络状态，由于数据都存放于内存中，所以不占用磁盘空间，比较重要的文件有：/proc/cpuinfo、/proc/interrupts、/proc/dma、/proc/ioports、/proc/net/* 等</li><li>/root：系统管理员root的家目录</li><li>/sbin、/usr/sbin、/usr/local/sbin：放置系统管理员使用的可执行命令，如 fdisk、shutdown、mount 等。与 /bin 不同的是，这几个目录是给系统管理员 root 使用的命令，一般用户只能”查看”而不能设置和使用</li><li>/tmp：一般用户或正在执行的程序临时存放文件的目录，任何人都可以访问，重要数据不可放置在此目录下</li><li>/srv：服务启动之后需要访问的数据目录，如 www 服务需要访问的网页数据存放在 /srv/www 内</li><li>/usr：应用程序存放目录<ul><li>/usr/bin：存放应用程序</li><li>/usr/share：存放共享数据</li><li>/usr/lib：存放不能直接运行的，却是许多程序运行所必需的一些函数库文件</li><li>/usr/local：存放软件升级包</li><li>/usr/share/doc：系统说明文件存放目录</li><li>/usr/share/man：程序说明文件存放目录</li></ul></li><li>/var：放置系统执行过程中经常变化的文件<ul><li>/var/log：随时更改的日志文件 </li><li>/var/spool/mail：邮件存放的目录</li><li>/var/run：程序或服务启动后，其 PID 存放在该目录下</li></ul></li></ul><h2 id="6-终端命令"><a href="#6-终端命令" class="headerlink" title="6. 终端命令"></a>6. 终端命令</h2><h3 id="6-1-学习终端命令的原因"><a href="#6-1-学习终端命令的原因" class="headerlink" title="6.1 学习终端命令的原因"></a>6.1 学习终端命令的原因</h3><p>在真实的工作场景中, Linux 服务器是不会安装图形界面的, 维护人员都是通过远程链接的方式链接到服务器系统, 使用<strong>命令</strong>的方式对系统进行维护, 所以我们要掌握一些 Linux 系统的操作命令, 如 <strong>磁盘操作</strong>、<strong>文件存取</strong>、<strong>目录操作</strong>、<strong>进程管理</strong>、<strong>文件权限</strong> 设定等。</p><p>Linux 发行版本的命令大概有 200 多个, 但是常用的命令只有 10 多个而已, 对于常用命令不需要死记硬背, 用的多了自然就记住了, 不要尝试一次学会所有的命令，有些命令是非常不常用的，临时遇到，临时百度就可以</p><img src="/medias/linuximg/images/02.jpg" align="left" width="80%"><h3 id="6-2-常用的基本命令"><a href="#6-2-常用的基本命令" class="headerlink" title="6.2 常用的基本命令"></a>6.2 常用的基本命令</h3><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>ls</td><td>list</td><td>查看当前文件夹下的内容</td></tr><tr><td>02</td><td>pwd</td><td>print work directory</td><td>查看当前所在工作目录</td></tr><tr><td>03</td><td>cd [目录名]</td><td>change directory</td><td>切换目录</td></tr><tr><td>04</td><td>touch [文件名]</td><td>touch</td><td>新建文件</td></tr><tr><td>05</td><td>mkdir [目录名]</td><td>make directory</td><td>创建目录</td></tr><tr><td>06</td><td>rm [文件名]</td><td>remove</td><td>删除指定名称的文件</td></tr><tr><td>07</td><td>clear</td><td>clear</td><td>清屏</td></tr></tbody></table><p><code>ctrl + shift + = </code> <strong>放大</strong>终端窗口的字体显示</p><p><code>ctrl + - </code> <strong>缩小</strong>终端窗口的字体显示</p><h3 id="6-3-终端命令格式"><a href="#6-3-终端命令格式" class="headerlink" title="6.3 终端命令格式"></a>6.3 终端命令格式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token punctuation">[</span>-options<span class="token punctuation">]</span> <span class="token punctuation">[</span>parameter<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>command</code>：命令名称，相应功能的英文单词或单词的缩写</p><p><code>-options</code>：选项，可用来对命令进行控制，也可以省略</p><p><code>parameter</code>：传给命令的参数，可以是 <strong>零个</strong>、<strong>一个</strong> 或者 <strong>多个</strong></p><p><code>[]</code> 代表可选 </p><h3 id="6-4-查阅命令帮助信息"><a href="#6-4-查阅命令帮助信息" class="headerlink" title="6.4 查阅命令帮助信息"></a>6.4 查阅命令帮助信息</h3><ol><li><p>查看命令的简要帮助信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> --help<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查询命令的详细帮助信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">man</span> <span class="token builtin class-name">command</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>man</code> 是 <strong>manual</strong> 的缩写, 是 Linux 提供的一个<strong>手册</strong>, 包含了绝大部分命令、函数的详细使用说明</p><table><thead><tr><th>操作键</th><th>功能</th></tr></thead><tbody><tr><td>空格键、f</td><td>显示手册的下一页</td></tr><tr><td>Enter 键</td><td>按一次手册内容向下滚动一行</td></tr><tr><td>b</td><td>显示手册的上一页</td></tr><tr><td>q</td><td>退出手册</td></tr></tbody></table></li></ol><h3 id="6-5-终端使用技巧"><a href="#6-5-终端使用技巧" class="headerlink" title="6.5 终端使用技巧"></a>6.5 终端使用技巧</h3><h4 id="1-自动补全"><a href="#1-自动补全" class="headerlink" title="1. 自动补全"></a>1. 自动补全</h4><p>在敲出 <code>文件</code>／<code>目录</code>／<code>命令</code> 的前几个字母之后按下 <code>tab</code> 键, 如果输入的没有歧义, 系统会自动补全</p><p>如果还存在其他相似的 <code>文件</code>／<code>目录</code>／<code>命令</code>的话，再按一下 <code>tab</code> 键，系统会提示可能存在的命令</p><img src="/medias/linuximg/images/30.png"><h4 id="2-曾经使用过的命令"><a href="#2-曾经使用过的命令" class="headerlink" title="2. 曾经使用过的命令"></a>2. 曾经使用过的命令</h4><p>按 <code>上</code>／<code>下</code> 光标键可以在曾经使用过的命令之间来回切换</p><p>如果想要退出选择，并且不想执行当前选中的命令，可以按 <code>ctrl + c</code></p><h2 id="7-文件和目录常用命令"><a href="#7-文件和目录常用命令" class="headerlink" title="7. 文件和目录常用命令"></a>7. 文件和目录常用命令</h2><h3 id="7-1-查看目录内容"><a href="#7-1-查看目录内容" class="headerlink" title="7.1 查看目录内容"></a>7.1 查看目录内容</h3><h4 id="7-1-1-ls-命令说明"><a href="#7-1-1-ls-命令说明" class="headerlink" title="7.1.1 ls 命令说明"></a>7.1.1 ls 命令说明</h4><p><code>ls</code> 是英文单词 <strong>list</strong> 的简写, 其功能为列出当前工作目录中的内容, 是 linux 用户最常用的命令之一, 类似于 <strong>DOS</strong> 下的 <code>dir</code> 命令。</p><h4 id="7-1-2-ls-常用选项"><a href="#7-1-2-ls-常用选项" class="headerlink" title="7.1.2 ls 常用选项"></a>7.1.2 ls 常用选项</h4><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>-a</td><td>显示当前工作目录下的所有目录和文件, 包括隐藏文件</td></tr><tr><td>-l</td><td>以列表方式显示文件的详细信息</td></tr><tr><td>-h</td><td>和 -l 配合使用以人性化的方式显示文件大小</td></tr><tr><td>-p</td><td>对目录附加”/“作为指示符号</td></tr></tbody></table><p>在 linux 中, 以 . 开头的文件为隐藏文件, 以 . 开头的文件夹为隐藏文件夹, 若要查看隐藏文件需要在 ls 命令的后面加 <code>-a</code> 参数。</p><p>在 linux 中, <strong>.</strong> 代表当前目录, <strong>..</strong> 代表上一级目录。</p><p>命令选项可以分开指定也可以一起指定且顺序不会影响执行结果。ls -lahp     ls -hpla</p><p><code>ls -lap</code> 命令可以使用 <code>ll</code> 命令代替, 所以以上命令可以使用 <code>ll -h</code> 代替。</p><p><code>ls</code> 命令可以传递目录作为参数, 表示查看特定目录中的文件和目录。</p><p><code>ls</code> 命令可以传递文件作为参数, 表示查看特定文件的属性内容。</p><h4 id="7-1-3-ls-联合通配符"><a href="#7-1-3-ls-联合通配符" class="headerlink" title="7.1.3 ls 联合通配符"></a>7.1.3 ls 联合通配符</h4><table><thead><tr><th>通配符</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>代表任意个数的字符, 可以有可以没有, 可以有一个可以有多个</td></tr><tr><td>?</td><td>代表任意一个字符, 必须有且只能有一个</td></tr><tr><td>[abc]</td><td>匹配 a、b、c 中的任意一个字符</td></tr><tr><td>[a-f]</td><td>匹配从 a 到 f 范围内的的任意一个字符</td></tr></tbody></table><h3 id="7-2-切换目录"><a href="#7-2-切换目录" class="headerlink" title="7.2 切换目录"></a>7.2 切换目录</h3><h4 id="7-2-1-cd"><a href="#7-2-1-cd" class="headerlink" title="7.2.1 cd"></a>7.2.1 cd</h4><p><code>cd</code> 是英文单词 <strong>change directory</strong> 的简写, 其功能是更改当前的工作目录, 是 linux 用户最常用的命令之一。</p><p>注意：Linux 系统中所有的 <strong>目录</strong> 和 <strong>文件名</strong> 都是大小写敏感的</p><table><thead><tr><th>命令</th><th>含义</th></tr></thead><tbody><tr><td>cd</td><td>切换到当前用户的家目录(/home/用户目录)</td></tr><tr><td>cd ~</td><td>切换到当前用户的家目录(/home/用户目录)</td></tr><tr><td>cd ..</td><td>切换到上级目录</td></tr><tr><td>cd -</td><td>可以在最近两次工作目录之间来回切换</td></tr></tbody></table><h4 id="7-2-2-相对路径和绝对路径"><a href="#7-2-2-相对路径和绝对路径" class="headerlink" title="7.2.2 相对路径和绝对路径"></a>7.2.2 相对路径和绝对路径</h4><p><strong>相对路径</strong>: 在输入路径时，最前面不是 <strong>/</strong> 或者 **~**，表示相对 <strong>当前目录</strong> 所在的目录位置</p><p><strong>绝对路径</strong>: 在输入路径时，最前面是 <strong>/</strong> 或者 **~**，表示从 <strong>根目录/家目录</strong> 开始的具体目录位置</p><h3 id="7-3-创建和删除操作"><a href="#7-3-创建和删除操作" class="headerlink" title="7.3 创建和删除操作"></a>7.3 创建和删除操作</h3><h4 id="7-3-1-touch"><a href="#7-3-1-touch" class="headerlink" title="7.3.1 touch"></a>7.3.1 touch</h4><p>如果文件 <strong>不存在</strong>, 创建一个空白文件</p><p>如果文件 <strong>已经存在</strong>, 更新文件的最新修改日期为当前时间</p><h4 id="7-3-2-mkdir"><a href="#7-3-2-mkdir" class="headerlink" title="7.3.2 mkdir"></a>7.3.2 mkdir</h4><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-p</td><td>可以递归创建目录</td></tr></tbody></table><h4 id="7-3-3-rm"><a href="#7-3-3-rm" class="headerlink" title="7.3.3 rm"></a>7.3.3 rm</h4><p>删除文件或目录</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-d</td><td>删除空目录</td></tr><tr><td>-r</td><td>递归地删除非空目录</td></tr><tr><td>-f</td><td>强制删除，忽略不存在的文件，无需提示</td></tr></tbody></table><h3 id="7-4-拷贝和移动文件"><a href="#7-4-拷贝和移动文件" class="headerlink" title="7.4 拷贝和移动文件"></a>7.4 拷贝和移动文件</h3><h4 id="7-4-1-cp"><a href="#7-4-1-cp" class="headerlink" title="7.4.1 cp"></a>7.4.1 cp</h4><p><code>cp</code> 命令的功能是将给出的 <strong>文件</strong> 或 <strong>目录</strong> 复制到另一个 <strong>文件</strong> 或 <strong>目录</strong> 中。</p><table><thead><tr><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>cp 源文件 目标文件</td><td>copy</td><td>复制文件或者目录</td></tr></tbody></table><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-i</td><td>覆盖文件前提示</td></tr><tr><td>-r</td><td>若给出的源文件是目录文件，则 cp 将递归复制该目录下的所有子目录和文件, 目标文件必须为一个目录名</td></tr></tbody></table><h4 id="7-4-2-mv"><a href="#7-4-2-mv" class="headerlink" title="7.4.2 mv"></a>7.4.2 mv</h4><p><code>mv</code> 命令可以用来移动文件或目录, 也可以为文件或目录重命名。</p><table><thead><tr><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>mv 源文件 目标文件</td><td>move</td><td>移动文件或者目录／文件或者目录重命名</td></tr></tbody></table><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-i</td><td>覆盖文件前提示</td></tr></tbody></table><h3 id="7-5-查看文件内容"><a href="#7-5-查看文件内容" class="headerlink" title="7.5 查看文件内容"></a>7.5 查看文件内容</h3><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>cat 文件名</td><td>concatenate</td><td>查看文件内容、创建文件、文件合并、追加文件内容等功能</td></tr><tr><td>02</td><td>more 文件名</td><td>more</td><td>分屏显示文件内容</td></tr><tr><td>03</td><td>grep 搜索文本 文件名</td><td>grep</td><td>搜索文本文件内容</td></tr></tbody></table><h4 id="5-1-cat"><a href="#5-1-cat" class="headerlink" title="5.1 cat"></a>5.1 cat</h4><p><code>cat</code> 命令用来 <strong>查看文件内容</strong>, 它会一次显示所有的内容，适合 <strong>查看内容较少</strong> 的文本文件。</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-b</td><td>对于非空行内容输出编号</td></tr><tr><td>-n</td><td>对于所有行内容输出编号</td></tr></tbody></table><h4 id="5-2-more"><a href="#5-2-more" class="headerlink" title="5.2 more"></a>5.2 more</h4><p><code>more</code> 命令用来分屏显示文件内容, 每次只显示一页内容, 适合于 <strong>查看内容较多</strong> 的文本文件。</p><p>使用 <code>more</code> 的操作键：</p><table><thead><tr><th>操作键</th><th>功能</th></tr></thead><tbody><tr><td>空格键</td><td>显示下一屏内容</td></tr><tr><td>Enter 键</td><td>一次滚动一行</td></tr><tr><td>b</td><td>显示上一屏内容</td></tr><tr><td>q</td><td>退出</td></tr></tbody></table><h4 id="5-3-grep"><a href="#5-3-grep" class="headerlink" title="5.3 grep"></a>5.3 grep</h4><p><code>grep</code> 命令用于在指定的文件中查找指定的文本。</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-i</td><td>忽略大小写</td></tr><tr><td>-v</td><td>显示不包含匹配文本的所有行</td></tr><tr><td>-n</td><td>显示行号</td></tr></tbody></table><p>常用的两种模式查找</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>^a</td><td>行首，搜寻以 <strong>a</strong> 开头的行</td></tr><tr><td>ke$</td><td>行尾，搜寻以 <strong>ke</strong> 结束的行</td></tr></tbody></table><h3 id="7-6-其他命令"><a href="#7-6-其他命令" class="headerlink" title="7.6 其他命令"></a>7.6 其他命令</h3><h4 id="7-6-1-echo"><a href="#7-6-1-echo" class="headerlink" title="7.6.1 echo"></a>7.6.1 echo</h4><p><code>echo</code> 表示输出, 命令后面写什么就将什么内容输出到命令行中, 通常会和 <strong>重定向</strong> 联合使用</p><h4 id="7-6-2-重定向-gt-和-gt-gt"><a href="#7-6-2-重定向-gt-和-gt-gt" class="headerlink" title="7.6.2 重定向 > 和 >>"></a>7.6.2 重定向 <code>&gt;</code> 和 <code>&gt;&gt;</code></h4><p>Linux 允许将命令执行结果 <strong>重定向</strong> 到一个 <strong>文件, 将本应显示在</strong>终端上的内容 <strong>输出／追加</strong> 到<strong>指定文件中</strong></p><p><code>&gt;</code> 表示输出，会覆盖文件中原有的内容</p><p><code>&gt;&gt;</code> 表示追加，会将内容追加到已有文件的末尾</p><h4 id="7-6-3-管道"><a href="#7-6-3-管道" class="headerlink" title="7.6.3 管道 |"></a>7.6.3 管道 <code>|</code></h4><p>通过管道可以将 <strong>一个命令的输出</strong> 做为 <strong>另一个命令的输入</strong>。</p><p>可以理解现实生活中的管子，管子的一头塞东西进去，另一头取出来，这里 <code>|</code> 的左右分为两端，左端塞东西（写），右端取东西（读）</p><p>常用的管道命令有:</p><p><code>more</code>：分屏显示内容, <code>ll | more</code></p><p><code>grep</code>：在命令执行结果的基础上过滤指定的文本</p><table><thead><tr><th>选项</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>-A</td><td>输出匹配行内容及该行内容后面的指定数量的行数内容</td><td>cat demo.txt | grep e -A 2</td></tr><tr><td>-B</td><td>输出匹配行内容及该行内容前面的指定数量的行数内容</td><td>cat demo.txt | grep e -B 2</td></tr><tr><td>-C</td><td>输出匹配行内容及该行内容前后面的指定数量的行数内容</td><td>cat demo.txt | grep f -C 2</td></tr><tr><td>-i</td><td>过滤文本时忽略大小写</td><td>cat demo.txt | grep w -i</td></tr></tbody></table><p>单独使用 <code>grep</code> 命令: <code>grep -i 'hello world' demo.txt</code></p><h2 id="8-远程管理"><a href="#8-远程管理" class="headerlink" title="8. 远程管理"></a>8. 远程管理</h2><h3 id="8-1-关机和重启"><a href="#8-1-关机和重启" class="headerlink" title="8.1 关机和重启"></a>8.1 关机和重启</h3><p><code>shutdown</code> 命令可以 <strong>关闭</strong> 或者 <strong>重新启动</strong> 操作系统。</p><table><thead><tr><th>序号</th><th>命令</th><th>对应英文</th><th>作用</th></tr></thead><tbody><tr><td>01</td><td>shutdown 选项 时间</td><td>shutdown</td><td>关机／重新启动</td></tr></tbody></table><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>重新启动</td></tr></tbody></table><p><strong>不指定选项和参数</strong>，默认 <strong>1分钟</strong> 之后 <strong>关闭系统</strong>, 远程维护服务器时, 最好不要关闭系统, 而应该重新启动系统。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 立刻关机，其中 now 表示现在</span>$ <span class="token function">shutdown</span> now<span class="token comment"># 重新启动操作系统, 其中 now 表示现在</span>$ <span class="token function">shutdown</span> -r now<span class="token comment"># 系统在今天的 20:25 会关机</span>$ <span class="token function">shutdown</span> <span class="token number">20</span>:25<span class="token comment"># 系统再过十分钟后自动关机</span>$ <span class="token function">shutdown</span> +10<span class="token comment"># 取消之前指定的关机计划</span>$ <span class="token function">shutdown</span> -c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-IP地址"><a href="#8-2-IP地址" class="headerlink" title="8.2 IP地址"></a>8.2 IP地址</h3><p>在 linux 系统中, 可以通过 <code>ip addr</code> 命令查看本机使用的 ip 地址, 可以通过 <code>ping</code> 命令检查本机是否可以与指定主机进行通信。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看本机使用的 ip 地址</span>$ <span class="token function">ip</span> addr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 检测到目标主机是否连接正常</span>$ <span class="token function">ping</span> IP地址<span class="token comment"># 检测本地网卡工作正常</span>$ <span class="token function">ping</span> <span class="token number">127.0</span>.0.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ping</code> 一般用于检测当前计算机到目标计算机之间的网络 <strong>是否通畅</strong>, <strong>数值越, 速度越慢</strong>。</p><p>原理：网络上的机器都有 <strong>唯一确定的 IP 地址</strong>，我们给<strong>目标 IP 地址</strong>发送一个数据包，对方就要返回一个数据包，根据返回的数据包以及时间，我们可以确定目标主机的存在。</p><p>提示: 在 Linux 中, 想要终止一个终端程序的执行, 绝大多数都可以使用 <code>CTRL + C</code>。</p><h3 id="8-3-远程登录"><a href="#8-3-远程登录" class="headerlink" title="8.3 远程登录"></a>8.3 远程登录</h3><h4 id="8-3-1-SSH-介绍"><a href="#8-3-1-SSH-介绍" class="headerlink" title="8.3.1 SSH 介绍"></a>8.3.1 SSH 介绍</h4><p>SSH 是 Secure Shell 的缩写, 是建立在应用层基础上的网络安全协议。</p><p>利用 <code>SSH 协议</code> 可以有效<strong>防止远程管理过程中的信息泄露</strong>。</p><p><code>SSH</code> 协议的另一项优点是传输的数据可以是经过压缩的, 所以可以加快传输的速。</p><img src="/medias/linuximg/images/31.png" align="left" width="60%"><p>要使用此协议需要在服务器系统和客户端系统安装对应的 SSH 软件。</p><h4 id="8-3-2-ip和端口号"><a href="#8-3-2-ip和端口号" class="headerlink" title="8.3.2 ip和端口号"></a>8.3.2 ip和端口号</h4><p>ip: 接入网络的设备的唯一标识, 网络中的其他设备可以通过该标识进行通信。</p><p><strong>端口号:</strong> 通过 IP 地址可以找到网络中的计算机, 通过端口号可以进一步找到计算中提供服务的应用程序。</p><p><strong>常见端口号列表:</strong></p><table><thead><tr><th>服务</th><th>端口号</th></tr></thead><tbody><tr><td>SSH 服务器</td><td>22</td></tr><tr><td>Web 服务器</td><td>80</td></tr><tr><td>HTTPS</td><td>443</td></tr><tr><td>FTP 服务器</td><td>21</td></tr></tbody></table><h4 id="8-3-3-SSH-远程登录"><a href="#8-3-3-SSH-远程登录" class="headerlink" title="8.3.3 SSH 远程登录"></a>8.3.3 SSH 远程登录</h4><p>Ubuntu 安装 ssh:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openssh-server openssh-client<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>客户端连接 Ubuntu:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> <span class="token punctuation">[</span>-p port<span class="token punctuation">]</span> user@remote<span class="token function">ssh</span> -p <span class="token number">22</span> mongoose@192.168.181.129<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>user</code> 是在远程机器上的用户名, 如果不指定的话默认为当前系统用户名称</p><p><code>remote</code> 是远程机器的地址, 可以是 <strong>IP</strong>／<strong>域名</strong>, 或者是 <strong>后面会提到的别名</strong></p><p><code>port</code> 是 <strong>SSH Server 监听的端口</strong>，如果不指定，就为默认值 <code>22</code></p><p>提示一: 使用 <code>exit</code> 命令退出当前用户的登录</p><p>提示二: 在工作中, SSH 服务器的端口号可能<strong>不是 22</strong>, 此时就需要使用 <code>-p</code> 选项, 指定正确的端口号</p><h4 id="8-3-4-scp-远程拷贝"><a href="#8-3-4-scp-远程拷贝" class="headerlink" title="8.3.4 scp 远程拷贝"></a>8.3.4 scp 远程拷贝</h4><p>scp 就是 <code>secure copy</code>，scp 命令的作用是进行 <strong>远程文件拷贝</strong>。</p><img src="/medias/linuximg/images/32.png" width="70%" align="left"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 把本机当前目录下的 b.txt 文件 复制到 ubuntu 系统 mongoose 用户的桌面文件夹下</span><span class="token comment"># 注意: `:` 后面的路径如果不是绝对路径, 则以用户的家目录作为参照路径</span><span class="token function">scp</span> -P <span class="token number">22</span> b.txt mongose@192.168.181.129:桌面<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将 ubuntu 系统中mongoose用户桌面文件夹中的 a.txt 文件拷贝到本机系统的当前文件夹下</span><span class="token function">scp</span> -P <span class="token number">22</span> mongoose@192.168.181.129:桌面/a.txt <span class="token builtin class-name">.</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 加上 -r 选项可以拷贝文件夹</span><span class="token comment"># 将 ubuntu 系统中 mongoose 用户的桌面文件夹拷贝到本机系统的当前文件夹下的 demo 文件夹下</span><span class="token function">scp</span> -P <span class="token number">22</span> -r mongoose@192.168.181.129:桌面 ./demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-r</td><td>若给出的源文件是目录文件, 则 scp 将递归复制该目录下的所有子目录和文件, 目标文件必须为一个目录名</td></tr><tr><td>-P</td><td>若远程 SSH 服务器的端口不是 22, 需要使用大写字母 -P 选项指定端口</td></tr></tbody></table><h4 id="8-3-5-SSH-免密登录"><a href="#8-3-5-SSH-免密登录" class="headerlink" title="8.3.5 SSH 免密登录"></a>8.3.5 SSH 免密登录</h4><p>提示: 和 SSH 相关的配置文件都保存在用户家目录下的 <code>.ssh</code> 目录下</p><p>第一步: 在本机通过 <code>ssh-keygen</code> 命令生成 SSH 的公钥和私钥。</p><p>第二步: 在本地通过 <code>ssh-copy-id [-p port] [-i id_rsa.pub] user@remote</code> 命令将公钥传递到目标主机。</p><p>注意: windows 系统中没有 <code>ssh-copy-id</code> 命令. windows 系统需要先通过 SSH 远程登录到 Ubuntu, 然后通过以下命令手动将公钥添加到 .ssh/authorized_keys 文件中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 切换到 .ssh 目录执行以下命令将公钥文件拷贝到 Ubuuntu</span><span class="token function">scp</span> id_rsa.pub mongoose@192.168.181.129:~/桌面<span class="token comment"># 在 Ubuntu 系统的桌面目录下执行以下命令通过系统自带编辑器打开公钥文件</span>gedit id_rsa.pub<span class="token comment"># 手动拷贝文件内容, 然后在终端中执行以下命令将公钥内容追加到 authorized_keys 文件中</span><span class="token builtin class-name">echo</span> <span class="token string">'long_line_with_contents_of_public_key_file'</span> <span class="token operator">&gt;&gt;</span> ~/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/medias/linuximg/images/33.png" align="left" width="75%"><p>非对称加密算法: 使用 <strong>公钥</strong> 加密的数据，需要使用 <strong>私钥</strong> 解密, 使用 <strong>私钥</strong> 加密的数据，需要使用 <strong>公钥</strong> 解密。</p><p>免密登录配置成功以后在使用 <code>scp</code> 命令进行远程文件拷贝时也不需要输入密码了。</p><h4 id="8-3-6-远程主机地址别名"><a href="#8-3-6-远程主机地址别名" class="headerlink" title="8.3.6 远程主机地址别名"></a>8.3.6 远程主机地址别名</h4><p>在每次连接远程主机时都需要重复输入端口号, 远程主机用户名称, 远程主机 IP 地址, 非常的繁琐且不好记忆, 我们可以为远程主机地址设置别名, 然后每次连接远程主机时使用别名, 这样的话, 连接远程主机的命令就会变得异常简洁, 比如 <code>ssh ubuntu</code>。</p><p>在本机的 <code>~/.ssh/config</code> 文件中添加以下内容: </p><pre class="line-numbers language-none"><code class="language-none">Host ubuntuHostName 192.168.181.129User mongoose  Port 22<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-防火墙"><a href="#8-4-防火墙" class="headerlink" title="8.4 防火墙"></a>8.4 防火墙</h3><p>Linux 系统中原始的防火墙配置工具是 iptables, 但是使用过程比较繁琐, 所以 Ubuntu 提供了一个基于 iptables 的防火墙工具 ufw。</p><p>ufw 是 Uncomplicated Firewal 单词的缩写, 意思是简单的防火墙, 目标是简化配置防火墙的过程。</p><p>ufw 默认是关闭状态, 一旦开启, 默认拒绝所有传入链接, 但允许所有传出链接。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看防火墙状态: 激活就是开启, 不活动就是关闭</span><span class="token function">sudo</span> ufw status<span class="token comment"># 开启防火墙</span><span class="token function">sudo</span> ufw <span class="token builtin class-name">enable</span><span class="token comment"># 关闭防火墙</span><span class="token function">sudo</span> ufw disable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>防火墙一旦开启, 意味着 ssh 连接将失败。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看系统中有哪些软件包可以向外提供服务</span><span class="token function">sudo</span> ufw app list<span class="token comment"># 将 ssh 提供的服务添加到防火墙允许的列表中</span><span class="token function">sudo</span> ufw allow <span class="token string">"OpenSSH"</span><span class="token function">sudo</span> ufw allow <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看防火墙状态并显示规则编号</span><span class="token function">sudo</span> ufw status numbered<span class="token comment"># 删除防火墙规则</span><span class="token function">sudo</span> ufw delete 编号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 重置防火墙</span><span class="token function">sudo</span> ufw reset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="8-5-静态IP"><a href="#8-5-静态IP" class="headerlink" title="8.5 静态IP"></a>8.5 静态IP</h3><h4 id="8-5-1-准备工作"><a href="#8-5-1-准备工作" class="headerlink" title="8.5.1 准备工作"></a>8.5.1 准备工作</h4><p>查看宿主主机的网关地址和可设置的静态IP地址范围。</p><h5 id="1-Windows"><a href="#1-Windows" class="headerlink" title="1. Windows"></a>1. Windows</h5><img src="/medias/linuximg/static_ip_windows/1.png"><img src="/medias/linuximg/static_ip_windows/2.png"><img src="/medias/linuximg/static_ip_windows/3.png"><img src="/medias/linuximg/static_ip_windows/4.png"><img src="/medias/linuximg/static_ip_windows/5.png"><img src="/medias/linuximg/static_ip_windows/6.png"><img src="/medias/linuximg/static_ip_windows/7.png"><img src="/medias/linuximg/static_ip_windows/8.png"><h5 id="2-MacOs"><a href="#2-MacOs" class="headerlink" title="2. MacOs"></a>2. MacOs</h5><p>通过 Mac 终端进入VMware Fusion的 vmnet8 目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /Library/Preferences/VMware<span class="token punctuation">\</span> Fusion/vmnet8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过 nat.config 配置文件查看本机网关地址和子网掩码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> nat.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到如下内容:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># NAT gateway address</span><span class="token comment"># 本机网关地址</span><span class="token function">ip</span> <span class="token operator">=</span> <span class="token number">192.168</span>.181.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看 dhcpd.conf 文件内容, 查询虚拟机允许选择的静态ip地址范围</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> dhcpd.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到如下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">subnet <span class="token number">192.168</span>.181.0 netmask <span class="token number">255.255</span>.255.0 <span class="token punctuation">{</span>range <span class="token number">192.168</span>.181.128 <span class="token number">192.168</span>.181.254<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>rang -&gt; 虚拟机允许选择的静态ip地址范围，自定义的静态ip地址必须要在这个范围内</p><h4 id="8-5-2-设置静态-IP"><a href="#8-5-2-设置静态-IP" class="headerlink" title="8.5.2 设置静态 IP"></a>8.5.2 设置静态 IP</h4><img src="/medias/linuximg/static_ip_windows/9.png"><img src="/medias/linuximg/static_ip_windows/10.png"><img src="/medias/linuximg/static_ip_windows/11.png"><img src="/medias/linuximg/static_ip_windows/12.png"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">network:  version: <span class="token number">2</span>  renderer: NetworkManager  ethernets:    ens33:                      <span class="token comment">#网卡名, 以Ubuntu操作系统的网卡名称为准</span>      dhcp4: no                 <span class="token comment">#ipv4关闭dhcp, 用static模式</span>      dhcp6: no                 <span class="token comment">#ip6关闭dhcp</span>      addresses:        - <span class="token number">192.168</span>.172.10/24     <span class="token comment">#本机IP地址</span>      gateway4: <span class="token number">192.168</span>.172.2   <span class="token comment">#vmware网关的的IP地址</span>      nameservers:              <span class="token comment">#DNS服务器</span>        addresses: <span class="token punctuation">[</span><span class="token number">114.114</span>.114.114, <span class="token number">8.8</span>.8.8, <span class="token number">1.1</span>.1.1<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/medias/linuximg/static_ip_windows/13.png"><h2 id="9-用户和权限"><a href="#9-用户和权限" class="headerlink" title="9. 用户和权限"></a>9. 用户和权限</h2><h3 id="9-1-用户管理"><a href="#9-1-用户管理" class="headerlink" title="9.1 用户管理"></a>9.1 用户管理</h3><h4 id="9-1-1-创建-设置密码-删除"><a href="#9-1-1-创建-设置密码-删除" class="headerlink" title="9.1.1 创建/设置密码/删除"></a>9.1.1 创建/设置密码/删除</h4><table><thead><tr><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>useradd -m 用户名</td><td>添加新用户</td><td>-m 自动创建用户家目录</td></tr><tr><td>passwd 用户名</td><td>设置用户密码</td><td>如果是普通用户, 直接用 passwd 可以修改自己的账户密码</td></tr><tr><td>userdel -r 用户名</td><td>删除用户</td><td>-r 选项会自动删除用户家目录</td></tr></tbody></table><p>创建用户时, 如果忘记添加 <code>-m</code> 选项, 最简单的方法就是<strong>删除用户, 重新创建</strong>。</p><p>创建用户时, 默认会创建一个和<strong>用户名</strong>同名的<strong>组名</strong>。</p><p>用户信息保存在 <code>/etc/passwd</code> 文件中。</p><p><code>/etc/passwd</code> 文件存放的是用户的信息, 由 6 个分号组成的 7 个信息分别是</p><ol><li>用户名</li><li>密码（x，表示加密的密码）</li><li>UID（用户标识）</li><li>GID（组标识）</li><li>用户全名或本地帐号</li><li>家目录</li><li>登录使用的 Shell, 就是登录之后使用的终端 sh 或 bash, 普通用户默认使用 sh, root 用户默认使用 bash.</li></ol><h4 id="9-1-2-用户信息"><a href="#9-1-2-用户信息" class="headerlink" title="9.1.2  用户信息"></a>9.1.2  用户信息</h4><h5 id="1-uid-概述"><a href="#1-uid-概述" class="headerlink" title="1. uid 概述"></a>1. uid 概述</h5><p>在 Linux 系统中, 每个用户都会有 uid, uid 表示的是用户 id, Linux 系统使用 uid 识别用户。</p><p>Linux 系统中的 uid 和用户名是对应的关系, 该对应关系被存储在 <code>/etc/passwd</code> 文件中。</p><p>在使用用户名登录 Linux 系统时, 系统会在 <code>/etc/passwd</code> 文件中查找用户名和 uid 的对应关系, 从而确定当前系统中是否存在该用户。</p><p>Linux 系统中使用 uid 记录文件的所属者, 在查看文件所属者时系统会在 <code>/etc/passwd</code> 文件中查找用户名和 uid 的对应关系, 然后将用户名显示出来。如果查找不到就将 uid 显示出来, 比如通过网络下载到本地的文件。</p><p>说白了用户名其实并无实际作用, 仅是为了方便用户记忆而已。</p><h5 id="2-gid-概述"><a href="#2-gid-概述" class="headerlink" title="2. gid 概述"></a>2. gid 概述</h5><p>在 Linux 系统中, 每个用户都会有 gid, gid 表示的是用户所属组的 id, Linux 系统使用 gid 识别用户属于哪一个用户组。</p><p>Linux 系统中的 gid 和组名称是对应的关系, 该对应关系被存储在 <code>/etc/group</code> 文件中。</p><p>Linux 系统中使用 gid 记录文件的所属组, 在查看文件所属组时系统仍然会在 <code>/etc/group</code> 文件中查找组名称和 gid 的对应关系, 然后将用户组名称显示出来。</p><h5 id="3-查看用户信息"><a href="#3-查看用户信息" class="headerlink" title="3. 查看用户信息"></a>3. 查看用户信息</h5><table><thead><tr><th>命令</th><th align="center">作用</th></tr></thead><tbody><tr><td>id [用户名]</td><td align="center">查看用户 UID 和 GID 信息, 不传递用户默认就是当前用户</td></tr><tr><td>who</td><td align="center">查看当前所有登录系统的用户列表</td></tr><tr><td>whoami</td><td align="center">查看当前登录用户的账户名</td></tr></tbody></table><table><thead><tr><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>cat /etc/passwd | grep 用户名</td><td>确认用户信息</td><td>新建用户后，用户信息会保存在 /etc/passwd 文件中</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看 zhangsan 用户的 uid 和 gid</span><span class="token function">id</span> zhangsan<span class="token comment"># 查看张三的用户信息</span><span class="token function">cat</span> -n /etc/passwd <span class="token operator">|</span> <span class="token function">grep</span> zhangsan<span class="token comment"># 查看 develop 组信息</span><span class="token function">cat</span> -n /etc/group <span class="token operator">|</span> <span class="token function">grep</span> develop<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-1-3-超级用户"><a href="#9-1-3-超级用户" class="headerlink" title="9.1.3 超级用户"></a>9.1.3 超级用户</h4><h5 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h5><p>在 Linux 系统中, <code>root</code> 账号通常<strong>用于系统的维护和管理</strong>, 对操作系统中的所有资源<strong>具有所有权限</strong>。</p><p>在大多数版本的 Linux 中都不推荐<strong>直接使用 root 账号登录系统</strong>, 避免因权限过大对系统造成破坏。</p><p>在 Linux 系统的安装过程中, 系统会要求我们创建一个标准的用户账号, 推荐我们使用<strong>标准用户账号</strong>进行登录。</p><h5 id="2-sudo-命令"><a href="#2-sudo-命令" class="headerlink" title="2. sudo 命令"></a>2. sudo 命令</h5><p><code>sudo</code> 命令用于使用其他用户身份执行命令, 预设的用户身份为 <code>root</code> 用户。</p><p><code>su</code> 是 <code>substitute user</code> 的缩写，表示 <strong>使用另一个用户的身份</strong>。</p><p>普通用户使用 <code>sudo</code> 命令时, 必须先输入当前用户的系统登录密码, 之后有 <strong>5 分钟的有效期限</strong>, 超过期限必须重新输入密码。</p><h4 id="9-1-4-切换用户"><a href="#9-1-4-切换用户" class="headerlink" title="9.1.4 切换用户"></a>9.1.4 切换用户</h4><table><thead><tr><th>命令</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>su - 用户名</td><td>切换用户, 并且切换至该用户的家目录</td><td>- 可以切换到用户家目录, 否则保持位置不变</td></tr><tr><td>exit</td><td>退出当前登录账户</td><td></td></tr></tbody></table><p><code>su</code> 命令不传递用户名, 默认是 <code>root</code>。</p><img src="/medias/linuximg/images/35.png" align="left" width="45%" style="margin:10px 0;"><p>如果当前用户是超级管理员, 切换到普通用户不需要输入密码。</p><p>从一个普通用户切换到另一个普通用户, 需要输入密码。</p><p>临时切换到另外一个账号执行一条命令，命令执行完成后立即切换回当前账号。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># -c commandsu root -c ls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="9-2-组管理"><a href="#9-2-组管理" class="headerlink" title="9.2 组管理"></a>9.2 组管理</h3><p>为了方便为用户授权, <strong>用户组</strong> 的概念应用而生，如下图所示:</p><img src="/medias/linuximg/images/34.png" align="left" width="30%"><p>在实际应用中, 可以预先针对 <strong>用户组</strong> 设置权限，然后 <strong>将不同的用户添加到对应的组中</strong>, 从而<strong>不用依次为每一个用户设置权限</strong>。</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>groupadd 组名</td><td>添加组</td></tr><tr><td>groupdel 组名</td><td>删除组</td></tr><tr><td>cat /etc/group</td><td>查看组信息</td></tr></tbody></table><p><strong>创建组</strong> / <strong>删除组</strong> 的终端命令都需要通过 <code>sudo</code> 命令执行。</p><h3 id="9-3-用户组管理"><a href="#9-3-用户组管理" class="headerlink" title="9.3 用户组管理"></a>9.3 用户组管理</h3><h4 id="9-3-1-主组-附加组"><a href="#9-3-1-主组-附加组" class="headerlink" title="9.3.1 主组/附加组"></a>9.3.1 主组/附加组</h4><h5 id="1-主组"><a href="#1-主组" class="headerlink" title="1. 主组"></a>1. 主组</h5><p>主组是用户登录系统时所使用的组, 用户有且只能有一个主组。</p><p>在创建新用户时, 若未明确指定该用户所属的主组, 系统会默认创建一个与用户名相同的组作为该用户的主组。</p><p>在创建文件时, 该文件的所属者就是当前用户, 该文件的所属组就是当前用户的主组。</p><p>用户被删除时他的主组若没有其他用户, 系统会自动删除该组。</p><p>主组信息可以通过 <code>/etc/passwd</code> 文件的第4列中查看。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 修改用户的主组usermod -g 组名 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-附加组"><a href="#2-附加组" class="headerlink" title="2. 附加组"></a>2. 附加组</h5><p>在 Linux 系统中, 一个用户可以所属多个组, 除主组外, 其他组都属于该用户的附加组。</p><p>Linux 系统通过给用户添加附加组的方式为用户附加其他权限。</p><p>用户被删除时所属加属组不会受影响。</p><p>附加组信息可以通过 <code>/etc/group</code> 文件中的最后一列中查看。</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 将zhangsan用户添加到design组gpasswd -a zhangsan design<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-查看用户所属组"><a href="#3-查看用户所属组" class="headerlink" title="3. 查看用户所属组"></a>3. 查看用户所属组</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看用户所属组</span><span class="token function">groups</span> zhangsan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置了用户的附加组之后, 该用户需要重新登录才能生效。</p><p>默认使用 <code>useradd</code> 添加的用户是不能通过 <code>sudo</code> 命令以管理员身份执行命令的, 因为该用户还没有被添加到管理员组(sudo组)中。</p><h5 id="4-将用户从组中删除"><a href="#4-将用户从组中删除" class="headerlink" title="4. 将用户从组中删除"></a>4. 将用户从组中删除</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将张三从sudo组中移除</span>gpasswd -d zhangsan <span class="token function">sudo</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="9-3-2-shell"><a href="#9-3-2-shell" class="headerlink" title="9.3.2 shell"></a>9.3.2 shell</h4><h5 id="1-什么是-shell"><a href="#1-什么是-shell" class="headerlink" title="1. 什么是 shell"></a>1. 什么是 shell</h5><p>shell 叫做命令解释器, 俗称终端, 它的作用是将用户指令翻译为计算机能够识别的语言, 并将指令执行的结果返回给用户。</p><p>在 linux 系统中存在多种版本的命令解释器, 就像在 windows 操作系统中既存在 <code>cmd</code>, 也存在 <code>powershell</code> 一样, 在 linux 系统中可以通过 <code>/etc/shells</code> 进行查看当前系统中有哪些命令解释器。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/shells<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以通过以下命令查看当前登录用户所使用的命令解释器是什么。</p><pre class="line-numbers language-basnh" data-language="basnh"><code class="language-basnh">echo $SHELL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以通过 <code>/etc/passwd</code> 文件查看当前用户所使用的命令解释器是什么。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /bin/bash</span><span class="token function">cat</span> /etc/passwd <span class="token operator">|</span> <span class="token function">grep</span> mongoose<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /bin/sh</span><span class="token function">cat</span> /ect/passwd <span class="token operator">|</span> <span class="token function">grep</span> zhangsan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="2-更改用户-shell"><a href="#2-更改用户-shell" class="headerlink" title="2. 更改用户 shell"></a>2. 更改用户 shell</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改用户登录 Shell</span><span class="token function">usermod</span> -s /bin/bash zhangsan<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="9-4-权限管理"><a href="#9-4-权限管理" class="headerlink" title="9.4 权限管理"></a>9.4 权限管理</h3><h4 id="9-4-1-概述"><a href="#9-4-1-概述" class="headerlink" title="9.4.1 概述"></a>9.4.1 概述</h4><p>所谓权限管理, 其实就是指对不同的用户, 设置不同的文件访问权限, 包括对文件的读、写、删除等。</p><p>比如非 root 用户, 他们只有在自己的家目录下才具有写权限, 而在家目录之外, 只具有访问和读权限。</p><table><thead><tr><th align="center">权限</th><th align="center">英文</th><th align="center">缩写</th><th align="center">数字代号</th></tr></thead><tbody><tr><td align="center">可读</td><td align="center">read</td><td align="center">r</td><td align="center">4</td></tr><tr><td align="center">可写</td><td align="center">write</td><td align="center">w</td><td align="center">2</td></tr><tr><td align="center">可执行</td><td align="center">excute</td><td align="center">x</td><td align="center">1</td></tr></tbody></table><p><code>ls -l</code> 可以查看文件夹下文件的详细信息，从左到右依次是：</p><ul><li><strong>权限</strong>: 第 1 个字符如果是 <code>d</code> 表示目录</li><li><strong>硬链接数</strong>: 通俗地讲，就是有多少种方式可以访问到当前目录或者文件</li><li><strong>拥有者</strong>: 家目录下文件或者目录的拥有者通常都是当前用户</li><li><strong>用户组</strong>: 当前文件或目录的拥有者的所属组</li><li><strong>大小</strong></li><li><strong>时间</strong></li><li><strong>名称</strong></li></ul><p>硬连接数实验: 在当前用户的桌面文件夹下新建 test.txt 文本文件, 新建 test 文件夹, 分别查看它们的硬链接数。</p><p>通过查看我们发现, 文本文件的硬链接数是1, 文件夹的硬连接数是2, 为什么?</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 文本文件cat /home/mongoose/桌面/test.txt# 文件夹的第一种访问方式cd /home/mongoose/桌面/test# 文件夹的第二种访问方式, 前提是当前已经在目标文件夹中cd .<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 test 文件夹下新建文件夹 a 和 b, 再次查看 test 文件夹的硬链接数。</p><p>通过查看我们发现, test 文件夹的硬链接数变成了4, 为什么?</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 文件夹的第三种方式方式, 前提是当前的工作目录是 acd ../# 文件夹的第四种方式方式, 前提是当前的工作目录是 bcd ../<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-4-2-修改权限"><a href="#9-4-2-修改权限" class="headerlink" title="9.4.2 修改权限"></a>9.4.2 修改权限</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>chown</td><td>修改所属者</td></tr><tr><td>chgrp</td><td>修改所属组</td></tr><tr><td>chmod</td><td>修改权限</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改文件|目录的拥有者</span><span class="token function">chown</span> 用户名 文件<span class="token operator">|</span>目录<span class="token comment"># 递归修改文件|目录的组</span><span class="token function">chgrp</span> -R 组名 文件<span class="token operator">|</span>目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>chmod</code> 命令可以修改 用户/组/其他人, 对文件/目录的权限。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 修改文件权限, 使用三个数字分别对应 拥有者/组/其他 用户的权限</span><span class="token function">chmod</span> <span class="token number">755</span> 文件<span class="token comment"># 递归修改</span><span class="token function">chmod</span> -R <span class="token number">755</span> 目录<span class="token comment"># 为文件或文件夹的所属者增加或减少权限</span><span class="token function">chmod</span> u+/-rwx 文件名<span class="token operator">|</span>目录名<span class="token comment"># 为文件或文件夹的所属组增加或减少权限</span><span class="token function">chmod</span> g+/-rwx 文件名<span class="token operator">|</span>目录名<span class="token comment"># 为文件或文件夹的其他人增加或减少权限</span><span class="token function">chmod</span> o+/-rwx 文件名<span class="token operator">|</span>目录名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看文件并返回文件的绝对路径</span><span class="token function">which</span> node<span class="token comment"># 执行 test.js 文件</span>./test.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在命令行中执行test.js 文件时系统并不知道使用什么程序执行它, 可以在文件顶部通过以下命令指定运行文件的程序</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/node</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/medias/linuximg/images/36.png" align="left"><p>常见数字组合有（<code>u</code>表示用户／<code>g</code>表示组／<code>o</code>表示其他）：</p><p><code>777</code> ===&gt; <code>u=rwx,g=rwx,o=rwx</code> </p><p><code>755</code> ===&gt; <code>u=rwx,g=rx,o=rx</code></p><p><code>644</code> ===&gt; <code>u=rw,g=r,o=r</code></p><p>目标: </p><ol><li>将 <code>01.js</code> 的权限修改为 <code>u=rwx,g=rx,o=r</code> </li><li>将 <code>123.txt</code> 的权限修改为 <code>u=rw,g=r,o=-</code> </li><li>将 <code>test</code> 目录以及目录下的 <strong>所有</strong> 文件权限修改为 <code>u=rwx,g=rwx,o=rx</code> </li></ol><h2 id="10-系统信息"><a href="#10-系统信息" class="headerlink" title="10. 系统信息"></a>10. 系统信息</h2><h3 id="10-1-日期和时间"><a href="#10-1-日期和时间" class="headerlink" title="10.1 日期和时间"></a>10.1 日期和时间</h3><table><thead><tr><th>命令</th><th>作用</th><th></th></tr></thead><tbody><tr><td>timedatectl</td><td>查看时间</td><td>UTC(世界标准时间) CST(中国标准时间) 在时区划分上属东八区 RTC(硬件时钟)</td></tr></tbody></table><p>RTC in local TZ: no表示硬件时钟设置为世界标准时间, yes表示硬件时钟设置为本地时间</p><p>System clock synchronized: 如果和远程NTP服务器成功同步, 显示为yes</p><p>NTP service: 是否开启时间同步服务, active 表示同步时间, inactive 表示不与服务器同步时间</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># 开启 ntp 服务器同步时间timedatectl set-ntp true# 关闭 ntp 服务器同步时间timedatectl set-ntp false# 设置时间, 设置时间的前提是关闭 ntp 服务imedatectl set-time "2030-05-20 12:45:24"# 查看所有可用时区timedatectl list-timezones# 设置时区timedatectl set-timezone "Asia/Shanghai"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>date</td><td>查看系统时间</td></tr><tr><td>cal</td><td><code>calendar</code> 查看本月日历，<code>-y</code> 选项可以查看一年的日历</td></tr></tbody></table><h3 id="10-2-进程信息"><a href="#10-2-进程信息" class="headerlink" title="10.2 进程信息"></a>10.2 进程信息</h3><p>所谓 <strong>进程</strong>, 通俗地说就是 <strong>当前正在执行的一个程序</strong>。</p><h4 id="10-3-1-ps"><a href="#10-3-1-ps" class="headerlink" title="10.3.1 ps"></a>10.3.1 ps</h4><p>查看进程信息, ps 是 process status 的简写。</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>a</td><td>显示通过终端启动的所有进程, 包括其他用户启动的进程</td></tr><tr><td>u</td><td>显示进程的详细信息</td></tr><tr><td>x</td><td>显示没有通过终端命令启动的进程</td></tr></tbody></table><h4 id="10-3-2-top"><a href="#10-3-2-top" class="headerlink" title="10.3.2 top"></a>10.3.2 top</h4><p>实时显示运行中的进程信息并且排序。</p><p>要退出 <code>top</code> 命令需要输入 <code>q</code>。</p><h4 id="10-3-3-kill"><a href="#10-3-3-kill" class="headerlink" title="10.3.3 kill"></a>10.3.3 kill</h4><p>终止指定代号的进程，<code>-9</code> 表示强行终止。</p><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>-9</td><td>表示强行终止</td></tr></tbody></table><p>使用 <code>kill</code> 命令时, 最好只终止由当前用户开启的进程, 不要终止由 <code>root</code> 用户开启的进程, 否则可能导致系统崩溃。</p><h2 id="11-其他命令"><a href="#11-其他命令" class="headerlink" title="11. 其他命令"></a>11. 其他命令</h2><h3 id="11-1-查找文件-find"><a href="#11-1-查找文件-find" class="headerlink" title="11.1 查找文件 find"></a>11.1 查找文件 find</h3><p>find 命令用来在 <strong>特定的目录下搜索</strong> 符合条件的文件。</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>find [路径] -name “*.txt”</td><td>查找指定路径下扩展名是 <code>.txt</code> 的文件, 包括子目录</td></tr></tbody></table><p>如果省略路径, 表示在当前文件夹下查找。</p><h3 id="11-2-链接-ln"><a href="#11-2-链接-ln" class="headerlink" title="11.2 链接 ln"></a>11.2 链接 ln</h3><h4 id="11-2-1-软链接"><a href="#11-2-1-软链接" class="headerlink" title="11.2.1 软链接"></a>11.2.1 软链接</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>ln -s 被链接的源文件 链接文件</td><td>建立文件的软链接, 类似于Windows下的快捷方式</td></tr></tbody></table><ol><li><p>在桌面文件夹下创建a.js, 在当前位置创建该文件的软链接b.js(源文件路径采用相对路径)</p></li><li><p>将 a.js 文件移动到下载文件夹下, 查看 b.js 软链接是否可用</p></li><li><p>将 a.js 重新移动回桌面文件夹, 在当前位置创建该文件的软件界b.js(源文件路径采用绝对路径)</p></li><li><p>将 a.js 文件移动到下载文件夹下, 查看 b.js 软链接是否可用</p></li><li><p>删除 a.js 文件, 查看 b.js软链接是否可用</p></li></ol><p>结论一: 被链接的源文件要使用绝对路径, 当软链接的位置发生变化后,  软链接仍然能够正常使用。</p><p>结论二: 当源文件被删除后, 软链接失效。</p><h4 id="11-2-2-硬链接"><a href="#11-2-2-硬链接" class="headerlink" title="11.2.2 硬链接"></a>11.2.2 硬链接</h4><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>ln 被链接的源文件 链接文件</td><td>建立文件的硬链接</td></tr></tbody></table><ol><li>在桌面文件夹下创建a.js, 在当前位置创建该文件的硬链接b.js(源文件路径既可以是相对路径也可以是绝对路径)</li><li>将 a.js 移动到下载文件夹中, 查看 b.js 硬链接是否可用</li><li>删除 a.js, 查看 b.js 硬链接是否可用</li></ol><p>结论一: 被链接的源文件移动位置后, 硬链接仍然有效。</p><p>结论二: 当源文件被删除后, 硬链接依然有效，因为删除的并不是真的源文件，原因入下图。</p><p>在 Linux 系统中, 文件名和文件数据是分开存储的。</p><img src="/medias/linuximg/images/37.png" align="left" width="75%"><h3 id="11-3-打包解包-tar"><a href="#11-3-打包解包-tar" class="headerlink" title="11.3 打包解包 tar"></a>11.3 打包解包 tar</h3><p><code>tar</code> 是 Linux 系统中最常用的备份工具, 它可以把一系列文件归档(打包)到一个文件中, 也可以把一个归档文件恢复成一系列文件。</p><p>使用 tar 命令归档的文件, 文件后缀名为 <code>.tar</code>。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 打包文件</span><span class="token function">tar</span> -cvf 归档文件名称.tar 被归档的文件列表<span class="token punctuation">..</span>.<span class="token comment"># 解包文件</span><span class="token function">tar</span> -xvf 归档文件名称.tar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>c</td><td>create, 创建归档文件</td></tr><tr><td>v</td><td>verbose, 详细的列出归档了哪些文件</td></tr><tr><td>f</td><td>file, 指定归档文件名称, f 选项后面一定是 .tar 文件名称，所以该选项必须放在最后</td></tr><tr><td>x</td><td>extract,  从归档中解出文件 (解包)</td></tr></tbody></table><p>练习目标:</p><ol><li>在桌面文件夹下新建三个空白文件 <code>01.js</code>、<code>02.js</code>、<code>03.js</code></li><li>将这三个文件归档打成 <code>javascript.tar</code> 包</li><li>新建 <code>tar</code> 目录，并且将 <code>javascript.tar</code> 包移动到 <code>tar</code> 目录下</li><li>解包 <code>javascript.tar</code></li></ol><h3 id="11-4-压缩解压缩"><a href="#11-4-压缩解压缩" class="headerlink" title="11.4 压缩解压缩"></a>11.4 压缩解压缩</h3><h4 id="11-4-1-gzip"><a href="#11-4-1-gzip" class="headerlink" title="11.4.1 gzip"></a>11.4.1 gzip</h4><p><code>gzip</code> 是 Linux 系统中用来对文件进行压缩和解压缩的命令, 通过此命令压缩得到的新文件, 其扩展名通常标记为“.gz”。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 压缩</span><span class="token function">gzip</span> 被压缩文件名称<span class="token comment"># 解压缩</span><span class="token function">gzip</span> -d 被压缩文件名称.gz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>gzip</code> 命令只能压缩文件不能打包文件, 比如将多个文件作为参数, 命令的执行结果就是分别对多个文件进行压缩产生多个文件的压缩结果。</p><p>在 <code>tar</code> 命令中有一个选项 <strong>-z</strong> 可以调用 <code>gzip</code> 命令, 从而可以方便的实现先打包再压缩的或者先解压缩再解包的过程。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 压缩文件</span><span class="token function">tar</span> -zcvf 打包文件名称.tar.gz 被压缩的文件列表<span class="token comment"># 解压缩文件</span><span class="token function">tar</span> -zxvf 打包文件名称.tar.gz<span class="token comment"># 解压缩到指定目录</span><span class="token function">tar</span> -zxvf 打包文件名称.tar.gz -C 目标目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="11-4-2-bzip2"><a href="#11-4-2-bzip2" class="headerlink" title="11.4.2 bzip2"></a>11.4.2 bzip2</h4><p><code>bzip2</code> 也是 Linux 系统中经常用来对文件进行压缩和解压缩的命令, 通过此命令压缩得到的新文件, 其扩展名通常标记为“.bz2”。</p><p><code>bzip2</code> 与 <code>gzip</code> 相比, 其压缩稳定性和效果都更好。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 压缩</span><span class="token function">bzip2</span> 被压缩文件名称<span class="token comment"># 解压缩</span><span class="token function">bzip2</span> -d 被压缩文件名称.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 <code>tar</code> 命令中有一个选项 <strong>-j</strong> 可以调用 <code>bzip2</code> 命令, 从而可以方便的实现先打包再压缩的或者先解压缩再解包的过程。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 压缩文件</span><span class="token function">tar</span> -jcvf 打包文件名称.tar.bz2 被压缩的文件列表<span class="token comment"># 解压缩文件</span><span class="token function">tar</span> -jxvf 打包文件名称.tar.bz2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-5-软件包管理"><a href="#11-5-软件包管理" class="headerlink" title="11.5 软件包管理"></a>11.5 软件包管理</h3><h4 id="11-5-1-apt"><a href="#11-5-1-apt" class="headerlink" title="11.5.1 apt"></a>11.5.1 apt</h4><h5 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h5><p>apt(Advanced Packaging Tool), 是 Linux 下的一款软件包管理工具, 提供了查找、安装、升级、删除软件包的命令。</p><p>apt 命令执行需要超级管理员权限(root)。</p><table><thead><tr><th>含义</th><th>命令</th></tr></thead><tbody><tr><td>下载安装软件包</td><td>sudo apt install <package_name></package_name></td></tr><tr><td>删除软件包</td><td>sudo apt remove –auto-remove <package_name></package_name></td></tr><tr><td>更新本地软件包数据库, 输出可以更新的软件包数量</td><td>sudo apt update</td></tr><tr><td>列出可更新的软件包</td><td>apt list –upgradeable</td></tr><tr><td>更新所有软件包</td><td>sudo apt upgrade</td></tr></tbody></table><p>大多数 Linux 都使用本地数据库来存储远程可用的包仓库列表, 所以在安装或升级包之前最好更新一下这个数据库。</p><p>sl: 蒸汽汽车动画。</p><p>htop: 查看进行信息。</p><h5 id="2-配置软件源"><a href="#2-配置软件源" class="headerlink" title="2. 配置软件源"></a>2. 配置软件源</h5><p>软件源指的是存储软件包的服务器, Ubuntu 官方提供的软件源服务器在国外, 访问速度比较慢。</p><p>我们可以将软件源改为国内的服务器, 以此来提升软件包的下载速度。</p><img src="/medias/linuximg/images/38.png" align="left" width="80%"><h4 id="11-5-2-dpkg"><a href="#11-5-2-dpkg" class="headerlink" title="11.5.2 dpkg"></a>11.5.2 dpkg</h4><p>dpkg 命令的英文全称是 <code>Debian package</code>, 是 Debian Linux 系统用来安装、创建和管理软件包的实用工具。</p><p>dpkg 命令主要是用来安装已经下载到本地的 deb 软件包，或者对已经安装好的软件进行管理。</p><p>apt-get 命令是直接从远程的软件仓库里下载安装软件。</p><table><thead><tr><th>含义</th><th>命令</th></tr></thead><tbody><tr><td>安装 deb 软件包</td><td>dpkg -i <package_name></package_name></td></tr><tr><td>删除 deb 软件包</td><td>dpkg -r <package_name></package_name></td></tr><tr><td>显示已安装软件包列表</td><td>dpkg -l</td></tr></tbody></table><p>使用 dpkg 命令安装百度云。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 安装软件包</span>dpkg -i 软件包名称<span class="token comment"># 在软件包列表中查找要删除的软件包名称</span>dpkg -l <span class="token operator">|</span> <span class="token function">grep</span> 软件包名称<span class="token comment"># 卸载软件包</span>dpkg -r 软件包名称<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-Vim"><a href="#12-Vim" class="headerlink" title="12. Vim"></a>12. Vim</h2><h3 id="12-1-概述"><a href="#12-1-概述" class="headerlink" title="12.1 概述"></a>12.1 概述</h3><p>vim 是 Linux 系统中的一款文本编辑器, 它具有程序编辑能力, 在程序员中被广泛使用。</p><p>下载安装vim: <code>sudo apt install vim</code>。</p><img src="assets/images/40.png" align="left" width="50%"><p>一般模式: 一般模式一般用于浏览文件内容, 也包括一些复制、粘贴、删除等操作。</p><p>插入模式: 在一般模式下键入 <code>i/a/o</code> 键进入插入模式, 在该模式下可以通过键盘输入内容, 内容输入完成后通过 <code>esc</code> 退回一般模式。</p><p>底行模式: 在一般模式下通过 <code>shift + :</code> 进入底行模式, 在底行模式下可以执行一些 VIM 提供的指令, 比如文件操作, 调用功能等等。</p><p>打开或新建文件: <code>vim filename</code></p><h3 id="12-2-插入模式"><a href="#12-2-插入模式" class="headerlink" title="12.2 插入模式"></a>12.2 插入模式</h3><p>在一般模式中使用可以使用下列命令进行插入模式。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>i</td><td>在光标前插入</td></tr><tr><td>shift + i</td><td>在光标所在行的最前面插入</td></tr><tr><td>a</td><td>在光标后插入</td></tr><tr><td>shift + a</td><td>在光标所在行的最后面插入</td></tr><tr><td>o</td><td>在光标所在行的下一行插入新行</td></tr><tr><td>shift + o</td><td>在光标所在行的上一行插入新行</td></tr></tbody></table><h3 id="12-3-复制粘贴"><a href="#12-3-复制粘贴" class="headerlink" title="12.3 复制粘贴"></a>12.3 复制粘贴</h3><p>在一般模式中可以使用下列命令执行复制粘贴操作。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>yy</td><td>复制单行, 将光标移至目标行, 键入yy</td></tr><tr><td>nyy</td><td>复制多行, 将光标移至起始行, 假设复制两行, 键入2yy</td></tr><tr><td>p</td><td>粘贴, 将光标移至目标行的上一行, 键入p, 在该行的下一行进行粘贴</td></tr></tbody></table><p>在底行模式下可以使用下列命令执行复制粘贴操作。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>n,m co x</td><td>拷贝指定行, 拷贝n至m行, 在x行后面粘贴</td></tr><tr><td>n,m m x</td><td>移动指定行, 移动n至m行, 移动到x行后面</td></tr></tbody></table><h3 id="12-4-定位"><a href="#12-4-定位" class="headerlink" title="12.4 定位"></a>12.4 定位</h3><p>在底行模式中, 可以通过以下命令对内容进行定位。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>set nu</td><td>显示行号</td></tr><tr><td>set nonu</td><td>取消行号</td></tr><tr><td>120</td><td>将光标定位到120行</td></tr></tbody></table><p>在一般模式下, 可以通过以下命令对内容进行定位。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>gg</td><td>定位到文本的第一行</td></tr><tr><td>shift + g</td><td>定位到文本的最后一行</td></tr></tbody></table><h3 id="12-5-删除"><a href="#12-5-删除" class="headerlink" title="12.5 删除"></a>12.5 删除</h3><p>在一般模式下, 可以通过以下命令对内容进行删除。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>dd</td><td>删除一行, 删除光标所在行</td></tr><tr><td>ndd</td><td>删除多行, 从光标所在行开始删除n行</td></tr><tr><td>shift + d</td><td>删除光标所在处至行尾的内容</td></tr></tbody></table><h3 id="12-6-撤销和替换"><a href="#12-6-撤销和替换" class="headerlink" title="12.6 撤销和替换"></a>12.6 撤销和替换</h3><p>在一般模式下可以通过以下命令执行撤销和替换操作。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>u</td><td>撤销上一步操作</td></tr><tr><td>ctrl + r</td><td>恢复上一步撤销的操作 (mac 系统不要使用外接非mac键盘, 可能出问题)</td></tr><tr><td>r</td><td>替换光标所在处的字符</td></tr><tr><td>shift + r</td><td>从光标所在处开始替换字符, 替换结束后按 ESC 退出</td></tr></tbody></table><h3 id="12-7-退出编辑"><a href="#12-7-退出编辑" class="headerlink" title="12.7 退出编辑"></a>12.7 退出编辑</h3><p>在底行模式下, 可以使用以下命令进行执行保存和退出操作。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>q</td><td>没有任何修改时, 使用 q 退出 vim 编辑器</td></tr><tr><td>q!</td><td>强制退出 vim 编辑器, 不保存内容</td></tr><tr><td>w</td><td>保存不退出</td></tr><tr><td>wq</td><td>保存退出</td></tr></tbody></table><h3 id="12-8-交换文件"><a href="#12-8-交换文件" class="headerlink" title="12.8 交换文件"></a>12.8 交换文件</h3><p>当 vim 编辑器以非正常方式退出时, 编辑器会自动生成交换文件, 它用于保存文件由于非正常退出时用户来不及保存的内容。 </p><p>交换文件名称以<code>"点"</code>开头, 后面是<code>源文件名称</code>, 最后以 <code>.swp</code> 后缀结尾, 比如源文件名称是 <code>demo.js</code>, 交换文件名称就是 <code>.demo.js.swp</code>。</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>以只读方式打开(O)</td><td>查看内容, 不包含非正常退出前的最新内容</td></tr><tr><td>直接编辑(E)</td><td>编辑内容, 不包含非正常退出前的最新内容</td></tr><tr><td>恢复(R)</td><td>恢复非正常退出时的最新内容</td></tr><tr><td>退出(Q)</td><td>不做任何事情, 直接退出</td></tr><tr><td>删除交换文件(D)</td><td>交换文件被删除后, 非正常退出时的最新内容不会被恢复</td></tr></tbody></table><p>注意: 交换文件使用完成后, 通过删除它避免重复看到交换文件已存在的提示内容。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React</title>
      <link href="/2022/08/24/react/"/>
      <url>/2022/08/24/react/</url>
      
        <content type="html"><![CDATA[<h1 id="React-终极课程"><a href="#React-终极课程" class="headerlink" title="React 终极课程"></a>React 终极课程</h1><h2 id="1-React-极速入门"><a href="#1-React-极速入门" class="headerlink" title="1. React 极速入门"></a>1. React 极速入门</h2><h3 id="1-1-React-概述"><a href="#1-1-React-概述" class="headerlink" title="1.1 React 概述"></a>1.1 React 概述</h3><h4 id="1-1-1-React-是什么"><a href="#1-1-1-React-是什么" class="headerlink" title="1.1.1 React 是什么"></a>1.1.1 React 是什么</h4><blockquote><p>A JavaScript library for building user interfaces</p><p>一个用于构建用户界面的 JavaScript 库</p></blockquote><p>React 是一个开源的 JavaScript 库，用于构建 web 应用中的视图层，实际上就是 web 应用中的前端用户界面。</p><img src="/medias/assets/images/01.jpeg" align="left" width="70%"><p>使用 React 构建的客户端 web 应用可以快速响应用户操作，使 web 应用的使用体验近乎于移动 App。</p><p>React 允许开发人员将用户界面代码和逻辑代码进行完美融合，以更加灵活的方式创建用户界面。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import React from "react"function Welcome(props) {  return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;  return React.createELement('h1', null , 'hello')}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>了解：React 除了可以构建运行在浏览器中的 web 应用以外，还可以构建在移动端运行的原生 App 应用。</p><h4 id="1-1-2-它的背景与生态"><a href="#1-1-2-它的背景与生态" class="headerlink" title="1.1.2 它的背景与生态"></a>1.1.2 它的背景与生态</h4><p>它是由 Facebook 的软件工程师在 2012 年创建，于 2013 年 5 月开源，目前由 Facebook 以及个人开发人员和公司组成的社区维护。</p><p>React 生态圈异常活跃，在构建客户端 web 应用的过程中你遇到的问题几乎都可以在社区中找到答案。</p><table><thead><tr><th><a href="https://redux.js.org/">Redux</a></th><th><a href="https://mobx.js.org/README.html">MobX</a></th><th><a href="https://recoiljs.org/">Recoil</a></th><th><a href="https://formik.org/">Formik</a></th><th><a href="https://react-table.tanstack.com/">React Table</a></th></tr></thead><tbody><tr><td><a href="https://nextjs.org/">Next.js</a></td><td><a href="https://www.gatsbyjs.com/">Gatsby</a></td><td><a href="https://react-query.tanstack.com/">React Query</a></td><td><a href="https://swr.vercel.app/zh-CN">SWR</a></td><td><a href="https://reactrouter.com/">React Router</a></td></tr><tr><td><a href="https://react-spring.io/">React Spring</a></td><td><a href="https://styled-components.com/">Styled-Components</a></td><td><a href="https://ant.design/docs/react/introduce-cn">Ant Design</a></td><td><a href="https://mui.com/zh/">Material UI</a></td><td><a href="https://mswjs.io/">MSW</a></td></tr></tbody></table><p><a href="https://reactjs.org/">官方文档</a></p><img src="/medias/assets/images/14.png"><h3 id="1-2-React-初体验"><a href="#1-2-React-初体验" class="headerlink" title="1.2 React 初体验"></a>1.2 React 初体验</h3><h4 id="1-2-1-引包-浏览器环境"><a href="#1-2-1-引包-浏览器环境" class="headerlink" title="1.2.1 引包(浏览器环境)"></a>1.2.1 引包(浏览器环境)</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/react/17.0.2/umd/react.production.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/react-dom/17.0.2/umd/react-dom.production.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>React 可以构建在浏览器中运行的 web 应用，也可以构建在移动端运行的原生应用，React 在构建这两种应用时会有一些通用方法和一些非通用方法，通用方法都被放置在了 <code>react</code> 文件中，非通用方法比如实现 web 应用的方法被放置在了 <code>react-dom</code> 中，实现移动端应用的方法被放置在了 <code>react-native-web</code> 文件中。</p><p>react：核心库，包含了构建 web 应用和构建移动端应用的通用方法。</p><p>react-dom：只包含了构建 web 应用的方法。</p><p>react-native-web：只包含构建移动端应用的方法。</p><h4 id="1-2-2-createElement"><a href="#1-2-2-createElement" class="headerlink" title="1.2.2 createElement"></a>1.2.2 createElement</h4><p>引入 <code>react</code> 后，window 对象下会多出一个 <code>React</code> 的对象，对象下面的 <code>createElement</code> 方法用于创建元素。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// type: 标签名称, 字符串.// props: 元素属性, 对象, 无属性填入 null// children: 子元素, 普通文本或 createElement 方法返回的元素对象// 返回值: 元素对象 (虚拟 DOM 对象) React.createElement(type, props, children)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> button <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"button"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> <span class="token string">"button"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"保存"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-3-render"><a href="#1-2-3-render" class="headerlink" title="1.2.3 render"></a>1.2.3 render</h4><p>引入 <code>react-dom</code> 后，window 下会多出一个叫做 <code>ReactDOM</code> 的对象，对象下面的 <code>render</code> 方法用于渲染元素。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// element: 待渲染元素对象, 就是通过 createElement 方法创建的虚拟 DOM 对象</span><span class="token comment">// container: 虚拟 DOM 对象的渲染位置. 真实 DOM 对象.</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">ReactDOM.render(button, document.getElementById("root"))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-2-4-练习"><a href="#1-2-4-练习" class="headerlink" title="1.2.4 练习"></a>1.2.4 练习</h4><p>需求：将指定的 HTML 结构使用 React 提供的方式渲染出来。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>My Blog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>My first blog post<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>This is the content of my post<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> paragraph <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>  <span class="token string">"p"</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> className<span class="token operator">:</span> <span class="token string">"text"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token string">"This is the content of my post"</span><span class="token punctuation">)</span><span class="token keyword">const</span> articleHeader <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>  <span class="token string">"h2"</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">,</span>  <span class="token string">"My first blog post"</span><span class="token punctuation">)</span><span class="token keyword">const</span> article <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>  <span class="token string">"article"</span><span class="token punctuation">,</span>  <span class="token keyword">null</span><span class="token punctuation">,</span>  articleHeader<span class="token punctuation">,</span>  paragraph<span class="token punctuation">)</span><span class="token keyword">const</span> mainHeader <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"h1"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"My Blog"</span><span class="token punctuation">)</span><span class="token keyword">const</span> main <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>  <span class="token string">"main"</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">"main"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  mainHeader<span class="token punctuation">,</span>  article<span class="token punctuation">)</span>ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>main<span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-3-初识-JSX-语法"><a href="#1-3-初识-JSX-语法" class="headerlink" title="1.3 初识 JSX 语法"></a>1.3 初识 JSX 语法</h3><h4 id="1-3-1-已知问题"><a href="#1-3-1-已知问题" class="headerlink" title="1.3.1  已知问题"></a>1.3.1  已知问题</h4><p>由于 React 内部的优化机制所致, 它必须使用 <code>createElement</code> 方法构建用户界面, 但对于开发者来说该方法又确实增加了编写代码的复杂度。</p><p>为了解决以上问题, React 为 <code>createElement</code> 方法创造了替代语法，这种语法和传统的 HTML 语法相似度极高, 这样开发者就可以使用熟悉的语法构建界面了。在应用构建阶段, 再使用 <code>balbel</code> 将这种替代语法转换为 <code>createElement</code> 方法, 这样 React 又可以使用它创建元素了。</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> button <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">button</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">React<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>type<span class="token operator">:</span> <span class="token string">"button"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token string">"button"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3-2-JSX-是什么"><a href="#1-3-2-JSX-是什么" class="headerlink" title="1.3.2 JSX 是什么"></a>1.3.2 JSX 是什么</h4><p>JSX 是 JavaScript 编程语言的语法扩充，是由 Facebook 创建的，用于在 React 中构建用户界面。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const button = &lt;button&gt;保存&lt;/button&gt;ReactDOM.render(button, document.getElementById("root"))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>但是这种语法浏览器是不识别的，所以我们需要借助 Babel 对其进行转换，将其转换为 <code>React.createElement</code> 方法的调用，所以说 JSX 的本质就是 JavaScript。<a href="https://babeljs.io/repl">Babel REPL</a></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/@babel/standalone@7.13.17/babel.min.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-3-3-JSX-语法规则"><a href="#1-3-3-JSX-语法规则" class="headerlink" title="1.3.3 JSX 语法规则"></a>1.3.3 JSX 语法规则</h4><h5 id="1-根标记"><a href="#1-根标记" class="headerlink" title="1. 根标记"></a>1. 根标记</h5><p>在使用 JSX 语法创建元素时，元素的最外层必须要有一个根标记。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 错误写法const jsx = (&lt;p&gt;Hello&lt;/p&gt;  &lt;p&gt;world&lt;/p&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 正确写法const jsx = (&lt;div&gt;  &lt;p&gt;Hello&lt;/p&gt;    &lt;p&gt;world&lt;/p&gt;  &lt;/div&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为避免因为要满足规定而出现无意义标记，React 提供了占位符标记，占位符标记在渲染后不会产生真实 DOM 对象</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 使用占位符标记充当根元素// 避免渲染结果出现无意义标记const jsx = (&lt;React.Fragment&gt;  &lt;p&gt;Hello&lt;/p&gt;    &lt;p&gt;world&lt;/p&gt;  &lt;/React.Fragment&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 占位符标记的简写语法const jsx = (&lt;&gt;  &lt;p&gt;Hello&lt;/p&gt;    &lt;p&gt;world&lt;/p&gt;  &lt;/&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-单标记自闭合"><a href="#2-单标记自闭合" class="headerlink" title="2. 单标记自闭合"></a>2. 单标记自闭合</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;input type="text"/&gt;&lt;img src="" alt="" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="3-属性命名规则"><a href="#3-属性命名规则" class="headerlink" title="3. 属性命名规则"></a>3. 属性命名规则</h5><p>属性名称遵循驼峰式命名法 (小驼峰)</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- HTML 写法 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">readonly</span> <span class="token attr-name">autofoucs</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// JSX 写法&lt;input maxLength="10" readOnly autoFocus /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="4-className-属性"><a href="#4-className-属性" class="headerlink" title="4. className 属性"></a>4. className 属性</h5><p>添加类名使用 className 属性，因为 class 在 JavaScript 中是保留关键字</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;!-- HTML 写法 --&gt;&lt;input class="todos"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// JSX 写法</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>todos<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="5-htmlFor-属性"><a href="#5-htmlFor-属性" class="headerlink" title="5. htmlFor 属性"></a>5. htmlFor 属性</h5><p>label 标记使用 htmlFor 属性，因为 for 在 JavaScript 中是保留关键字</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- HTML 写法 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>This is a test input<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// JSX 写法&lt;label htmlFor="demo"&gt;This is a test input&lt;/label&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="6-JSX-格式美化"><a href="#6-JSX-格式美化" class="headerlink" title="6. JSX 格式美化"></a>6. JSX 格式美化</h5><p>在多个 JSX 标记同时使用时避免不了一定会换行，此时最外层可以加上一组小括号，使标记格式对其避免因格式混乱产生的错误。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const element = (  &lt;&gt;    &lt;div&gt;header&lt;/div&gt;    &lt;div&gt;footer&lt;/div&gt;  &lt;/&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-注释"><a href="#7-注释" class="headerlink" title="7. 注释"></a>7. 注释</h5><p>JSX 中的注释写法为 <code>{/**/}</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const element = (&lt;&gt;  {/* 头部 */}    &lt;div&gt;header&lt;/div&gt;{/* 底部 */}    &lt;div&gt;footer&lt;/div&gt;  &lt;/&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-插值语法"><a href="#8-插值语法" class="headerlink" title="8. 插值语法"></a>8. 插值语法</h5><p>在 JSX 中可以使用插值语法将动态数据插入到指定位置。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 插入文本const someClass = "some-class"const someText = "I am interpolating text"const text_jsx = &lt;p className={someClass}&gt;{someText}&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 执行计算const x = 10const y = 20const paragraph = &lt;p&gt;{x * y}&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 渲染函数返回值function getValue() {  return "some value from getValue function"}const text = &lt;p&gt;{getValue()}&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 插入对象const other = &lt;p style={{width: 200}}&gt;{{name: "李四"}}&lt;/p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="1-4-create-react-app"><a href="#1-4-create-react-app" class="headerlink" title="1.4 create-react-app"></a>1.4 create-react-app</h3><p><code>create-react-app</code> 是 React 官方提供的用于创建 React 应用的脚手架工具。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> create-react-app -gcreate-react-app react-demo<span class="token function">npm</span> init react-app react-demonpx create-react-app react-demo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-组件化开发基础"><a href="#2-组件化开发基础" class="headerlink" title="2. 组件化开发基础"></a>2. 组件化开发基础</h2><h3 id="2-1-组件概述"><a href="#2-1-组件概述" class="headerlink" title="2.1 组件概述"></a>2.1 组件概述</h3><h4 id="2-1-1-什么是组件"><a href="#2-1-1-什么是组件" class="headerlink" title="2.1.1 什么是组件"></a>2.1.1 什么是组件</h4><p>React 中的组件就是页面中的一小块区域，组件内部会包含这块区域中的视图代码、样式代码以及逻辑代码。</p><img src="/medias/assets/images/04.png"><p>React 采用组件化开发的方式构建用户界面。</p><img src="/medias/assets/images/02.png"><h4 id="2-1-2-组件的设计思想"><a href="#2-1-2-组件的设计思想" class="headerlink" title="2.1.2 组件的设计思想"></a>2.1.2 组件的设计思想</h4><p>组件的核心思想之一就是复用, 定义一次, 到处使用。组件用来封装用户界面中的重复区块，复用重复区块。</p><img src="/medias/assets/images/03.png"><p>组件的另外一个核心思想是解耦, 默认情况下每个组件都有自己的作用域, 内部代码在外部不可见, 这意味着组件之间的代码不会发生冲突, 从而避免在传统开发模式中经常出现的改A坏B的问题。</p><img src="/medias/assets/images/05.png"><h4 id="2-1-3-如何创建组件"><a href="#2-1-3-如何创建组件" class="headerlink" title="2.1.3 如何创建组件"></a>2.1.3 如何创建组件</h4><p>在 React 中组件以函数的形式存在，组件最基本的特征就是一个返回视图(JSX)的函数。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 注意：组件名称首字母必须大写。function Paragraph() {  return &lt;p&gt;Hello, React Component&lt;/p&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 React 中，组件以自定义标签的形式进行调用。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">ReactDOM.render(&lt;Paragraph /&gt;, document.getElementById("root"))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">const jsx = (  &lt;&gt;    &lt;Paragraph /&gt;    &lt;Paragraph /&gt;  &lt;/&gt;)ReactDOM.render(jsx, document.getElementById("root"))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>组件和 HTML 一样，都是以树状结构存在的。</p><img src="/medias/assets/images/06.png"><pre class="line-numbers language-react" data-language="react"><code class="language-react">function TextOne() {  return &lt;b&gt;I am a TextOne Component&lt;/b&gt;}function TextTwo () {  return &lt;b&gt;I am a TextTwo Component&lt;/b&gt;}function Paragraph() {  return (    &lt;p&gt;      &lt;TextOne /&gt;      &lt;TextTwo /&gt;    &lt;/p&gt;  )}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-复用组件"><a href="#2-2-复用组件" class="headerlink" title="2.2 复用组件"></a>2.2 复用组件</h3><h4 id="2-2-1-props"><a href="#2-2-1-props" class="headerlink" title="2.2.1 props"></a>2.2.1 props</h4><p>在调用组件时，可以通过为组件标签添加属性的方式向组件内部传递数据，实现差异化组件复用。</p><img src="/medias/assets/images/07.png"><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;Paragraph msg="I am first" /&gt;&lt;Paragraph msg="I am second" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在组件内部，通过组件函数参数接收组件外部传递进来的数据，组件函数的第一个参数是对象类型，存储了所有外部通过属性的方式传递进来的数据。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Paragraph(props) {  return &lt;p&gt;{props.msg}&lt;/p&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>组件的 props 参数可以设置默认值, 这样在调用组件时就可以根据需要向组件内部传递数据, 传递了就使用传递值, 没传递就使用默认值。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Person (props) {  return &lt;div&gt;{props.name}&lt;/div&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">Person.defaultProps = {  name: "张三"}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;Person name="李四"/&gt; // 李四&lt;Person /&gt; // 张三<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>组件的 props 默认值可以防止组件内部代码执行出错。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Person (props) {  return &lt;div&gt;{props.info.name}&lt;/div&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;Person /&gt; // 报错, 因为组件内部代码执行时, 通过 props 获取到的 info 为 undefined, 不能再通过 undefined 获取 name&lt;Person info={{name: "张三"}}/&gt; // 张三<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">Person.defaultProps = {  info: {}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;Person /&gt; // 不会报错, 因为在 JSX 中渲染 undefined 是合法的&lt;Person info={{name: "张三"}}/&gt; // 张三<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-2-2-children"><a href="#2-2-2-children" class="headerlink" title="2.2.2 children"></a>2.2.2 children</h4><p>在调用组件时，可以向组件标签内部添加 JSX，实现差异化组件复用，相比 props, 使用 children 可以向组件内部传递更加复杂的数据。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;Person&gt;  Hello, React Children&lt;/Person&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;Person&gt;  &lt;p&gt;single child&lt;/p&gt;&lt;/Person&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;Person&gt;  &lt;p&gt;multiple childs&lt;/p&gt;  &lt;p&gt;multiple childs&lt;/p&gt;  &lt;p&gt;multiple childs&lt;/p&gt;&lt;/Person&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Person (props) {  return &lt;div&gt;{props.children}&lt;/div&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>children 的其中一个经典应用场景是辅助创建布局组件。布局组件可以增强组件复用能力。</p><img src="/medias/assets/images/03.png"><pre class="line-numbers language-react" data-language="react"><code class="language-react">function HomePage() {  return &lt;div&gt;HomePage&lt;/div&gt;;}function AboutPage() {  return &lt;div&gt;AboutPage&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Header() {  return &lt;div&gt;Header&lt;/div&gt;;}function Footer() {  return &lt;div&gt;Footer&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Layout(props) {  return (    &lt;&gt;      &lt;Header /&gt;      &lt;div&gt;{props.children}&lt;/div&gt;      &lt;Footer /&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">function HomePage() {  return &lt;Layout&gt;HomePage&lt;/Layout&gt;;}function AboutPage() {  return &lt;Layout&gt;AboutPage&lt;/Layout&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-组件模板"><a href="#2-3-组件模板" class="headerlink" title="2.3 组件模板"></a>2.3 组件模板</h3><h4 id="2-3-1-事件程序"><a href="#2-3-1-事件程序" class="headerlink" title="2.3.1 事件程序"></a>2.3.1 事件程序</h4><h5 id="1-添加事件"><a href="#1-添加事件" class="headerlink" title="1. 添加事件"></a>1. 添加事件</h5><p>在 JSX 中，为元素添加事件，事件名称采用驼峰使命名法，事件处理函数通过插值的方式指定。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App () {  const onClickHandler = () =&gt; {    console.log('Hello, Event')    r  }  return &lt;button onClick={onClickHandler}&gt;按钮&lt;/button&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-事件传参"><a href="#2-事件传参" class="headerlink" title="2. 事件传参"></a>2. 事件传参</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App () {  const onClickHandler = (arg1, arg2) =&gt; {}  return &lt;button onClick={() =&gt; onClickHandler('a', 'b')}&gt;按钮&lt;/button&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-事件对象"><a href="#3-事件对象" class="headerlink" title="3. 事件对象"></a>3. 事件对象</h5><p>事件处理函数在没有传递参数的情况下，第一个参数默认就是事件对象。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App () {  const onClickHandler = (event) =&gt; {}  return &lt;button onClick={onClickHandler}&gt;按钮&lt;/button&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在调用事件处理函数时，可以将事件对象作为参数显式传递。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App () {  const onClickHandler = (arg1, event, arg2) =&gt; {}  return &lt;button onClick={(event) =&gt; onClickHandler('a', event, 'b')}&gt;按钮&lt;/button&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-2-条件渲染"><a href="#2-3-2-条件渲染" class="headerlink" title="2.3.2 条件渲染"></a>2.3.2 条件渲染</h4><p>在组件模板中, 根据条件的不同渲染不同的视图元素。</p><h5 id="1-if-条件判断"><a href="#1-if-条件判断" class="headerlink" title="1. if 条件判断"></a>1. if 条件判断</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">function OnMessage() {  return &lt;span&gt;The Machine is On&lt;/span&gt;}function OffMessage() {  return &lt;span&gt;The Machine is Off&lt;/span&gt;}function OnOff() {  if (true) {    return &lt;OnMessage /&gt;  } else {    return &lt;OffMessage /&gt;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Machine() {  const getMessage = () =&gt; {    if (true) {      return &lt;OnMessage /&gt;    } else {      return &lt;OffMessage /&gt;    }  }  return &lt;p&gt;{getMessage()}&lt;/p&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Machine() {  let message = null  if (true) {    message = &lt;OnMessage /&gt;  } else {    message = &lt;OffMessage /&gt;  }  return &lt;p&gt;{message}&lt;/p&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-三元运算符"><a href="#2-三元运算符" class="headerlink" title="2. 三元运算符"></a>2. 三元运算符</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Machine() {  return &lt;p&gt;{true ? &lt;OnMessage /&gt; : &lt;OffMessage /&gt;}&lt;/p&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">const isError = trueconst errorContainer = (  &lt;div className={isError ? "error" : "standard"}&gt;    {isError ? &lt;p&gt;Something went wrong...&lt;/p&gt; : &lt;p&gt;Everythis is ok&lt;/p&gt;}  &lt;/div&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-AND-运算符"><a href="#3-AND-运算符" class="headerlink" title="3. AND 运算符"></a>3. AND 运算符</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">function ErrorMessage() {  return &lt;span&gt;Something went wrong&lt;/span&gt;}function Machine() {  return &lt;p&gt;{true &amp;&amp; &lt;ErrorMessage /&gt;}&lt;/p&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-3-3-列表渲染"><a href="#2-3-3-列表渲染" class="headerlink" title="2.3.3 列表渲染"></a>2.3.3 列表渲染</h4><h5 id="1-数组自动展开"><a href="#1-数组自动展开" class="headerlink" title="1. 数组自动展开"></a>1. 数组自动展开</h5><p>在 JSX 中，可以将数组直接放入插值表达式，数组将会被自动展开，数组中的元素会被直接渲染到该位置。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const data = ["The beach", "The mountains", "Vibrant cities", "Roughing it"]const jsx = &lt;div&gt;{data}&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">const jsxArray = [  &lt;li&gt;list-item-1&lt;/li&gt;,  &lt;li&gt;list-item-2&lt;/li&gt;,  &lt;li&gt;list-item-3&lt;/li&gt;,];const jsx = &lt;ul&gt;{jsxArray}&lt;/ul&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：不能直接将对象数组放置在插值语法中，因为当数组被展开后，JSX 不知道要如何渲染对象。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const data = [  { name: "The beach" },  { name: "The mountains" },  { name: "Vibrant cities" },  { name: "Roughing it" }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-列表渲染-map"><a href="#2-列表渲染-map" class="headerlink" title="2. 列表渲染(map)"></a>2. 列表渲染(map)</h5><p>map 方法用于对列表中的每一项数据进行转换，转换后的结果被存放在一个新的数组中。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">let</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item <span class="token operator">*</span> index<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span> <span class="token comment">// [0, 2, 6, 12]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>map 方法内部会对原始数组进行遍历，在遍历过程中不断调用传递到 map 方法中的回调函数，并将当前遍历的值和索引传递给回调函数，回调函数的返回值会被存储到一个新的数组中，遍历结束后返回新数组。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myMap</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>map 方法在 JSX 中的应用：将数组中的内容渲染到 ul 标签中, 内容使用 li 标签包裹。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">let data = ["Data1", "Data2", "Data3"]let result = (&lt;ul&gt;  {data.map(item =&gt; (      &lt;li&gt;{item}&lt;/li&gt;    ))}  &lt;/ul&gt;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/medias/assets/images/08.png"><h5 id="3-key-属性"><a href="#3-key-属性" class="headerlink" title="3. key 属性"></a>3. key 属性</h5><p>在列表渲染的过程中，React 建议开发者为列表项添加 key 属性，否则在控制台中输出警告。</p><img src="/medias/assets/images/16.png"><p>key 属性用于为列表中的元素提供标识，React 使用该标识识别列表中的哪些元素发生了变化，实现只操作发生更改的元素，以此来提升渲染性能。</p><p>下列代码在没有 key 属性的情况下，当数据发生更新以后，所有元素重新渲染。</p><img src="/medias/assets/images/18.png" align="left" width="50%"><p>下列代码在有 key 属性的情况下，当数据发生更新以后，只有发生变化的元素被重新渲染了，其他元素被复用。</p><img src="/medias/assets/images/19.png" align="left" width="64%"><p>key 属性值的值必须是不重复的，一般使用数据 id 作为 key 属性的值。</p><p>如果列表只在组件初始化的时候渲染一次，后续不发生变化，也可以使用循环索引作为 key 属性的值。</p><img src="/medias/assets/images/17.png" align="left" width="85%"><h5 id="4-列表过滤-filter"><a href="#4-列表过滤-filter" class="headerlink" title="4. 列表过滤(filter)"></a>4. 列表过滤(filter)</h5><p>filter 方法用于对列表元素进行过滤，根据过滤条件将符合的元素存放到一个新的数组中。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"The beach"</span><span class="token punctuation">,</span> topDestination<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"The mountains"</span><span class="token punctuation">,</span> topDestination<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Vibrant cities"</span><span class="token punctuation">,</span> topDestination<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token string">"Roughing it"</span><span class="token punctuation">,</span> topDestination<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> newArray <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>topDestination<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>filter 方法内部会对原始数组进行遍历, 在遍历过程中会不断调用传递给 filter 方法的回调函数, 并且会将当前遍历值和索引传递给回调函数, 如果回调函数返回 true, 将当前遍历值留下, 否则排除当前遍历值。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">myFilter</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> result<span class="token punctuation">}</span><span class="token keyword">const</span> newArray <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">myFilter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>topDestination<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>filter 方法在 JSX 中的应用: 对数据进行过滤然后再通过 map 方法对数据进行转换, 最终渲染数据。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const list = [  { id: 1, name: "The beach", topDestination: true },  { id: 2, name: "The mountains", topDestination: false },  { id: 3, name: "Vibrant cities", topDestination: true },  { id: 4, name: "Roughing it", topDestination: false },];const result = (  &lt;ul&gt;    {list      .filter((item) =&gt; item.topDestination)      .map((item) =&gt; (      &lt;li key={item.id}&gt;{item.name}&lt;/li&gt;    ))}  &lt;/ul&gt;);ReactDOM.render(result, document.getElementById("root"));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-组件状态"><a href="#2-4-组件状态" class="headerlink" title="2.4 组件状态"></a>2.4 组件状态</h3><h4 id="2-4-1-组件状态概述"><a href="#2-4-1-组件状态概述" class="headerlink" title="2.4.1 组件状态概述"></a>2.4.1 组件状态概述</h4><p>在现实世界中，状态通常是指人或事物表现出来的形态。</p><p>由于组件执行的最终结果就是用户界面，所以组件状态指的就是用户界面的状态。</p><img src="/medias/assets/images/20.gif" align="left" width="50%"><p><a href="https://codepen.io/davidkpiano/pen/WZYXKv">Gallery app with Finite State Machines</a></p><img src="/medias/assets/images/21.png" align="left" width="55%"><p>React 遵循数据驱动 DOM 的理念，数据的变化会引起视图的自动更新。</p><p>这里所说的数据其实就是组件状态数据，组件状态数据其实就是组件内部维护的能够驱动视图更新的数据。</p><p>React 将组件看成是状态机，用户与绑定了组件状态数据的视图进行交互，从而产生新的状态，React 再使用新的状态数据渲染新的视图状态。</p><h4 id="2-4-2-钩子函数概述"><a href="#2-4-2-钩子函数概述" class="headerlink" title="2.4.2 钩子函数概述"></a>2.4.2 钩子函数概述</h4><p>React 使用函数作为组件，但是函数自身有重大限制，就是不能持续保存状态，因为函数在执行完成以后内部的局部变量就被释放了。</p><p>但是作为组件，它必须具备保存状态的功能，因为只有状态被保存了，我们才可以基于现有状态计算新状态，使用新的状态更新视图。</p><p>为了对函数组件功能进行增强，React 提供了钩子函数，你想要在函数组件内部使用什么功能，就使用钩子函数将该功能”钩”进函数组件内部。</p><p>所有的钩子都是为函数引入外部功能，所以 React 约定，钩子一律使用 <code>use</code> 前缀命名，便于识别。</p><h4 id="2-4-3-useState"><a href="#2-4-3-useState" class="headerlink" title="2.4.3 useState"></a>2.4.3 useState</h4><p><code>React.useState</code> 方法用于声明组件状态数据，通过该方法声明的状态数据被更改后会触发视图更新。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  // initialState 参数是初始渲染期间使用的状态，在随后的渲染中，它被忽略。  // 返回值是一个数组，从数组中结构出来的第一个值是状态变量，第二个值是更改状态的方法。  const [value, setValue] = React.useState("initialState");    return (    &lt;&gt;      &lt;p&gt;{value}&lt;/p&gt;      &lt;button onClick={() =&gt; setValue("state is changed")}&gt;        更改视图状态      &lt;/button&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>React.useState</code> 方法可以在组件中多次被调用，用于声明多个状态数据。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [value, setValue] = React.useState("initial state value");  const [count, setCount] = React.useState(0);  return (    &lt;&gt;      &lt;p&gt;{value}&lt;/p&gt;      &lt;button onClick={() =&gt; setValue("state is changed")}&gt;        更改视图状态      &lt;/button&gt;      &lt;p&gt;{count}&lt;/p&gt;      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;+1&lt;/button&gt;      &lt;button onClick={() =&gt; setCount(count - 1)}&gt;-1&lt;/button&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改状态的方法可以接收回调函数作为参数，在参数回调函数中返回最新状态，好处是可以将修改状态的逻辑包裹在一起。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [count, setCount] = React.useState(0);  const onClickHandler = () =&gt; {    setCount((currentCount) =&gt; {      return currentCount + 1;    });  }  return &lt;button onClick={onClickHandler}&gt;{value}&lt;/button&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>钩子函数只能在组件内部第一层作用域中调用，不能组件内部的方法中调用，也不能在 if 条件判断中调用。</p><img src="/medias/assets/images/33.png"><h4 id="2-4-4-useEffect"><a href="#2-4-4-useEffect" class="headerlink" title="2.4.4 useEffect"></a>2.4.4 useEffect</h4><h5 id="1-副作用概述"><a href="#1-副作用概述" class="headerlink" title="1. 副作用概述"></a>1. 副作用概述</h5><p>在现实生活中副作用指的就是不良反应，比如吃了过期食品导致的上吐下泻，吃头孢喝酒产生的心力衰竭等都属于副作用。</p><p>组件的职责就围绕 props 和 state 计算用户界面所需要的状态数据，其他的和渲染用户界面逻辑没有关系的操作都属于副作用。</p><p>比如 Ajax Request、手动修改 DOM、localStorage、console.log、setInterval 等。</p><p>副作用本身不是错误代码，但是如果副作用代码在组件中放置的不是最佳位置，可能导致组件的性能变差。</p><h5 id="2-useEffect-方法"><a href="#2-useEffect-方法" class="headerlink" title="2. useEffect 方法"></a>2. useEffect 方法</h5><p>useEffect 方法的作用就是确保将副作用代码在正确的时机被执行，消除不必要的性能消耗。</p><p>在以下代码中，设置网页标题的代码属于副作用代码，该代码放置的不是最佳位置，导致它在不需要执行的时候被执行，导致组件性能变差。同步网页标题的代码只用到了 count，只有 count 状态发生变化以后，同步网页标题的代码才需要被执行，但目前的结果是无论 count 发生变化还是 value 发生变化，同步网页标题的代码都会被执行。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [count, setCount] = React.useState(0);  const [value, setValue] = React.useState(99);  // 以下两句代码都属于副作用代码  document.title = count;  console.log("网页标题同步成功");  return (    &lt;&gt;      &lt;p&gt;{count}&lt;/p&gt;      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;+1&lt;/button&gt;      &lt;button onClick={() =&gt; setValue(value - 1)}&gt;{value}&lt;/button&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 useEffect 方法监听特定状态的变化，从而执行和该状态相关的副作用代码。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [count, setCount] = React.useState(0);  const [value, setValue] = React.useState(99);  // 组件初始渲染后执行, 特定状态发生变化后执行  // 第一个参数是函数类型, 监听的状态发生变化后该回调函数被执行  // 第二个参数是数组类型, 数组中填写的是要监听的状态  React.useEffect(() =&gt; {    document.title = count;    console.log("网页标题同步成功");  }, [count]);  return (    &lt;&gt;      &lt;p&gt;{count}&lt;/p&gt;      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;+1&lt;/button&gt;      &lt;button onClick={() =&gt; setValue(value - 1)}&gt;{value}&lt;/button&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在以下代码中，Ajax 请求代码属于副作用代码，该代码放置的不是最佳位置，导致只要组件状态变化请求就会重新发送，但是我们希望请求只发送一次。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [count, setCount] = React.useState(0);  axios.get("https://api.github.com/users/defunkt").then((response) =&gt; {    console.log(response.data);  });  return &lt;button onClick={() =&gt; setCount(count + 1)}&gt;{count}&lt;/button&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 useEffect 方法设置指定的副作用代码只在组件第一次渲染完成后执行一次。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [count, setCount] = React.useState(0);  React.useEffect(() =&gt; {    axios.get("https://api.github.com/users/defunkt").then((response) =&gt; {      console.log(response.data);    });  }, []);  return &lt;button onClick={() =&gt; setCount(count + 1)}&gt;{count}&lt;/button&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在以下代码中定时器属于副作用代码，虽然定时器只会被开启一次，但是在组件被卸载后定时器仍然在执行。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  React.useEffect(() =&gt; {    setInterval(() =&gt; {      console.log("hello");    }, 1000);  }, []);  return &lt;button onClick={() =&gt;  ReactDOM.unmountComponentAtNode(document.getElementById("root"))}&gt;卸载组件&lt;/button&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 useEffect 方法指定组件卸载前执行的清理函数，用于执行副作用清理操作。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  React.useEffect(() =&gt; {    const timer = setInterval(() =&gt; {      console.log("hello");    }, 1000);    // 该函数在组件卸载前被执行    return () =&gt; clearInterval(timer);  }, []);  return (    &lt;&gt;      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;{count}&lt;/button&gt;      &lt;button onClick={() =&gt;  ReactDOM.unmountComponentAtNode(document.getElementById("root"))}&gt;卸载组件&lt;/button&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-组件通讯"><a href="#2-5-组件通讯" class="headerlink" title="2.5 组件通讯"></a>2.5 组件通讯</h3><h4 id="3-1-1-父子通讯"><a href="#3-1-1-父子通讯" class="headerlink" title="3.1.1 父子通讯"></a>3.1.1 父子通讯</h4><p>在 React 应用中，组件与组件之间传递状态数据采用的是单向数据流架构，这是构建 React 应用必须遵循的状态数据传递规范。</p><p>单向数据流指的是状态数据只能在一个方向上传递，就是从上到下，即从父组件到子组件。状态数据不能反向传递，也不能横传递。</p><img src="/medias/assets/images/24.png" align="left" width="55%"><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [msg, setMsg] = React.useState("Hello React");  // 将 msg 状态数据传递到子组件  return &lt;Message msg={msg} /&gt;;}function Message(props) {  // 接收来自父组件的 msg 状态数据  return &lt;div&gt;{props.msg}&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单向数据流意味着子组件不能直接更新父组件传递下来的状态数据以达到更新视图的目的，事实上 props 参数也是只读的不能被修改。</p><p>在子组件中若想修改父组件传递的下来的状态数据，父组件必须一并将修改状态的方法传递到子组件，子组件通过调用该方法先更新父组件状态，父组件再将状态传递到子组件以触发视图更新。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [msg, setMsg] = React.useState("Hello React");  // 将 msg 状态数据传递到子组件  return &lt;Message msg={msg} setMsg={setMsg} /&gt;;}function Message(props) {  // 接收来自父组件的 msg 状态数据  return (    &lt;&gt;      &lt;p&gt;{props.msg}&lt;/p&gt;      &lt;button onClick={() =&gt; props.setMsg("Hi Data Flow")}&gt;button&lt;/button&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/medias/assets/images/23.png" align="left" width="75%"><p>父组件将初始状态的快照传递给子组件。</p><p>子组件根据当前的 prop 值渲染用户界面。</p><p>用户与用户界面进行交互，例如点击按钮或输入文字。</p><p>用户的操作不会直接更新视图，它会先触发父组件中状态的更新。</p><p>更新之后的状态数据通过 props 向下传递到子组件。</p><p>用户界面被重新渲染以同步当前状态。</p><h4 id="3-1-2-兄弟通讯"><a href="#3-1-2-兄弟通讯" class="headerlink" title="3.1.2 兄弟通讯"></a>3.1.2 兄弟通讯</h4><p>在 React 中若要实现兄弟组件通讯需要借助组件状态提升思想。组件状态提升指的是将兄弟组件之间的共享状态提升到最近的公共父级组件中，由公共父级组件维护这个状态和修改状态的方法，父级组件再通过 props 的方式将状态数据传递到两个子组件中。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [person, setPerson] = React.useState({ name: "张三" });  return (    &lt;&gt;      &lt;Message person={person} /&gt;      &lt;Machine person={person} /&gt;    &lt;/&gt;  );}function Message(props) {  return &lt;p&gt;Message: {props.person.name}&lt;/p&gt;;}function Machine(props) {  return &lt;p&gt;Machine: {props.person.name}&lt;/p&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-13-JSX-扩展运算符"><a href="#3-13-JSX-扩展运算符" class="headerlink" title="3.13 JSX 扩展运算符"></a>3.13 JSX 扩展运算符</h4><p>在 JSX 中可以使用扩展运算符将对象展开，对象展开后将对象中的每个属性直接传入组件。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 以下两种写法是等价的function App() {  const greeting = { sayHello: "Hello", sayHi: "hi" };  return &lt;Message sayHello={greeting.sayHello} sayHi={greeting.sayHi} /&gt;;}function App() {  const greeting = { sayHello: "Hello", sayHi: "hi" };  return &lt;Message {...greeting} /&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 放置数据在传递的过程中增加层级function App() {  const values = { sayHello: "Hello", sayHi: "hi" };  return &lt;Message {...values} /&gt;;}function Message(props) {  return &lt;Button {...props} /&gt;;}function Button(props) {  return &lt;pre&gt;{JSON.stringify(props, null, 2)}&lt;/pre&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// JSX 扩展运算符的另一种使用场景function Button (props) {  const { kind, ...other } = props;  const className = kind === "primary" ? "PrimaryButton" : "SecondaryButton";  return &lt;button className={className} {...other} /&gt;;}function App () {  return (    &lt;div&gt;      &lt;Button kind="primary"&gt;        Hello World!      &lt;/Button&gt;    &lt;/div&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-4-Context"><a href="#3-1-4-Context" class="headerlink" title="3.1.4  Context"></a>3.1.4  Context</h4><h5 id="1-prop-drilling-概述"><a href="#1-prop-drilling-概述" class="headerlink" title="1. prop drilling 概述"></a>1. prop drilling 概述</h5><p>在 React 中，为了让兄弟组件实现状态共享，我们通常会将状态进行提升，提升至它们最近的公共父级，但是当组件层级关系比较复杂时，这种方式并不理想，因为在这个过程中有很多组件并不需要使用该状态，但是却参与了状态的传递。我们通常将这种情况称之为 prop drilling。</p><img src="/medias/assets/images/25.jpeg" align="left" width="60%"><pre class="line-numbers language-react" data-language="react"><code class="language-react">// Application: 应用页面级组件function Application() {  const userName = "John Smith";  return &lt;Layout userName={userName}&gt;Main content&lt;/Layout&gt;;}// Layout: 应用布局组件function Layout({ children, userName }) {  return (    &lt;div&gt;      &lt;Header userName={userName} /&gt;      &lt;main&gt;{children}&lt;/main&gt;    &lt;/div&gt;  );}// Header 头部组件function Header({ userName }) {  return (    &lt;header&gt;      &lt;UserInfo userName={userName} /&gt;    &lt;/header&gt;  );}// UserInfo: 用户信息组件function UserInfo({ userName }) {  return &lt;span&gt;{userName}&lt;/span&gt;;}// 渲染应用级页面组件 ApplicationReactDOM.render(&lt;Application /&gt;, document.getElementById("root"));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-Context-概述"><a href="#2-Context-概述" class="headerlink" title="2. Context 概述"></a>2. Context 概述</h5><p>为了解决以上问题，React 提供了 Context (上下文)，它允许组件访问全局状态并在全局状态发生更改时重新渲染组件。</p><p>无论需要数据的组件被嵌套的层级有多深，Context 都可以轻松为该组件传递状态。</p><img src="/medias/assets/images/26.jpeg" align="left" width="60%"><h5 id="3-Context-使用教程"><a href="#3-Context-使用教程" class="headerlink" title="3.  Context 使用教程"></a>3.  Context 使用教程</h5><p>在 React 中使用 Context 需要三个步骤：创建 Context、通过 Context 提供状态、组件通过 Context 获取状态。</p><p>第一步：通过 <code>React.createContext</code> 方法创建 Context，并提供默认状态</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 创建 Context 对象// createContext 方法的参数就是默认的状态值const Context = React.createContext("Default Value");<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>第二步：组件通过 <code>React.useContext</code> 方法获取默认状态</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  // 组件通过 useContext 方法获取 Context 提供的默认状态  const value = React.useContext(Context);  return &lt;div&gt;{value}&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：通过 <code>Context.Provider</code> 组件提供全局状态，实现组件访问。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 创建 Context 对象存储默认状态值const Context = React.createContext("Default Value");function App() {  const value = "My Context Value";  // 通过 Context.Provider 组件提供状态, 该状态值会覆盖默认状态值  return (    &lt;Context.Provider value={value}&gt;      &lt;MyComponent /&gt;    &lt;/Context.Provider&gt;  );}function MyComponent() {  // 下层组件获取 Context 全局状态值  const value = React.useContext(Context);  return &lt;div&gt;{value}&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-Context-使用示例"><a href="#4-Context-使用示例" class="headerlink" title="4.  Context 使用示例"></a>4.  Context 使用示例</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">const UserContext = React.createContext({  userName: "",  setUserName: () =&gt; {},});function Application() {  const [userName, setUserName] = React.useState("John Smith");  return (    &lt;UserContext.Provider value={{ userName, setUserName }}&gt;      &lt;UserInfo /&gt;      &lt;UserNameInput /&gt;    &lt;/UserContext.Provider&gt;  );}function UserInfo() {  const { userName } = React.useContext(UserContext);  return &lt;p&gt;{userName}&lt;/p&gt;;}function UserNameInput() {  const { userName, setUserName } = React.useContext(UserContext);  const changeHandler = (event) =&gt; setUserName(event.target.value);  return &lt;input type="text" value={userName} onChange={changeHandler} /&gt;;}ReactDOM.render(&lt;Application /&gt;, document.getElementById("root"));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-表单控制"><a href="#2-6-表单控制" class="headerlink" title="2.6  表单控制"></a>2.6  表单控制</h3><h4 id="2-6-1-受控表单组件"><a href="#2-6-1-受控表单组件" class="headerlink" title="2.6.1 受控表单组件"></a>2.6.1 受控表单组件</h4><p>在 React 组件中使用表单元素时，为了方便获取表单控件的值，通常都会将表单控件和组件状态进行绑定，通过该方式使用表单的组件叫做受控表单组件。</p><h5 id="1-text"><a href="#1-text" class="headerlink" title="1. text"></a>1. text</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [username, setUsername] = React.useState("");  return (    &lt;input      type="text"      value={username}      onChange={(event) =&gt; setUsername(event.target.value)}    /&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-password"><a href="#2-password" class="headerlink" title="2. password"></a>2. password</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 优化前function App() {  const [formState, setFormState] = React.useState({    username: "",    password: "",  });  return (    &lt;&gt;      &lt;input        type="text"        value={formState.username}        onChange={(event) =&gt; setFormState({ ...formState, username: event.target.value })}/&gt;      &lt;input        type="password"        value={formState.password}        onChange={(event) =&gt; setFormState({ ...formState, password: event.target.value })}/&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 优化后function App() {  const [formState, setFormState] = React.useState({    username: "",    password: "",  });  const onChangeHandler = (event) =&gt; {    setFormState({      ...formState,      [event.target.name]: event.target.value,    });  };  return (    &lt;&gt;      &lt;input type="text" name="username" value={formState.username} onChange={onChangeHandler} /&gt;      &lt;input type="password" name="password" value={formState.password} onChange={onChangeHandler} /&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-textarea"><a href="#3-textarea" class="headerlink" title="3. textarea"></a>3. textarea</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [formState, setFormState] = React.useState({    biography: "",  });  const onChangeHandler = (event) =&gt; {    setFormState({      ...formState,      [event.target.name]: event.target.value,    });  };  return &lt;textarea name="biography" value={formState.biography} onChange={onChangeHandler}&gt;&lt;/textarea&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-select"><a href="#4-select" class="headerlink" title="4. select"></a>4. select</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [formState, setFormState] = React.useState({    transport: "",  });  const onChangeHandler = (event) =&gt; {    setFormState({      ...formState,      [event.target.name]: event.target.value,    });  };  return (    &lt;select      name="transport"      value={formState.transport}      onChange={onChangeHandler}      &gt;      &lt;option value=""&gt;请选择交通方式&lt;/option&gt;      &lt;option value="0"&gt;火车&lt;/option&gt;      &lt;option value="1"&gt;飞机&lt;/option&gt;    &lt;/select&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-radio"><a href="#5-radio" class="headerlink" title="5. radio"></a>5. radio</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [formState, setFormState] = React.useState({    size: "",  });  const onChangeHandler = (event) =&gt; {    setFormState({      ...formState,      [event.target.name]: event.target.value,    });  };  return (    &lt;&gt;    &lt;input type="radio" name="size" value="m"  onChange={onChangeHandler} /&gt;    &lt;span&gt;M&lt;/span&gt;    &lt;input type="radio" name="size" value="s" onChange={onChangeHandler} /&gt;    &lt;span&gt;S&lt;/span&gt;&lt;/&gt;);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-checkbox"><a href="#6-checkbox" class="headerlink" title="6. checkbox"></a>6. checkbox</h5><p>checkbox 单独使用，比如是否同意协议、是否记住密码、是否保持登录状态等等，在这种情况下 checkbox 绑定布尔值。</p><p>当前的需求是查看用户是否同意了网站协议。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [formState, setFormState] = React.useState({    agree: false,  });  const onChangeHandler = (event) =&gt; {    // 如果表单控件是复选框, 获取 checked 属性的值作为 value    const value =          event.target.type === "checkbox"    ? event.target.checked    : event.target.value;    setFormState({      ...formState,      [event.target.name]: value,    });  };  return (    &lt;input      type="checkbox"      name="agree"      checked={formState.agree}      onChange={onChangeHandler}      /&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>多个复选框一起使用，比如选择兴趣爱好、多选题等。</p><p>当前的需求是使用模拟爱好数组生成用户界面，当用户选择爱好后，存储用户选择的爱好ID。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 模拟数据 爱好数组const data = [  { id: 1, title: "足球" },  { id: 2, title: "篮球" },  { id: 3, title: "橄榄球" },];function App() {  // 声明表单状态  const [formState, setFormState] = React.useState({    hobbies: [],  });  // 爱好数组映射, 爱好数组中有多少爱好, 该状态数组中就有多少布尔值与之对应, 表示对应的爱好当前的选中状态是什么  const [checkedState, setCheckedState] = React.useState(    new Array(data.length).fill(false)  );  // 用于选择爱好后执行的事件处理函数  const hobbyChangeHandler = (index) =&gt; {    // index 为用户更改的爱好在原数组中的索引    // 根据 index 找到爱好对应的布尔值, 取反, 返回新的爱好数组对应的是否选中的状态布尔值数组    const updatedCheckedState = checkedState.map((checked, i) =&gt;  i === index ? !checked : checked);    // 更新爱好状态布尔值数组, 供下次用户选择时使用    setCheckedState(updatedCheckedState);    // 根据爱好布尔值状态数组, 从原数组中找到用户选中的爱好 id    const udpatedHobbies = updatedCheckedState.reduce(      (result, checked, index) =&gt; {        if (checked) result.push(data[index].id);        return result;      },      []    );    // 更新表单状态    setFormState({ ...formState, hobbies: udpatedHobbies });  };  return (    &lt;&gt;      {data.map((item, index) =&gt; (        &lt;p key={item.id}&gt;          &lt;input            type="checkbox"            onChange={() =&gt; hobbyChangeHandler(index)}            /&gt;          {item.title}        &lt;/p&gt;    ))}  &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="7-submit"><a href="#7-submit" class="headerlink" title="7. submit"></a>7. submit</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [formState, setFormState] = React.useState({    username: "",  });  const onChangeHandler = (event) =&gt; {    setFormState({      ...formState,      [event.target.name]: event.target.value,    });  };  const onSubmitHandler = (event) =&gt; {    event.preventDefault();    console.log(formState);  };  return (    &lt;form onSubmit={onSubmitHandler}&gt;      &lt;input        type="text"        name="username"        value={formState.username}        onChange={onChangeHandler}        /&gt;      &lt;input type="submit" /&gt;    &lt;/form&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-reset"><a href="#8-reset" class="headerlink" title="8. reset"></a>8. reset</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">const initialState = {  username: "",};function App() {  const [formState, setFormState] = React.useState(initialState);  const onChangeHandler = (event) =&gt; {    setFormState({      ...formState,      [event.target.name]: event.target.value,    });  };  const onResetHandler = (event) =&gt; {    setFormState(initialState);  };  return (    &lt;form&gt;      &lt;input        type="text"        name="username"        value={formState.username}        onChange={onChangeHandler}        /&gt;      &lt;button type="button" onClick={onResetHandler}&gt;        重置      &lt;/button&gt;    &lt;/form&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-6-2-非受控表单组件"><a href="#2-6-2-非受控表单组件" class="headerlink" title="2.6.2 非受控表单组件"></a>2.6.2 非受控表单组件</h4><h5 id="1-useRef"><a href="#1-useRef" class="headerlink" title="1. useRef"></a>1. useRef</h5><p>通过 useRef 方法可以实现 DOM 对象的获取。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useRef } from 'react';function App () {  const username = useRef();  const handler = () =&gt; console.log(username); // {current: input}  return &lt;input ref={username} onChange={handler}/&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-forwardRef"><a href="#2-forwardRef" class="headerlink" title="2. forwardRef"></a>2. forwardRef</h5><p>通过 forwardRef 方法可以实现获取子组件中的 DOM 元素 。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/App.jsimport { useEffect, useRef } from "react";import Message from "./Message";function App() {  const messageRef = useRef();  useEffect(() =&gt; {    console.log(messageRef.current);  }, []);  return &lt;Message ref={messageRef} /&gt;;}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/Message.jsimport { forwardRef } from "react";function Message(props, ref) {  return &lt;span ref={ref}&gt;I am span&lt;/span&gt;;}export default forwardRef(Message);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-非受控表单组件"><a href="#3-非受控表单组件" class="headerlink" title="3. 非受控表单组件"></a>3. 非受控表单组件</h5><p>在 React 中受控表单组件使用起来很方便但也相对复杂，如果表单本身比较简单也可以使用非受控表单组件，非受控表单组件就是表单控件不和组件状态进行绑定，就使用原生的表单 DOM 对象存储用户输入的值。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const usernameRef = React.useRef();  const onSubmitHandler = (event) =&gt; {    event.preventDefault();    console.log(usernameRef.current.value);  };  return (    &lt;form onSubmit={onSubmitHandler}&gt;      &lt;input type="text" ref={usernameRef} /&gt;      &lt;input type="submit" /&gt;    &lt;/form&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7-样式控制"><a href="#2-7-样式控制" class="headerlink" title="2.7 样式控制"></a>2.7 样式控制</h3><h4 id="2-7-1-CSS-stylesheets"><a href="#2-7-1-CSS-stylesheets" class="headerlink" title="2.7.1 CSS stylesheets"></a>2.7.1 CSS stylesheets</h4><p>在 JS 文件中可以通过 import 关键字导入 CSS 样式表，样式表的作用范围为全局。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* src/styles.css */</span><span class="token selector">.button</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #5cb85c<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 6px 12px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 1.42857143<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// src/index.js</span><span class="token keyword">import</span> <span class="token string">"./styles.css"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/App.jsfunction App() {  return &lt;button className="button"&gt;button&lt;/button&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-7-2-Inline-styling"><a href="#2-7-2-Inline-styling" class="headerlink" title="2.7.2 Inline styling"></a>2.7.2 Inline styling</h4><p>通过 style 属性为元素添加行内样式，在样式参与逻辑时行内样式具有高度优势。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useState } from "react";function App() {  const [state, setState] = useState({    colors: ["palevioletred", "yellow", "papayawhip"],    index: 0,  });  const styles = {    width: 200,    padding: "50px 0",    background: state.colors[state.index],    textAlign: "center",  };  const onClickHandler = () =&gt; {    setState({      ...state,      index: state.index + 1 &gt; 2 ? 0 : state.index + 1,    });  };  return (    &lt;div style={styles} onClick={onClickHandler}&gt;      Hello React    &lt;/div&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-7-3-CSS-Modules"><a href="#2-7-3-CSS-Modules" class="headerlink" title="2.7.3 CSS Modules"></a>2.7.3 CSS Modules</h4><p>通过 CSS 模块可以实现组件级样式，样式文件名称约定格式: [name].module.css</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* App.module.css */</span><span class="token selector">.button</span> <span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #5cb85c<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">cursor</span><span class="token punctuation">:</span> pointer<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 6px 12px<span class="token punctuation">;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>  <span class="token property">line-height</span><span class="token punctuation">:</span> 1.42857143<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> 4px<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// App.jsimport styles from "./App.module.css";function App() {  return &lt;button className={styles.button}&gt;button&lt;/button&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-7-4-classnames"><a href="#2-7-4-classnames" class="headerlink" title="2.7.4 classnames"></a>2.7.4 classnames</h4><p>通过 <a href="https://www.npmjs.com/package/classnames">classnames</a> 第三方库可以实现 <code>className</code> 属性值的动态绑定。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 下载 classnames 第三方库<span class="token function">npm</span> <span class="token function">install</span> classnames<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 注意: classNames 方法的参数个数没有限制classNames('foo', { bar: true }); // =&gt; 'foo bar'classNames({ 'bar': true }); // =&gt; 'foo-bar'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import classNames from "classnames";function App() {  return &lt;div className={classNames("foo", { bar: true })}&gt;App works&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-8-传送门组件"><a href="#2-8-传送门组件" class="headerlink" title="2.8 传送门组件"></a>2.8 传送门组件</h3><h4 id="2-8-1-已知问题"><a href="#2-8-1-已知问题" class="headerlink" title="2.8.1  已知问题"></a>2.8.1  已知问题</h4><p>需求: 在 App 组件中点击按钮渲染弹框组件。</p><p>问题: 弹框组件被渲染到 App  组件内部，弹框组件的样式受到了 App 组件元素的影响，导致布局错乱。</p><p><span style="color: skyblue">期望的结果如下 ↓</span></p><img src="/medias/assets/images/28.png" width="65%" align="left"><p><span style="color: skyblue">实际的结果如下 ↓</span></p><img src="/medias/assets/images/29.png" width="65%" align="left"><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/App.jsimport { useState } from "react";import Modal from "./Modal";function App() {  const [isOpen, setIsOpen] = useState(false);  const appStyles = { width: "60%", height: 400, transform: "translate(0,0)" };  return (    &lt;div style={appStyles}&gt;      &lt;button onClick={() =&gt; setIsOpen(!isOpen)}&gt;open modal&lt;/button&gt;      {isOpen ? &lt;Modal /&gt; : null}    &lt;/div&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/Modal.jsimport styles from "./Modal.module.css";function Modal() {  return (    &lt;div className={styles.overlayer}&gt;      &lt;div className={styles.content}&gt;&lt;/div&gt;    &lt;/div&gt;  );}export default Modal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* src/Modal.module.css */</span> <span class="token selector">.overlayer</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0<span class="token punctuation">,</span> 0.5<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.content</span> <span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> 450px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-50%<span class="token punctuation">,</span> -50%<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-8-2-传送门"><a href="#2-8-2-传送门" class="headerlink" title="2.8.2 传送门"></a>2.8.2 传送门</h4><p>通过 <code>ReactDOM.createPortal</code> 方法可以将指定组件渲染到指定位置。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- public/index.html --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>portal-root<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/Modal.jsimport styles from "./Modal.module.css";import ReactDOM from "react-dom";function Modal() {  return ReactDOM.createPortal(    &lt;div className={styles.overlayer}&gt;      &lt;div className={styles.content}&gt;&lt;/div&gt;    &lt;/div&gt;,    document.getElementById("portal-root")  );}export default Modal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-组件化开发进阶"><a href="#3-组件化开发进阶" class="headerlink" title="3. 组件化开发进阶"></a>3. 组件化开发进阶</h2><h3 id="3-1-useState"><a href="#3-1-useState" class="headerlink" title="3.1 useState"></a>3.1 useState</h3><h4 id="3-1-1-状态异步更新"><a href="#3-1-1-状态异步更新" class="headerlink" title="3.1.1 状态异步更新"></a>3.1.1 状态异步更新</h4><p>设置状态的方法在调用后不会立即更新视图，而是要等到当前执行栈中所有代码执行完成以后再去更新视图，这是为了防止视图被频繁更新导致性能变差。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useState } from "react";function App() {  const [count, setCount] = useState(0);  const onClickHandler = () =&gt; {    setCount(count + 1);    console.log(count); // 此处的输出 count 值总是未更新前的  };  return &lt;button onClick={onClickHandler}&gt;{count}&lt;/button&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>题外话：如果开发者就想在 count 被更新后执行一些操作，可以通过 useEffect 方法监听状态变化。</p><h4 id="3-1-2-状态覆盖"><a href="#3-1-2-状态覆盖" class="headerlink" title="3.1.2 状态覆盖"></a>3.1.2 状态覆盖</h4><p>当多次调用更新状态的方法时，如果参数类型不是函数，React 内部会进行状态的整体覆盖，即只有最后一次设置生效。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [count, setCount] = useState(0);  const onClickHandler = () =&gt; {    setCount(count + 1);    setCount(count + 1);    setCount(count + 1);    setCount(count + 1);  };  return &lt;button onClick={onClickHandler}&gt;{count}&lt;/button&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-3-状态合并"><a href="#3-1-3-状态合并" class="headerlink" title="3.1.3 状态合并"></a>3.1.3 状态合并</h4><p>当多次调用更新状态的方法时，如果参数是函数类型，React 允许对状态进行合并操作，而不是整体无脑覆盖。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [count, setCount] = useState(0);  const onClickHandler = () =&gt; {    setCount((count) =&gt; count + 1);    setCount((count) =&gt; count + 1);    setCount((count) =&gt; count + 1);    setCount((count) =&gt; count + 1);  };  return &lt;button onClick={onClickHandler}&gt;{count}&lt;/button&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-1-4-初始状态函数"><a href="#3-1-4-初始状态函数" class="headerlink" title="3.1.4 初始状态函数"></a>3.1.4 初始状态函数</h4><p>在使用 useState 方法声明状态时，状态初始值只在组件初始渲染时用到，在以后的每次组件渲染中都不会用到，但是如果初始值中包含昂贵的计算，在每次组件重新渲染时都会被执行，导致组件性能变差。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useState } from "react";function App() {  let inialState = 0;  for (let i = 0; i &lt; 100000000; i++) {    inialState += i;  }  const [number, setNumber] = useState(inialState);  return (    &lt;button onClick={() =&gt; setNumber((prev) =&gt; prev + 1)}&gt;{number}&lt;/button&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码中的问题可以使用初始状态函数解决，可以将初始状态的计算代码放入初始状态函数，因为初始状态函数只会被调用一次。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useState } from "react";function App() {  const [number, setNumber] = useState(() =&gt; {    let inialState = 0;    for (let i = 0; i &lt; 100000000; i++) {      inialState += i;    }    return inialState;  });  return (    &lt;button onClick={() =&gt; setNumber((prev) =&gt; prev + 1)}&gt;{number}&lt;/button&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-useReducer"><a href="#3-2-useReducer" class="headerlink" title="3.2 useReducer"></a>3.2 useReducer</h3><h4 id="3-2-1-概述"><a href="#3-2-1-概述" class="headerlink" title="3.2.1 概述"></a>3.2.1 概述</h4><p><code>useReducer</code> 是另一种在组件中声明状态管理状态的方式，它比较适合于处于复杂状态逻辑的场景，它是 useState 的增强方案。</p><p>当你在组件中使用 useState 方法来管理列表状态时，你需在状态列表中进行添加、更新、删除操作，此时你会发现管理状态的逻辑占据了组件主体的很大部分，这就是问题。因为 React 组件本身只应该包含用户界面的渲染逻辑，而状态管理不是，所以它应该被放在一个单独的地方进行管理，否则你的组件就会混合状态管理逻辑和渲染逻辑，这样的组件很难阅读和维护。</p><p>为了帮助开发者分离组件状态管理逻辑和用户界面渲染逻辑，React 提供了 <code>useReducer</code> 方法帮助开发者进行关注点分离。</p><h4 id="3-2-2-工作方式"><a href="#3-2-2-工作方式" class="headerlink" title="3.2.2 工作方式"></a>3.2.2 工作方式</h4><p>要使用 useReducer 方法就必须遵循它的使用规则、了解它的工作流程。</p><p>action 对象：用于描述对组件状态进行怎样的操作。 </p><p>dispatch 方法：用于触发对状态的操作，接收 action 对象作为参数。</p><p>reducer 方法：用于对状态进行集中操作的地方，返回操作之后的最新状态。</p><img src="/medias/assets/images/30.png" align="left" width="62%"><h4 id="3-2-3-计数器"><a href="#3-2-3-计数器" class="headerlink" title="3.2.3 计数器"></a>3.2.3 计数器</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useReducer } from "react";function reducer(state, action) {  switch (action.type) {    case "increment":      return state + 1;    case "decrement":      return state - 1;    default:      return state;  }}function Counter() {  const [count, dispatch] = useReducer(reducer, 0);  return (    &lt;&gt;      &lt;button onClick={() =&gt; dispatch({ type: "increment" })}&gt;{count}&lt;/button&gt;      &lt;button onClick={() =&gt; dispatch({ type: "decrement" })}&gt;{count}&lt;/button&gt;    &lt;/&gt;  );}export default Counter;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-useLayoutEffect"><a href="#3-3-useLayoutEffect" class="headerlink" title="3.3 useLayoutEffect"></a>3.3 useLayoutEffect</h3><h4 id="3-3-1-概述"><a href="#3-3-1-概述" class="headerlink" title="3.3.1 概述"></a>3.3.1 概述</h4><p><code>useLayoutEffect</code> 和 <code>useEffect</code> 两个方法的作用和使用方式都是一样的，都是用来处理副作用代码的，它们之间唯一的区别就是回调函数的执行时机不同。</p><img src="/medias/assets/images/31.png" align="left" width="40%"><p><code>useEffect</code> 在组件视图更新完成后执行，组件状态发生变化 -&gt; 比较状态差异 -&gt; 视图更新 -&gt; useEffect</p><img src="/medias/assets/images/32.png" align="left" width="48%"><p><code>useLayoutEffect</code> 在组件视图更新前执行，组件状态发生变化 -&gt; 比较状态差异 -&gt; useEffectLayout -&gt; 更新视图</p><h4 id="3-3-2-基本使用"><a href="#3-3-2-基本使用" class="headerlink" title="3.3.2 基本使用"></a>3.3.2 基本使用</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useLayoutEffect, useRef, useState } from "react";function App() {  const [isShow, setIsShow] = useState(false);  const divRef = useRef();  // 此处如果使用 useEffect 就是出现元素闪烁问题  // 就是元素先出现在原始位置, 再出现在目标位置  useLayoutEffect(() =&gt; {    if (!divRef.current) return;    divRef.current.style.top = "100px";  }, [isShow]);  return (    &lt;&gt;      &lt;button onClick={() =&gt; setIsShow(!isShow)}&gt;button&lt;/button&gt;      {isShow ? (        &lt;div ref={divRef} style={{ position: "absolute" }}&gt;          div        &lt;/div&gt;      ) : null}    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么在视图更新前可以获取到 <code>divRef.current</code> 并设置样式? 因为 React 内部在比较状态差异的过程中已经在内存中创建/更新了真实DOM对象。</p><h3 id="3-4-useRef"><a href="#3-4-useRef" class="headerlink" title="3.4 useRef"></a>3.4 useRef</h3><h4 id="3-4-1-概述及示例"><a href="#3-4-1-概述及示例" class="headerlink" title="3.4.1 概述及示例"></a>3.4.1 概述及示例</h4><p>通过 <code>useRef</code> 方法不仅可以获取 DOM 对象，它还可以用于保存数据。</p><p>使用它保存的数据脱离组件渲染，也就是说，即使组件重新渲染值依然存在，而且值的改变不会引发视图更新。</p><p>需求：记录组件渲染次数</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useEffect, useRef, useState } from "react";function App() {  const [text, setText] = useState("");  const renderCount = useRef(0);  useEffect(() =&gt; {    renderCount.current += 1;  });  return (    &lt;&gt;      &lt;input        type="text"        value={text}        onChange={(event) =&gt; setText(event.target.value)}      /&gt;      {renderCount.current}    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-4-2-疑惑"><a href="#3-4-2-疑惑" class="headerlink" title="3.4.2 疑惑"></a>3.4.2 疑惑</h4><p>能不能不使用 useRef 方法而使用 useState 方法记录组件渲染次数 ?</p><p>答案是不能，因为通过 <code>useState</code> 方法声明的是组件状态，组件状态被改变会触发视图更新，一旦视图更新就要通过 count 记录更新次数，count 被改变又会触发视图更新，从而引发组件的无限次循环渲染。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useEffect, useState } from "react";function App() {  const [text, setText] = useState("");  const [count, setCount] = useState(0);  useEffect(() =&gt; {    setCount(count + 1);  });  return (    &lt;&gt;      &lt;input        type="text"        value={text}        onChange={(event) =&gt; setText(event.target.value)}      /&gt;      {count}    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-5-memo"><a href="#3-5-memo" class="headerlink" title="3.5 memo"></a>3.5 memo</h3><h4 id="3-5-1-问题代码示例"><a href="#3-5-1-问题代码示例" class="headerlink" title="3.5.1 问题代码示例"></a>3.5.1 问题代码示例</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/App.jsimport { useEffect, useState } from "react";import ShowName from "./ShowName";function App() {  const [index, setIndex] = useState(0);  useEffect(() =&gt; {    const timer = setInterval(() =&gt; {      setIndex((prev) =&gt; prev + 1);    }, 1000);    return () =&gt; clearInterval(timer);  }, []);  return (    &lt;&gt;      &lt;p&gt;{index}&lt;/p&gt;      &lt;ShowName name="张三" /&gt;    &lt;/&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/ShowName.jsimport { useEffect } from "react";function ShowName({ name }) {  useEffect(() =&gt; {    console.log("ShowName rendered");  });  return &lt;div&gt;{name}&lt;/div&gt;;}export default ShowName;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码的问题在于父组件更新引起了子组件的不必要更新，因为子组件本身是没有任何变化的是没有必要更新的。</p><h4 id="3-5-2-基本使用"><a href="#3-5-2-基本使用" class="headerlink" title="3.5.2 基本使用"></a>3.5.2 基本使用</h4><p>memo 方法可以为组件添加输入数据 (props) 的比对逻辑，如果当前渲染时的输入数据和上一次渲染时的输入数据一致，阻止组件重新渲染。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { memo } from "react";export default memo(ShowName);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>memo 方法内部采用的是浅层比较，比较基本数据类型的值是否相同，比较引用类型是否为相同的引用地址。</p><p>以下代码在父组件每次重新渲染时都会生成新的 person 对象，memo 方法在内部比较时每次得到的都是不同的对象，所以每次子组件也会跟着重新渲染。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;ShowPerson person={{ name: "张三" }} /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>memo 方法的第二个参数即为比较函数，可以通过它解决以上问题。比较函数的第一个参数为 prevProps，比较函数的第二个参数为 nextProps, 比较函数返回 true 不进行渲染，比较函数返回 false 组件重新渲染。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">export default memo(ShowName, compareFunction);function compareFunction(prevProps, nextProps) {  if (prevProps.person.name === nextProps.person.name) {    return true;  }  return false;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-6-useMemo"><a href="#3-6-useMemo" class="headerlink" title="3.6 useMemo"></a>3.6 useMemo</h3><h4 id="3-6-1-问题代码示例"><a href="#3-6-1-问题代码示例" class="headerlink" title="3.6.1 问题代码示例"></a>3.6.1 问题代码示例</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useState } from "react";function App() {  const [number, setNumber] = useState(0);  const [dark, setDark] = useState(false);  const styles = {    background: dark ? "black" : "white",    color: dark ? "white" : "black",  };  const double = slowFunction(number);  return (    &lt;div&gt;      &lt;input        type="number"        value={number}        onChange={(event) =&gt; setNumber(event.target.value)}      /&gt;      &lt;div style={styles} onClick={() =&gt; setDark(!dark)}&gt;        {double}      &lt;/div&gt;    &lt;/div&gt;  );}function slowFunction(n) {  for (let i = 0; i &lt; 1000000000; i++) {}  return n * 2;}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码的问题之一在于每次组件重新渲染都会调用 <code>slowFunction</code> 方法导致组件渲染性能变差。</p><p>但其实只有 <code>number</code> 发生变化后才需要调用 <code>slowFunction</code>，而现在 <code>dark</code> 发生变化也会重新调用它。</p><p>以上代码的问题之二是每次组件重新渲染都会生成新的 <code>styles</code> 对象，导致不能在组件中有效监听 <code>styles</code> 对象的变化。</p><h4 id="3-6-2-基本使用"><a href="#3-6-2-基本使用" class="headerlink" title="3.6.2 基本使用"></a>3.6.2 基本使用</h4><p>通过 <code>useMemo</code> 方法可以对组件中的值进行缓存，就是说在每次组件重新渲染时都返回相同的值，也可以指定哪些状态发生改变时重新计算该值。</p><p><code>useMemo</code> 有助于避免在每个渲染上进行昂贵的计算，提升组件性能。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useEffect, useMemo, useState } from "react";function App() {  const [number, setNumber] = useState(0);  const [dark, setDark] = useState(false);  const double = useMemo(() =&gt; {    return slowFunction(number);  }, [number]);  const styles = useMemo(() =&gt; {    return {      background: dark ? "black" : "white",      color: dark ? "white" : "black",    };  }, [dark]);  useEffect(() =&gt; {    console.log("styles");  }, [styles]);  return (    &lt;div&gt;      &lt;input        type="number"        value={number}        onChange={(event) =&gt; setNumber(event.target.value)}      /&gt;      &lt;div style={styles} onClick={() =&gt; setDark(!dark)}&gt;        {double}      &lt;/div&gt;    &lt;/div&gt;  );}function slowFunction(n) {  for (let i = 0; i &lt; 1000000000; i++) {}  return n * 2;}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-7-useCallback"><a href="#3-7-useCallback" class="headerlink" title="3.7 useCallback"></a>3.7 useCallback</h3><h4 id="3-7-1-问题代码示例"><a href="#3-7-1-问题代码示例" class="headerlink" title="3.7.1 问题代码示例"></a>3.7.1 问题代码示例</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useEffect, useState } from "react";function App() {  const [number, setNumber] = useState(1);  const [dark, setDark] = useState(false);  const styles = {    background: dark ? "black" : "white",    color: dark ? "white" : "black",  };  const getItems = () =&gt; {    return [number, number + 1, number + 2];  };  return (    &lt;div style={styles}&gt;      &lt;input        type="number"        value={number}        onChange={() =&gt; setNumber((prev) =&gt; prev + 1)}      /&gt;      &lt;button onClick={() =&gt; setDark((dark) =&gt; !dark)}&gt;button&lt;/button&gt;      &lt;List getItems={getItems} /&gt;    &lt;/div&gt;  );}function List({ getItems }) {  const [items, setItems] = useState([]);    useEffect(() =&gt; {    setItems(getItems());    console.log("update items");  }, [getItems]);  return (    &lt;div&gt;      {items.map((item) =&gt; (        &lt;p key={item}&gt;{item}&lt;/p&gt;      ))}    &lt;/div&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码的问题在于每次组件重新渲染都会生成一个新的 getItems 方法，所以每次 List 组件接收的都是不一样的 getItems 方法，导致组件在不该被渲染的时候被渲染了。实际上只有 number 发生变化后 List 组件才需要被重新渲染，dark 发生变化 List 组件没必要重新渲染。</p><h4 id="3-7-2-基本使用"><a href="#3-7-2-基本使用" class="headerlink" title="3.7.2  基本使用"></a>3.7.2  基本使用</h4><p>通过 <code>useCallback</code> 方法可以缓存函数，使用组件每次重新渲染都返回相同的函数实例，也可以指定当某个状态发生变化后返回新的函数实例。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useCallback } from "react";function App () {  const getItems = useCallback(() =&gt; {    return [number, number + 1, number + 2];  }, [number]);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-8-useImperativeHandle"><a href="#3-8-useImperativeHandle" class="headerlink" title="3.8 useImperativeHandle"></a>3.8 useImperativeHandle</h3><h4 id="3-8-1-概述"><a href="#3-8-1-概述" class="headerlink" title="3.8.1 概述"></a>3.8.1 概述</h4><p>虽然 React 遵循单项数据流原则，但凡事总有特殊情况，React 也提供了子组件向父组件传递数据方法。</p><p>通过 useImperativeHandle 方法可以实现父组件获取子组件的数据或者调用子组件的里声明的函数。</p><p>父组件通过 useRef 方法创建了一个钩子，用于钩取子组件的数据，子组件在获取到钩子以后，通过 useImperativeHandle 向钩子上暴露数据。</p><h4 id="3-8-2-代码示例"><a href="#3-8-2-代码示例" class="headerlink" title="3.8.2 代码示例"></a>3.8.2 代码示例</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/App.jsimport { useRef } from "react";import Message from "./Message";function App() {  const messageRef = useRef();  const onClickHandler = () =&gt; {    console.log(messageRef.current.getText());    console.log(messageRef.current.input);  };  return (    &lt;&gt;      &lt;Message ref={messageRef} /&gt;      &lt;button onClick={onClickHandler}&gt;button&lt;/button&gt;    &lt;/&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/Message.jsimport { forwardRef, useImperativeHandle, useRef, useState } from "react";function Message(props, ref) {  const [text, setText] = useState("");  const inputRef = useRef();  useImperativeHandle(ref, () =&gt; {    return {      getText() {        return text;      },      input: inputRef.current,    };  });  return (    &lt;input      ref={inputRef}      type="text"      value={text}      onChange={(event) =&gt; setText(event.target.value)}    /&gt;  );}export default forwardRef(Message);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-9-Custom-Hooks"><a href="#3-9-Custom-Hooks" class="headerlink" title="3.9 Custom Hooks"></a>3.9 Custom Hooks</h3><h4 id="3-9-1-概述"><a href="#3-9-1-概述" class="headerlink" title="3.9.1 概述"></a>3.9.1 概述</h4><p>React 允许开发者创建自定义钩子函数用于向组件中添加功能。</p><p>自定义钩子函数其实就是应用逻辑和内置钩子函数的组合。</p><h4 id="3-9-2-useLocalStorage"><a href="#3-9-2-useLocalStorage" class="headerlink" title="3.9.2 useLocalStorage"></a>3.9.2 useLocalStorage</h4><p>用于将组件状态实时同步到本地存储 localStorage。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useState } from "react";export function useLocalStorage(key, initialValue) {  // 声明状态  const [storedValue, setStoredValue] = useState(function () {    // 看看本地是否存在已有状态值    const item = window.localStorage.getItem(key);    // 如果本地已经有了就用本地的, 否则使用 initialValue    return item ? JSON.parse(item) : initialValue;  });  // 对设置状态的方法进行增强, 添加状态同步到本地存储的功能  const setState = (value) =&gt; {    // 获取新的状态值    // 如果 value 是函数类型, 调用函数传递现有状态, 从返回值中获取新的状态    // 如果 value 是其他类型, 直接作为状态值使用    const valueToStore = value instanceof Function ? value(storedValue) : value;    // 设置状态    setStoredValue(valueToStore);    // 将状态值同步到 localStorage    localStorage.setItem(key, JSON.stringify(valueToStore));  };  // 返回状态及设置状态的方法  return [storedValue, setState];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [name, setName] = useLocalStorage("name", "Bob");    return (    &lt;div&gt;      &lt;input        type="text"        placeholder="Enter your name"        value={name}        onChange={(e) =&gt; setName(e.target.value)}      /&gt;    &lt;/div&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-9-3-useToggle"><a href="#3-9-3-useToggle" class="headerlink" title="3.9.3 useToggle"></a>3.9.3 useToggle</h4><p>用于实现布尔值状态的切换。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useCallback, useState } from "react";export default function useToggle(initialValue = false) {  const [state, setState] = useState(initialValue);  const toggle = useCallback(() =&gt; {    setState((state) =&gt; !state);  }, []);  return [state, toggle];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const [isTextChanged, setIsTextChanged] = useToggle();  return (    &lt;button onClick={setIsTextChanged}&gt;      {isTextChanged ? "Toggled" : "Click to Toggle"}    &lt;/button&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-9-4-useAsync"><a href="#3-9-4-useAsync" class="headerlink" title="3.9.4 useAsync"></a>3.9.4 useAsync</h4><p>用于执行异步代码并为异步过程添加状态。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useCallback, useEffect, useState } from "react";export default function useAsync(asyncFunction, immediate = false) {  // idle: 空闲 pending: 等待 success: 成功 error: 失败  const [status, setStatus] = useState("idle");  const [value, setValue] = useState(null);  const [error, setError] = useState(null);  const execute = useCallback(() =&gt; {    setStatus("pending");    setValue(null);    setError(null);    return asyncFunction()      .then((response) =&gt; {        setValue(response);        setStatus("success");      })      .catch((error) =&gt; {        setError(error);        setStatus("error");      });  }, [asyncFunction]);  useEffect(() =&gt; {    if (immediate) {      execute();    }  }, [execute, immediate]);  return { execute, status, value, error };}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import useAsync from "./useAsync";const myFunction = () =&gt; {  return new Promise((resolve, reject) =&gt; {    setTimeout(() =&gt; {      const rnd = Math.random() * 10;      rnd &lt;= 5 ? resolve("成功 🙌") : reject("失败 😞");    }, 2000);  });};function App() {  const { status, value, error, execute } = useAsync(myFunction);  return (    &lt;div&gt;      {status === "idle" &amp;&amp; &lt;div&gt;Start your journey by clicking a button&lt;/div&gt;}      {status === "success" &amp;&amp; &lt;div&gt;{value}&lt;/div&gt;}      {status === "error" &amp;&amp; &lt;div&gt;{error}&lt;/div&gt;}      &lt;button onClick={execute} disabled={status === "pending"}&gt;        {status !== "pending" ? "Click me" : "Loading..."}      &lt;/button&gt;    &lt;/div&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-9-5-useHover"><a href="#3-9-5-useHover" class="headerlink" title="3.9.5 useHover"></a>3.9.5 useHover</h4><p>用于检测元素的鼠标移入移出操作。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useEffect, useRef, useState } from "react";export default function useHover() {  const [value, setValue] = useState(false);  const elementRef = useRef();  useEffect(() =&gt; {    const node = elementRef.current;    if (!node) return;    const handleMouseEnter = () =&gt; setValue(true);  const handleMouseLeave = () =&gt; setValue(false);    node.addEventListener("mouseenter", handleMouseEnter);    node.addEventListener("mouseleave", handleMouseLeave);    return () =&gt; {      node.removeEventListener("mouseenter", handleMouseEnter);      node.removeEventListener("mouseleave", handleMouseLeave);    };  }, []);  return [elementRef, value];}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import useHover from "./useHover";function App() {  const [hoverRef, isHovered] = useHover();  return &lt;div ref={hoverRef}&gt;{isHovered ? "😁" : "☹️"}&lt;/div&gt;;}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-9-6-useWindowSize"><a href="#3-9-6-useWindowSize" class="headerlink" title="3.9.6 useWindowSize"></a>3.9.6 useWindowSize</h4><p>用于获取浏览器的窗口大小。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useEffect, useState } from "react";export default function useWindowSize() {  const [windowSize, setWindowSize] = useState({    width: undefined,    height: undefined,  });  useEffect(() =&gt; {    const handleResize = () =&gt; {      setWindowSize({        width: window.innerWidth,        height: window.innerHeight,      });    };    window.addEventListener("resize", handleResize);    handleResize();    return () =&gt; window.removeEventListener("resize", handleResize);  }, []);  return windowSize;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import useWindowSize from "./useWindowSize";function App() {  const size = useWindowSize();  return (    &lt;div&gt;      {size.width}px / {size.height}px    &lt;/div&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-9-7-useReducerAsync"><a href="#3-9-7-useReducerAsync" class="headerlink" title="3.9.7 useReducerAsync"></a>3.9.7 useReducerAsync</h4><p>通过 useReducerAsync 自定义钩子函数可以实现在 useReducer 的工作流程中加入副作用代码。</p><p>首先看一段没有该钩子函数的代码，需求是在点击按钮时获取id值为1的任务对象。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import axios from "axios";import { useReducer } from "react";const initialState = [];function reducer(state, action) {  switch (action.type) {    case "setTodo":      return [...state, action.payload];    default:      return state;  }}function App() {  const [state, dispatch] = useReducer(reducer, initialState);  const onClickHandler = async (id) =&gt; {    let response = await axios.get(      `https://jsonplaceholder.typicode.com/todos/${id}`    );    dispatch({ type: "setTodo", payload: response.data });  };  return (    &lt;div&gt;      &lt;button onClick={() =&gt; onClickHandler(1)}&gt;button&lt;/button&gt;      &lt;div&gt;{JSON.stringify(state, null, 2)}&lt;/div&gt;    &lt;/div&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码的问题在于，任务状态的处理有一部分在组件内部一部分在组件外部，代码过于分散。</p><p>通过 <a href="https://github.com/dai-shi/use-reducer-async">useReducerAsync</a> 自定义钩子函数可以将处理状态过程中的副作用代码抽离到组件外部。</p><p><code>npm install use-reducer-async</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useReducerAsync } from "use-reducer-async";import axios from "axios";const initialState = [];function reducer(state, action) {  switch (action.type) {    case "setTodo":      return [...state, action.payload];    default:      return state;  }}const asyncHandlers = {  loadTodo:    ({ dispatch }) =&gt;    async (action) =&gt; {      let response = await axios.get(        `https://jsonplaceholder.typicode.com/todos/${action.payload}`      );      dispatch({ type: "setTodo", payload: response.data });    },};function App() {  const [state, dispatch] = useReducerAsync(reducer, initialState, asyncHandlers);  return (    &lt;div&gt;      &lt;button onClick={() =&gt; dispatch({ type: "loadTodo", payload: 1 })}&gt;button&lt;/button&gt;      &lt;div&gt;{JSON.stringify(state, null, 2)}&lt;/div&gt;    &lt;/div&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-10-Children"><a href="#3-10-Children" class="headerlink" title="3.10 Children"></a>3.10 Children</h3><h4 id="3-10-1-only"><a href="#3-10-1-only" class="headerlink" title="3.10.1 only"></a>3.10.1 only</h4><p>通过 <code>Children.only</code> 方法可以限制组件标签只接收一个子元素。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import Message from "./Message";function App() {  // 不允许 Message 组件标签传入多个子元素, 需要对这种情况进行限制  return (    &lt;Message&gt;      &lt;p&gt;Hello&lt;/p&gt;      &lt;p&gt;Hello&lt;/p&gt;    &lt;/Message&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { Children } from "react";function Message(props) {  try {    Children.only(props.children);  } catch (error) {    // Error: React.Children.only expected to receive a single React element child.    // 错误: React.children 只期望接收一个 React 元素    return &lt;div&gt;Message 组件标签只接收一个子元素 &lt;/div&gt;;  }  return &lt;div&gt;{props.children}&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-10-2-count"><a href="#3-10-2-count" class="headerlink" title="3.10.2 count"></a>3.10.2 count</h4><p>通过 <code>Children.count</code> 方法可以获取组件标签传入的子元素的数量。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { Children } from "react";function Message(props) {  return &lt;div&gt;{Children.count(props.children)}&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-10-3-map"><a href="#3-10-3-map" class="headerlink" title="3.10.3 map"></a>3.10.3 map</h4><p>通过 <code>Children.map</code> 方法可以对组件标签内部的子元素进行转换操作。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  return (    &lt;Message&gt;      &lt;img        src="https://images.pexels.com/photos/10198426/pexels-photo-10198426.jpeg"        alt=""        width="300px"      /&gt;      &lt;img        src="https://images.pexels.com/photos/4386364/pexels-photo-4386364.jpeg"        alt=""        width="300px"      /&gt;      &lt;img        src="https://images.pexels.com/photos/9812128/pexels-photo-9812128.jpeg"        alt=""        width="300px"      /&gt;      &lt;img        src="https://images.pexels.com/photos/8746965/pexels-photo-8746965.jpeg"        width="300px"        alt=""      /&gt;    &lt;/Message&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { Children } from "react";function Message(props) {  const items = Children.map(props.children, (item) =&gt; (    &lt;a href="http://www.baidu.com"&gt;{item}&lt;/a&gt;  ));  return &lt;div&gt;{items}&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-10-4-toArray"><a href="#3-10-4-toArray" class="headerlink" title="3.10.4 toArray"></a>3.10.4 toArray</h4><p><code>props.children</code> 存储多个值时是数组类型，存储一个值时为对象类型。</p><p>通过 <code>Children.toArray</code> 方法可以将 <code>props.children</code> 转换为数组类型，以保证 <code>Children.map</code> 方法永远有用。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/App.jsimport ImageToggle from "./ImageToggle";function App() {  return (    &lt;ImageToggle&gt;      &lt;img        src="https://images.pexels.com/photos/10198426/pexels-photo-10198426.jpeg"        alt=""        width="300px"      /&gt;      &lt;img        src="https://images.pexels.com/photos/4386364/pexels-photo-4386364.jpeg"        alt=""        width="300px"      /&gt;      &lt;img        src="https://images.pexels.com/photos/9812128/pexels-photo-9812128.jpeg"        alt=""        width="300px"      /&gt;      &lt;img        src="https://images.pexels.com/photos/8746965/pexels-photo-8746965.jpeg"        width="300px"        alt=""      /&gt;    &lt;/ImageToggle&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/ImageToggle.jsimport { useEffect, useState, Children } from "react";function ImageToggle(props) {  const [state, setState] = useState({    // 当前要显示的图片的索引    current: 0,    // 总共有多少张图片, 用于索引的溢出判断    total: 0,  });  useEffect(() =&gt; {    setState((prev) =&gt; ({ ...prev, total: Children.count(props.children) }));  }, [props.children]);  useEffect(() =&gt; {    const timer = setInterval(showNext, 2000);    return () =&gt; clearInterval(timer);  }, []);  const showNext = () =&gt; {    setState(({ current, total }) =&gt; {      return {        total,        current: current + 1 === total ? 0 : current + 1,      };    });  };  return &lt;div&gt;{Children.toArray(props.children)[state.current]}&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-11-Context"><a href="#3-11-Context" class="headerlink" title="3.11 Context"></a>3.11 Context</h3><h4 id="3-11-1-已知问题"><a href="#3-11-1-已知问题" class="headerlink" title="3.11.1 已知问题"></a>3.11.1 已知问题</h4><p>在 React 中虽然使用 Context 可以方便的实现组件之间的状态共享，但是如果使用不当就会产生严重的性能问题。 </p><p>当多个组件使用了 Context 中的不同的状态时，只要 Context 中的某一个状态发生改变，使用了其他状态的其他组件也会重新渲染。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/Context.jsimport { createContext, useState } from "react";export const AppContenxt = createContext();export function AppProvider({ children }) {  const [state, setState] = useState({    foo: "foo context",    bar: "bar context",  });  return (    &lt;AppContenxt.Provider value={[state, setState]}&gt;      {children}    &lt;/AppContenxt.Provider&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/App.jsimport Bar from "./Bar";import Foo from "./Foo";import { AppProvider } from "./Context";function App() {  return (    &lt;AppProvider&gt;      &lt;Foo /&gt;      &lt;Bar /&gt;    &lt;/AppProvider&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/Foo.jsimport { useContext, useEffect } from "react";import { AppContenxt } from "./Context";function Foo() {  const [appContext, setAppContext] = useContext(AppContenxt);  useEffect(() =&gt; {    console.log("Foo render");  });  const onClickHandler = () =&gt; {    setAppContext((state) =&gt; ({ ...state, foo: "foo contenxt changed" }));  };  return (    &lt;div&gt;      {appContext.foo} &lt;button onClick={onClickHandler}&gt;foo button&lt;/button&gt;    &lt;/div&gt;  );}export default Foo;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/Bar.jsimport { useContext, useEffect } from "react";import { AppContenxt } from "./Context";function Bar() {  const [appContext] = useContext(AppContenxt);  useEffect(() =&gt; {    console.log("Bar render");  });  return &lt;div&gt;{appContext.bar}&lt;/div&gt;;}export default Bar;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-11-2-解决方案"><a href="#3-11-2-解决方案" class="headerlink" title="3.11.2 解决方案"></a>3.11.2 解决方案</h4><h5 id="1-拆分-Context"><a href="#1-拆分-Context" class="headerlink" title="1. 拆分 Context"></a>1. 拆分 Context</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/FooContext.jsimport { createContext, useState } from "react";export const FooContext = createContext();export function FooProvider({ children }) {  const [foo, setFoo] = useState("foo context");  return (    &lt;FooContext.Provider value={[foo, setFoo]}&gt;{children}&lt;/FooContext.Provider&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/BarContext.jsimport { createContext, useState } from "react";export const BarContext = createContext();export function BarProvider({ children }) {  const [bar, setBar] = useState("bar context");  return (    &lt;BarContext.Provider value={[bar, setBar]}&gt;{children}&lt;/BarContext.Provider&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/App.jsimport Bar from "./Bar";import Foo from "./Foo";import { BarProvider } from "./BarContext";import { FooProvider } from "./FooContext";function App() {  return (    &lt;&gt;      &lt;FooProvider&gt;        &lt;Foo /&gt;      &lt;/FooProvider&gt;      &lt;BarProvider&gt;        &lt;Bar /&gt;      &lt;/BarProvider&gt;    &lt;/&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/Foo.jsimport { useContext, useEffect } from "react";import { FooContext } from "./FooContext";function Foo() {  const [foo, setFoo] = useContext(FooContext);  useEffect(() =&gt; {    console.log("Foo render");  });  return (    &lt;div&gt;      {foo}      &lt;button onClick={() =&gt; setFoo("foo contenxt changed")}&gt;foo button&lt;/button&gt;    &lt;/div&gt;  );}export default Foo;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/Bar.jsimport { useContext, useEffect } from "react";import { BarContext } from "./BarContext";function Bar() {  const [bar] = useContext(BarContext);  useEffect(() =&gt; {    console.log("Bar render");  });  return &lt;div&gt;{bar}&lt;/div&gt;;}export default Bar;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-拆分组件"><a href="#2-拆分组件" class="headerlink" title="2. 拆分组件"></a>2. 拆分组件</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/Bar.jsimport { memo, useContext, useEffect } from "react";import { AppContenxt } from "./Context";const BarContext = memo((props) =&gt; {  useEffect(() =&gt; {    console.log("BarContext render");  });  return &lt;div&gt;{props.bar}&lt;/div&gt;;});function Bar() {  const [appContext] = useContext(AppContenxt);  return &lt;BarContext bar={appContext.bar} /&gt;;}export default Bar;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-缓存状态"><a href="#3-缓存状态" class="headerlink" title="3. 缓存状态"></a>3. 缓存状态</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useContext, useMemo } from "react";import { AppContenxt } from "./Context";function Bar() {  const [appContext] = useContext(AppContenxt);  const bar = appContext.bar;  return useMemo(() =&gt; {    console.log("bar render");    return &lt;div&gt;{bar}&lt;/div&gt;;  }, [bar]);}export default Bar;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-全局状态管理"><a href="#4-全局状态管理" class="headerlink" title="4. 全局状态管理"></a>4. 全局状态管理</h2><p>全局状态管理是组件状态管理的另一种思路，传统的组件状态由组件管理，组件状态在组件之间通过 props 传递，传递和更改状态使组件代码变得复杂。</p><p>全局状态管理是指组件状态被状态仓库集中管理，组件从仓库中获取状态，组件通过特定方式更改仓库中的状态。</p><p>全局状态管理使组件状态共享变得简单。</p><img src="/medias/assets/images/34.jpeg" align="left" width="60%"><h3 id="4-1-Redux"><a href="#4-1-Redux" class="headerlink" title="4.1 Redux"></a>4.1 Redux</h3><h4 id="4-1-1-概述"><a href="#4-1-1-概述" class="headerlink" title="4.1.1 概述"></a>4.1.1 概述</h4><p><a href="https://redux.js.org/">Redux</a> 是最为流行的用于实现全局状态管理的第三方库，它的核心功能是提供了状态管理规则以及相应的状态管理API。</p><p><a href="https://react-redux.js.org/">React Redux</a> 是和 Redux 配合使用的，它提供了组件获取状态的方式并在状态更新后更新组件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> redux@4.1.2 react-redux@7.2.6<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/medias/assets/images/35.png" align="left" width="80%"><h4 id="4-1-2-光速入门"><a href="#4-1-2-光速入门" class="headerlink" title="4.1.2 光速入门"></a>4.1.2 光速入门</h4><ol><li><p>创建用于存储状态的 Store 对象</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 从 redux 中导入 createStore 方法// createStore 方法用于创建存储状态的 Store 对象import { createStore } from "redux";// createStore 方法的第一个参数是一个函数, 函数函数返回什么, Store 中就存储什么, 我们通常将这个函数命名为 reducer// createStore 方法的第二个参数是状态的初始值// createStore 方法的返回值就是用于存储状态的 Store 对象const store = createStore(reducer, {count: 0});// 测试代码 -&gt; 获取 store 中存储的状态console.log(store.getState())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建用于返回状态的 reducer 函数</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// reducer 函数的第一个参数是状态// 状态的初始值就是通过 createStore 方法的第二个参数指定的// 目前状态的值是一个对象 对象中存储了 count 属性, 值为 0function reducer(state) {  // 返回状态, reducer 函数返回什么, Store 对象中就存储什么  return state;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>搭建”天梯”，通过”天梯”打通组件从 Store 对象中获取状态的通道</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 从 react-redux 中导入 Provider 组件// Provider 组件就是"天梯", 有了它组件就可以从 Store 对象中获取状态了import { Provider } from "react-redux";// 将天梯组件作为应用的根组件, 这样做以后应用中的任何组件就都可以从 Store 中获取状态了// 将 store 对象挂载到"天梯"中ReactDOM.render(  &lt;Provider store={store}&gt;    &lt;App /&gt;  &lt;/Provider&gt;,  document.getElementById("root"));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>组件从 Store 中获取状态并渲染状态</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 从 react-redux 中导入 useSelector 钩子函数// 它是用于从 Store 中获取状态的import { useSelector } from "react-redux";function App() {  // 在组件中调用 useSelector 方法从 Store 对象中获取状态  // 我们在调用 useSelector 方法时需要传递一个回调函数  // useSelector 方法内部在调用这个函数时通过参数的方式将状态传递给我们, 即当前代码中的 state 参数  // 我们在拿到 state 参数以后, 可以将它作为回调函数的返回值, 或者再从参数内部找到你想要的状态, 再作为返回值进行返回  // useSelector 方法的返回值就是回调函数的返回值, 就是我们想要获取的状态值  const count = useSelector((state) =&gt; state.count);  return &lt;div&gt;{count}&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在组件中通过 dispatch 方法发送更改状态的指令 ( action )</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 从 react-redux 导入 useDispatch 钩子函数// 该钩子函数用于在组件中获取 dispatch 方法import { useDispatch } from "react-redux";function App() {  // 在组件中通过调用 useDispatch 钩子函数获取 dispatch 方法  // dispatch 方法用于发送更改状态的指令  const dispatch = useDispatch();  // 在点击 div 时调用 dispatch 方法发送用于更改状态的指令  // 指令就是 action 对象, 通过 action 中的 type 属性描述要对状态进行怎样的操作  // type 属性的值由开发者自定义  return &lt;div onClick={() =&gt; dispatch({ type: "increment" })}&gt;{count}&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 reducer 中接收更改状态的指令并根据指令对状态进行更改</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// reducer 函数的第二个参数是 action 对象// 其实就是在调用 dispatch 方法时传递的参数对象 (用于描述如果更改状态的指令)function reducer(state, action) {  // 在 reducer 函数中对 action 对象中的 type 值进行匹配  // 不同的 type 值表示要对状态进行不同的操作  switch (action.type) {    // 如果 type 属性值时 "increment", 表示要对当前状态值进行 +1 操作    case "increment":      // 对状态进行操作并将操作结果作为 reducer 函数的返回值      // 返回新的状态, 表示更新 Store 对象中存储的状态值      // Store 中的状态被更新了会触发使用了该状态的组件的自动更新      // 注意: 不能对原有状态进行直接修改, 比如 return state.count + 1, 这样的代码不合规, 必须返回新状态对象      return {count: state.count + 1};    default:      // 如果所有的 action.type 都没有匹配上就默认返回当前状态值      // 切记 reducer 函数一定要有返回值      return state;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在发送更改状态的指令时传递参数，比如让状态加任意值，我传什么值它就加什么值</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  // 在 action 对象中除了可以有 type 属性以外, 还可以有其他的自定义属性及值  // 当前我们就添加一个自定义的 payload 属性作为参数, 值为 5  // 也就是说当点击 div 时, 让状态在当前值的基础上 +5  return (    &lt;div onClick={() =&gt; dispatch({ type: "increment", payload: 5 })}&gt;      {count}    &lt;/div&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">function reducer(state, action) {  switch (action.type) {    case "increment":      // 从 action 对象中获取 payload 参数,      // 将当前状态值和参数进行相加并返回结果      return {count: state.count + action.payload};  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="4-1-3-action-creator"><a href="#4-1-3-action-creator" class="headerlink" title="4.1.3 action creator"></a>4.1.3 action creator</h4><p>需求：在组件中添加两个按钮，点击第一个按钮时让数值 +5，点击第二个按钮时让数值 +10。</p><p>你的代码可能会很自然的写成下面这样：</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const count = useSelector((state) =&gt; state.count);  const dispatch = useDispatch();  return (    &lt;div&gt;      {count}      &lt;button onClick={() =&gt; dispatch({ type: "increment", payload: 5 })}&gt;        +5      &lt;/button&gt;      &lt;button onClick={() =&gt; dispatch({ type: "increment", payload: 10 })}&gt;        +10      &lt;/button&gt;    &lt;/div&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在以上代码中存在一个问题，就是多次调用了 dispatch 方法，每次调用它的都传递了 action 对象，而这个参数对象属于冗余代码，可以被简化。</p><p>按照思路我们可以将以上代码改成下面这样，为了简化代码，我们将 action 对象提取了出来。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const increment = { type: "increment", payload: 5 };function App() {  const count = useSelector((state) =&gt; state.count);  const dispatch = useDispatch();  return (    &lt;div&gt;      {count}      &lt;button onClick={() =&gt; dispatch(increment)}&gt;+5&lt;/button&gt;      &lt;button onClick={() =&gt; dispatch(increment)}&gt;+10&lt;/button&gt;    &lt;/div&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是改成这样以后，payload 属性的值就无法动态化了，所以为了传递参数，我们对代码做出了更改。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useDispatch, useSelector } from "react-redux";// action creator 函数: 返回 action 对象的函数const increment = (payload) =&gt; ({ type: "increment", payload });function App() {  const count = useSelector((state) =&gt; state.count);  const dispatch = useDispatch();  return (    &lt;div&gt;      {count}      &lt;button onClick={() =&gt; dispatch(increment(5))}&gt;+5&lt;/button&gt;      &lt;button onClick={() =&gt; dispatch(increment(10))}&gt;+10&lt;/button&gt;    &lt;/div&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在 Redux 中，返回 action 对象的函数被叫做 action creator 函数。</p><h4 id="4-1-4-combineReducers"><a href="#4-1-4-combineReducers" class="headerlink" title="4.1.4 combineReducers"></a>4.1.4 combineReducers</h4><p>目前在 store 中只存储了一个状态，当 store 中存储多个状态的时候会存在什么问题呢?</p><p>需求：新建 Message 组件，该组件负责发送消息，发送的消息需要被存储在 store 中。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/Message.jsimport { useRef } from "react";import { useDispatch, useSelector } from "react-redux";const saveMessage = (payload) =&gt; ({ type: "save_message", payload });function Message() {  // 和 input 进行绑定, 用于获取用户在文本框中输入的内容  const inputRef = useRef();  // 获取用于发送指令的 dispatch 方法  const dispatch = useDispatch();  // 从 store 中获取状态  const message = useSelector((state) =&gt; state.message);  // 用户发送 message 的方法  const onMessageSendHandler = () =&gt; dispatch(saveMessage(inputRef.current.value));  return (    &lt;&gt;      &lt;input ref={inputRef} /&gt;      &lt;button onClick={onMessageSendHandler}&gt;send&lt;/button&gt;      {message}    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/index.js// 在状态初始值中加入 messageexport const store = createStore(reducer, { count: 0, message: "" });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/index.jsfunction reducer(state, action) {  switch (action.type) {    case "increment":      // 在修改状态时, 要先获取到原有状态, 在原有状态的基础上创建新状态, 返回新状态      return { ...state, count: state.count + action.payload };    // 在 reducer 函数中加入处理 message 状态的代码    case "save_message":      return { ...state, message: action.payload };    default:      return state;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上代码存在两个问题，第一个是当状态变得庞大时 reducer 函数一定会变得庞大，第二个是 reducer 函数在处理多个不相关的状态。</p><p>为解决上述问题，为提高代码的可维护性，Redux 允许开发者对状态进行分类，通过编写多个 reducer 函数对不同的状态进行处理。</p><p>虽然 Redux 允许存在多个 reducer 函数，但最终 createStore 方法只接收一个，就是说 reducer 函数们最终要被合并，createStore 方法只接收合并结果。</p><p>第一步：对 reducer 函数进行拆分，将一个 reducer 函数拆分为多个 reducer 函数</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// counter 状态的初始值// 一个大的 reducer 函数被拆分成了多个小的 reducer 函数，每个 reducer 函数负责处理不同的状态// 每个 reducer 函数处理的状态又都会有初始值，由于原来的一个状态的初始值变成了现在的多个状态的初始// 所以这个初始值就不能通过 createStore 方法的第二个参数传递了// 所以现在状态的默认值改成了通过函数参数默认值的方式进行传递const counterInitialState = { count: 0 };// counterReducer 函数用于处理并返回和 counter 相关的状态function counterReducer(state = counterInitialState, action) {  switch (action.type) {    case "increment":      return { count: state.count + action.payload };    default:      return state;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">const messageInitialState = { value: "" };// messageReducer 函数用于处理并返回和 message 相关的状态function messageReducer(state = messageInitialState, action) {  switch (action.type) {    case "save_message":      return { value: action.payload };    default:      return state;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步：合并 reducer 函数，因为 createStore 方法要接收最终被合并之后的 reducer 函数。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// combineReducers 方法的参数是一个对象, 这个对象就是 Store 对象中存储的状态对象// 对象中的属性就是状态属性，属性值就是用于返回状态的 reducer 函数// 所以现在用于存储状态的 store 对象长成这样: {counter: {count: 0}, message: {value: ""}}// combineReducers 方法的返回值就是合并好的 reducer 函数, 我们可以将它传递给 createStore 方法// reducer 函数状态拆分是为了方便代码维护，reducer 函数合并是为了将 reducer 函数作为参数传递给 createStore 方法// {count: 0, message: ''}// {counter: {count: 0}, message: {value: ''}}const reducers = combineReducers({  counter: counterReducer,  message: messageReducer,});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 将合并之后的 rootReducer 函数作为 createStore 方法的参数// 同时去除原本的第二个参数, 状态初始值export const store = createStore(reducers);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在组件中重新获取状态，因为 store 对象中存储的数据层级发生了变化。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  const count = useSelector((state) =&gt; state.counter.count);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Message() {  const message = useSelector((state) =&gt; state.message.value);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-1-5-代码重构"><a href="#4-1-5-代码重构" class="headerlink" title="4.1.5 代码重构"></a>4.1.5 代码重构</h4><ol><li><p>在 src 目录下创建 state 文件夹，用于存放和全局状态相关的代码。</p></li><li><p>在 state 目录下创建 reducers 文件夹用于存放 reducer 函数</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/reducers/counter.jsconst initialState = { count: 0 };export default function counterReducer(state = initialState, action) {  switch (action.type) {    case "increment":      return { count: state.count + action.payload };    default:      return state;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/reducers/message.jsconst initialState = { value: "" };export default function messageReducer(state = initialState, action) {  switch (action.type) {    case "save_message":      return { value: action.payload };    default:      return state;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/reducers/index.jsimport { combineReducers } from "redux";import counterReducer from "./counter";import messageReducer from "./message";const rootReducer = combineReducers({  counter: counterReducer,  message: messageReducer,});export default rootReducer;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 state 目录新建 store.js 文件，用于存放创建 store 对象的代码。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/store.jsimport { createStore } from "redux";import reducers from "./reducers";export const store = createStore(reducers);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 store 目录下创建 action-creators 文件夹，用于存放 action creator 代码</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/action-creators/counter.jsexport const increment = (payload) =&gt; ({ type: "increment", payload });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/action-creators/message.jsexport const saveMessage = (payload) =&gt; ({ type: "save_message", payload });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/action-creators/index.jsexport * from "./counter";export * from "./message";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在 state 目录下新建 index.js 文件，作为 state 文件夹下模块的导入口</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">export * as actionCreators from "./action-creators";export * from "./store";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在应用入口文件中导入 store</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { store } from "./state";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在组件中导入 action creator</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { increment } from "./state";import { saveMessage } from "./state";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="4-1-6-actionType-常量"><a href="#4-1-6-actionType-常量" class="headerlink" title="4.1.6 actionType 常量"></a>4.1.6 actionType 常量</h4><p>action 对象中的 type 属性值是一个字符串，我们要将它抽象成常量值，为什么呢？</p><ol><li>防止字符串书写错误，因为这个字符串既在 action creator 函数中用到，又在 reducer 函数中用到，而字符串在代码编辑器中是没有提示的。</li><li>方便修改，在后续的代码编辑中，很可能认识到之前定义的值不合适。</li></ol><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/action-types/counter.jsexport const INCREMENT = "increment";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/action-types/message.jsexport const SAVE_MESSAGE = "save_message";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/action-creators/counter.jsimport { INCREMENT } from "../action-types/counter";export const increment = (payload) =&gt; ({ type: INCREMENT, payload });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/action-creators/message.jsimport { SAVE_MESSAGE } from "../action-types/message";export const saveMessage = (payload) =&gt; ({ type: SAVE_MESSAGE, payload });<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/reducers/counter.jsimport { INCREMENT } from "../action-types/counter";export default function counterReducer(state = initialState, action) {  switch (action.type) {    case INCREMENT:  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/reducers/message.jsimport { SAVE_MESSAGE } from "../action-types/message";export default function messageReducer(state = initialState, action) {  switch (action.type) {    case SAVE_MESSAGE:  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-7-bindActionCreators"><a href="#4-1-7-bindActionCreators" class="headerlink" title="4.1.7 bindActionCreators"></a>4.1.7 bindActionCreators</h4><p>组件：每个组件只要获取状态就都需要获取 dispatch，都需要导入 actionCreator 并传入 dispatch。此处代码可以通过 <code>bindActionCreators</code> 方法简化。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useDispatch } from "react-redux";import { bindActionCreators } from "redux";import { actionCreators } from "../state";export const useActions = () =&gt; {  const dispatch = useDispatch();  return bindActionCreators(actionCreators, dispatch);};/** * actionCreators 是一个对象，对象中存储了所有的 action creator 函数 * actionCreators =&gt; {increment: (){}, save_message: () {}} * bindActionCreators =&gt; {increment: dispatch(increment)} */<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-8-中间件函数"><a href="#4-1-8-中间件函数" class="headerlink" title="4.1.8 中间件函数"></a>4.1.8 中间件函数</h4><h5 id="1-中间件函数概述"><a href="#1-中间件函数概述" class="headerlink" title="1. 中间件函数概述"></a>1. 中间件函数概述</h5><p>默认的 Redux 工作流程只能处理同步状态，但在实际的项目开发中状态的获取、更新、删除等都需要通过异步来实现，那么如何在 Redux 中实现异步呢？</p><p>Redux 提供了中间件机制供开发者处理副作用代码，中间件其实就是一堆依次执行的函数，一堆供开发者执行副作用的函数。</p><img src="/medias/assets/images/37.png" align="left" width="50%"><p>创建中间件函数要遵循中间件函数的创建规则，以下是创建中间件函数的模板代码。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">middleware</span><span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">// 注意: 当 Action 被触发后，执行的是最里层函数，外层函数是用来传递参数的，只有初始化时执行。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-创建中间件函数"><a href="#2-创建中间件函数" class="headerlink" title="2. 创建中间件函数"></a>2. 创建中间件函数</h5><p>需求：创建一个用于输出 action 对象的中间件函数，当组件调用 dispatch 方法发送指令时，在控制台输出指令 action 对象。</p><p><code>src/store/middlewares/logger.js</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// logger 是中间件的名字, 它的作用是当组件发送操作状态的指令action对象时, 在控制台中输出该 action 对象</span><span class="token keyword">const</span> <span class="token function-variable function">logger</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">store</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// store, 对象类型, store.dispatch、store.getState</span>  <span class="token comment">// 中间件函数内部的自定义逻辑</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 当前的中间件函数执行完成后必须调用 next 方法, 使 redux 流程继续向前走, 否则代码会卡在当前函数中.</span>  <span class="token comment">// 调用 next 方法时必须将 action 对象作为参数, 否则下一个中间件函数或者 reducer 就不知道当前要做什么事情了.</span>  <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> logger<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-注册中间件函数"><a href="#3-注册中间件函数" class="headerlink" title="3. 注册中间件函数"></a>3. 注册中间件函数</h5><p><code>src/store/index.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { applyMiddleware } from "redux";import logger from "./middlewares/logger";export const store = createStore(rootReducer, applyMiddleware(logger));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>中间件函数是可以批量注册的，当存在多个中间件时，中间函数是按照 applyMiddleware 方法的参数顺序执行的。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import logger from "./middlewares/logger";import speak from "./middlewares/speak";// 先执行 speak, 后执行 loggerexport const store = createStore(rootReducer, applyMiddleware(speak, logger));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/medias/assets/images/36.png" align="left" width="50%"><h5 id="4-状态调试工具"><a href="#4-状态调试工具" class="headerlink" title="4. 状态调试工具"></a>4. 状态调试工具</h5><ol><li><p>在谷歌浏览器中安装 <a href="https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=zh-CN">Redux DevTools</a></p></li><li><p>在应用中安装 <code>redux-devtools-extension</code> </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> redux-devtools-extension<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在应用中进行配置以开启调试工具</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> composeWithDevTools <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'redux-devtools-extension'</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> <span class="token function">composeWithDevTools</span><span class="token punctuation">(</span><span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="4-1-9-redux-thunk"><a href="#4-1-9-redux-thunk" class="headerlink" title="4.1.9 redux-thunk"></a>4.1.9 redux-thunk</h4><h5 id="1-基本使用"><a href="#1-基本使用" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h5><p>redux-thunk 是 Redux 官方提供的用于在 Redux 工作流程中加入异步代码的中间件。</p><p>需求：向 npm 发送请求加载 npm 包列表信息。</p><p>第一步：下载 redux-thunk 中间件</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> redux-thunk axios<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二步：注册 redux-thunk 中间件</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/store.jsimport { applyMiddleware } from "redux";import thunk from "redux-thunk";export const store = createStore(reducers, applyMiddleware(thunk));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：设计并定义 Action Type</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/action-types/packages.action.type.jsexport const SEARCH_PACKAGES = "search_packages";export const SEARCH_PACKAGES_SUCCESS = "search_packages_success";export const SEARCH_PACKAGES_ERROR = "search_packages_error";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第四步：在 Reducer 函数中匹配 Action Type 并返回对应的新状态</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/reducers/packages.reducer.jsimport {   SEARCH_PACKAGES,   SEARCH_PACKAGES_SUCCESS,   SEARCH_PACKAGES_ERROR } from "../action-types/packages.action.type.js";const initialState = {  list: [],  loading: false,  error: null,};export default function packagesReducer(state = initialState, action) {  switch (action.type) {    case SEARCH_PACKAGES:      return {        loading: true,        error: null,        list: [],      };    case SEARCH_PACKAGES_SUCCESS:      return {        loading: false,        error: null,        list: action.payload,      };    case SEARCH_PACKAGES_ERROR:      return {        loading: false,        error: action.error,        list: [],      };    default:      return state;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第五步：将 packagesReducer 合并到根 reducer</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import packagesReducer from "./packages"export const reducers = combineReducers({  packages: packagesReducer,});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第六步：创建 Action Creator 函数并在其中完成异步逻辑</p><p>在使用了 Redux Thunk 中间件以后，dispatch 方法可以接收一个函数作为参数，也就是说在 Action Creator 函数中可以再返回一个函数，我们需要在这个函数中完成异步操作，在该函数中根据异步流程更改 Store 中对应的状态。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/action-creators/packages.action.creator.jsimport axios from "axios";import {  SEARCH_PACKAGES,  SEARCH_PACKAGES_ERROR,  SEARCH_PACKAGES_SUCCESS,} from "../action-types/packages.action.type";export const searchPackages = (key) =&gt; async (dispatch) =&gt; {  dispatch({ type: SEARCH_PACKAGES });  try {    const { data } = await axios.get(`https://registry.npmjs.org/-/v1/search`, {      params: {        text: key,      },    });    dispatch({      type: SEARCH_PACKAGES_SUCCESS,      payload: data.objects.map((item) =&gt; item.package.name),    });  } catch (error) {    dispatch({ type: SEARCH_PACKAGES_ERROR, error: error.message });  }};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第七步：在组件中实现对 npm 包的搜索</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useRef } from "react";import { useDispatch, useSelector } from "react-redux";import { searchPackages } from "./state/action-creators/packages.action.creator";export default function App() {  const dispatch = useDispatch();  const packages = useSelector((state) =&gt; state.packages);  const inputRef = useRef();  const getPackages = () =&gt; {    if (packages.loading) {      return &lt;div&gt;loading...&lt;/div&gt;;    }    if (packages.error) {      return &lt;div&gt;{packages.error}&lt;/div&gt;;    }    return (      &lt;div&gt;        &lt;pre&gt;{JSON.stringify(packages, null, 2)}&lt;/pre&gt;      &lt;/div&gt;    );  };  return (    &lt;&gt;      &lt;input type="text" ref={inputRef} /&gt;      &lt;button onClick={() =&gt; dispatch(searchPackages(inputRef.current.value))}&gt;        search      &lt;/button&gt;      {getPackages()}    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-实现原理"><a href="#2-实现原理" class="headerlink" title="2. 实现原理"></a>2. 实现原理</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">// createThunkMiddleware 方法用于返回中间件函数function createThunkMiddleware(extraArgument) {  // 返回中间件函数  return ({ dispatch, getState }) =&gt; next =&gt; action =&gt; {    // 如果 action 是函数类型    if (typeof action === 'function') {      // 调用函数并传递相关参数      return action(dispatch, getState, extraArgument);    }    // 如果 action 是对象类型, 调用 next 执行下一个中间件函数    return next(action);  };}// 调用 createThunkMiddleware 得到中间件函数const thunk = createThunkMiddleware();// 暴露获取中间件函数的方法, 用于方便开发者自己传递 extraArgument 参数thunk.withExtraArgument = createThunkMiddleware;// 导出默认创建好的 thunk 中间件函数export default thunk;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-10-redux-saga"><a href="#4-1-10-redux-saga" class="headerlink" title="4.1.10 redux-saga"></a>4.1.10 redux-saga</h4><p><a href="https://redux-saga.js.org/">redux-saga</a> 可以将异步操作从 Action Creator 文件中抽离出来，放在一个单独的文件中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> redux-saga<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">export const SEARCH_PACKAGES = "search_packages";export const SEARCH_PACKAGES_SUCCESS = "search_packages_success";export const SEARCH_PACKAGES_ERROR = "search_packages_error";<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { SEARCH_PACKAGES, SEARCH_PACKAGES_ERROR, SEARCH_PACKAGES_SUCCESS } from "../action-types/packages";export const search_packages = (payload) =&gt; ({type: SEARCH_PACKAGES,payload});export const search_packages_success = (payload) =&gt; ({type: SEARCH_PACKAGES_SUCCESS, payload});export const search_packages_error = (error) =&gt; ({type: SEARCH_PACKAGES_ERROR, error});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import axios from "axios";import { put, takeEvery } from "redux-saga/effects";import { search_packages_error, search_packages_success } from "../action-creators/packages";import { SEARCH_PACKAGES } from "../action-types/packages";function* searchPackages(action) {  try {    const { data } = yield axios.get(`https://registry.npmjs.org/-/v1/search`, {      params: {        text: action.payload,      },    });    yield put(      search_packages_success(data.objects.map((item) =&gt; item.package.name))    );  } catch (error) {    yield put(search_packages_error(error));  }}// reducer 和 saga 可以同时匹配同一个 action, reducer 先接收, saga 后接收export default function* packageSaga() {  yield takeEvery(SEARCH_PACKAGES, searchPackages);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { SEARCH_PACKAGES, SEARCH_PACKAGES_ERROR, SEARCH_PACKAGES_SUCCESS } from "../action-types/packages";const initialState = {  list: [],  loading: false,  error: null,};export default function packagesReducer(state = initialState, action) {  switch (action.type) {    case SEARCH_PACKAGES:      return {        loading: true,        error: null,        list: [],      };    case SEARCH_PACKAGES_SUCCESS:      return {        loading: false,        error: null,        list: action.payload,      };    case SEARCH_PACKAGES_ERROR:      return {        loading: false,        error: action.error,        list: [],      };    default:      return state;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useRef } from "react";import { useDispatch, useSelector } from "react-redux";import { search_packages } from "../state/action-creators/packages";function Packages() {  const inputRef = useRef();  const dispatch = useDispatch();  const packages = useSelector((state) =&gt; state.packages.list);  const onClickHandler = () =&gt; {    dispatch(search_packages(inputRef.current.value));  };  return (    &lt;&gt;      &lt;input type="text" ref={inputRef} /&gt;      &lt;button onClick={onClickHandler}&gt;search&lt;/button&gt;      &lt;pre&gt;{JSON.stringify(packages, null, 2)}&lt;/pre&gt;    &lt;/&gt;  );}export default Packages;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 合并 sagaimport { all } from "redux-saga/effects";import packageSaga from "./packages";export default function* sagas() {  yield all([packageSaga()]);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import createSagaMiddleware from "redux-saga";import sagas from "./sagas";const sagaMiddleware = createSagaMiddleware();export const store = createStore(reducers, applyMiddleware(sagaMiddleware));sagaMiddleware.run(sagas);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-1-11-redux-actions"><a href="#4-1-11-redux-actions" class="headerlink" title="4.1.11 redux-actions"></a>4.1.11 redux-actions</h4><p>Redux流程中大量的样板代码读写很痛苦，使用<a href="https://redux-actions.js.org/">redux-actions</a>可以简化Action和Reducer的处理。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save redux-actions<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { createAction } from "redux-actions";// createAction 方法用于创建 Action Creator 函数// 它在 reducer 函数中也用于 action 对象类型的匹配export const increment = createAction("increment");// increment() -&gt; {type: "increment"}// increment(1) -&gt; {type: "increment", payload: 1}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { handleActions as createReducer } from "redux-actions";import { increment } from "../action-creators/counter";const initialState = { count: 0 };// createReducer 函数用于创建 reducer 函数// 它的理念是对原有的 reducer 函数中的 switch case 进行拆分, 拆分为多个小的函数const counterReducer = createReducer(  {    [increment]: (state, action) =&gt; ({      ...state,      count: state.count + action.payload,    }),  },  initialState);export default counterReducer;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-2-ReduxToolkit"><a href="#4-2-ReduxToolkit" class="headerlink" title="4.2 ReduxToolkit"></a>4.2 ReduxToolkit</h3><h4 id="4-2-1-概述"><a href="#4-2-1-概述" class="headerlink" title="4.2.1 概述"></a>4.2.1 概述</h4><img src="/medias/assets/images/39.png"><p>ReduxTookit 是 Redux 官方推出的基于 Redux 进行高度封装的工具包，降低了 Redux 的使用难度，使开发者能够用更少的代码完成更多的工作。</p><p>ReduxTookit 提供了强大且丰富状态编辑方法，进一步增强了 Redux 对状态进行处理的能力。</p><p>ReduxTookit 简化了创建、配置 Store 的各种和应用逻辑无关的代码，比如配置调试工具的代码，配置中间件的代码等等。</p><p>ReduxTookit 集成了常用的 Redux 中间件，不需要开发者单独下载，单独配置。</p><h4 id="4-2-2-下载-ReduxToolkit"><a href="#4-2-2-下载-ReduxToolkit" class="headerlink" title="4.2.2 下载 ReduxToolkit"></a>4.2.2 下载 ReduxToolkit</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 新项目</span><span class="token comment"># Redux + Plain JS template</span>npx create-react-app my-app --template redux<span class="token comment"># Redux + TypeScript template</span>npx create-react-app my-app --template redux-typescript<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 现有项目</span><span class="token function">npm</span> <span class="token function">install</span> @reduxjs/toolkit react-redux<span class="token function">yarn</span> <span class="token function">add</span> @reduxjs/toolkit react-redux<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-2-3-createAction"><a href="#4-2-3-createAction" class="headerlink" title="4.2.3 createAction"></a>4.2.3 createAction</h4><p>createAction 方法用于创建 action creator 函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@reduxjs/toolkit"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token string">"counter/increment"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// increment() =&gt; {type: "counter/increment"}</span><span class="token keyword">export</span> <span class="token keyword">const</span> decrement <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token string">"counter/decrement"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// decrement() =&gt; {type: "counter/decrement"}</span><span class="token keyword">export</span> <span class="token keyword">const</span> incrementByCount <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token string">"counter/incrementByCount"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// incrementByCount(5) =&gt; {type: "counter/incrementByCount", payload: 5}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-4-creatReducer"><a href="#4-2-4-creatReducer" class="headerlink" title="4.2.4 creatReducer"></a>4.2.4 creatReducer</h4><p>createReducer 方法用于创建 reducer 函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建 reducer 函数的第一种写法</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@reduxjs/toolkit"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> decrement<span class="token punctuation">,</span> increment<span class="token punctuation">,</span> incrementByCount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../actions/counter.action"</span><span class="token punctuation">;</span><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> counterReducer <span class="token operator">=</span> <span class="token function">createReducer</span><span class="token punctuation">(</span>initialState<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">builder</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  builder    <span class="token punctuation">.</span><span class="token function">addCase</span><span class="token punctuation">(</span>increment<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addCase</span><span class="token punctuation">(</span>decrement<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addMatcher</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>          action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"counter/incrementByCount"</span> <span class="token operator">&amp;&amp;</span>          <span class="token keyword">typeof</span> action<span class="token punctuation">.</span>payload <span class="token operator">===</span> <span class="token string">"number"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>        count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">addDefaultCase</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建 reducer 函数的第二种写法</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@reduxjs/toolkit"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> decrement<span class="token punctuation">,</span> increment<span class="token punctuation">,</span> incrementByCount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../actions/counter.action"</span><span class="token punctuation">;</span><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> counterReducer <span class="token operator">=</span> <span class="token function">createReducer</span><span class="token punctuation">(</span>initialState<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>increment<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>decrement<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>incrementByCount<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建 reducer 函数的第三种写法</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@reduxjs/toolkit"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> decrement<span class="token punctuation">,</span> increment<span class="token punctuation">,</span> incrementByCount <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../actions/counter.action"</span><span class="token punctuation">;</span><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> counterReducer <span class="token operator">=</span> <span class="token function">createReducer</span><span class="token punctuation">(</span>  initialState<span class="token punctuation">,</span>  <span class="token comment">// normal reducer</span>  <span class="token punctuation">{</span>    <span class="token punctuation">[</span>increment<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span>decrement<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment">// matcher reducer</span>  <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token function-variable function">matcher</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>          action<span class="token punctuation">.</span>type <span class="token operator">===</span> <span class="token string">"counter/incrementByCount"</span> <span class="token operator">&amp;&amp;</span>          <span class="token keyword">typeof</span> action<span class="token punctuation">.</span>payload <span class="token operator">===</span> <span class="token string">"number"</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token function-variable function">reducer</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> action<span class="token punctuation">.</span>payload <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment">// default reducer</span>  <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 创建 reducer 函数的第四种写法</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@reduxjs/toolkit"</span><span class="token punctuation">;</span><span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span> count<span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> counterReducer <span class="token operator">=</span> <span class="token function">createReducer</span><span class="token punctuation">(</span>initialState<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token string">"counter/increment"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">"counter/decrement"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token string">"counter/incrementByCount"</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    count<span class="token operator">:</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-5-configureStore"><a href="#4-2-5-configureStore" class="headerlink" title="4.2.5 configureStore"></a>4.2.5 configureStore</h4><p>configureStore 方法用于创建 store 对象。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 导入 configureStore 方法, 用于创建、配置 store 对象</span><span class="token keyword">import</span> <span class="token punctuation">{</span> configureStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@reduxjs/toolkit"</span><span class="token punctuation">;</span><span class="token comment">// 导入 counterReducer 函数, 用于配置 store 对象</span><span class="token keyword">import</span> counterReducer <span class="token keyword">from</span> <span class="token string">"./reducers/counter.reducer"</span><span class="token punctuation">;</span><span class="token comment">// 创建、配置、导出 store 对象</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// 是否开启浏览器的 redux 开发者调试工具</span>  devTools<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">"production"</span><span class="token punctuation">,</span>  <span class="token comment">// reducer 选项用于替换原有的 combineReducers 方法, 用于合并应用中的多个 reducer 函数, 组成最终的 Store 对象</span>  reducer<span class="token operator">:</span> <span class="token punctuation">{</span>    counter<span class="token operator">:</span> counterReducer<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-6-createSlice"><a href="#4-2-6-createSlice" class="headerlink" title="4.2.6 createSlice"></a>4.2.6 createSlice</h4><p>ReduxToolkit 中的状态切片指的是管理状态、处理状态的地方，就是说原本 Redux 中由 Reducer 函数做的事情现在由状态切片来做。</p><p>ReduxToolkit 中可以有很多状态切片，每个状态切片负责处理一类状态，就是说原本 Redux 中的众多小的 Reducer 函数现在变成了众多小的状态切片。</p><p>ReduxToolkit 中的状态切片是 Reducer 函数的升级，创建状态切片的 API 会返回 Action Creators 函数和 Reducer 函数，使开发者可以专注于状态的管理。</p><p><code>store/todos.slice.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// createSlice: 用于创建状态切片import { createSlice } from "@reduxjs/toolkit";// actions: 对象类型, 用于存储 action creator 函数, 函数名字和 reducers 配置选项中 reducer 函数的名字相对应const { actions, reducer: TodoReducer } = createSlice({  // createSlice 方法将会返回 action creator 函数, action creator 函数将要返回 action 对象  // 按照约定, action 对象中的 type 属性值应该由两部分组成, 第一部分表示你要处理什么状态, 第二部分表示你要对该状态进行什么处理  // 这样约定的目的是为了让代码看起来更加的清晰 {type: "todos/addTodo"}  // name 属性配置的就是 action 对象中 type 属性值的一部分, 表示你要对什么状态进行处理  name: "todos",  // initialState 配置的是当前状态切片中状态的初始值  initialState: [],  // reducers 对象中配置的是对状态进行处理的 reducer 函数  // 在原本的 reducer 函数中, 对状态进行的不同的处理是通过 switch case 语句匹配 action.type 属性实现的  // ReduxToolkit 将原本的 switch case 抽象成了多个 reducer 函数, 每个 reducer 函数对应的就是原本 switch case 中的一种情况  // 在 ReduxToolkit 中 reducer 函数的名字会作为 action 对象中 type 属性值的第二部分, 这样的话就形成了完整的 type 属性值了  reducers: {    // 添加任务    addTodo(state, action) {      // 在 ReduxToolkit 中的 reducer 函数里, 可以直接对状态进行处理, 不必拷贝新的状态再对其进行处理      // 因为 ReduxToolkit 内部集成了不可变数据结构, 此处操作不会改变原有状态      // 状态处理完成后也不必显式的在 reducer 函数中返回新的处理后的状态, 内部会帮助我们使用新状态替换旧状态      // action.payload 是 ReduxToolkit 为 action 对象添加的属性, 属性值是调用 action creator 函数时传递的参数      state.push(action.payload);    },  },});// 导出 action creator 函数, 供组件使用export const { addTodo } = actions;// 导出 reducer 函数, 因为在后续的代码中还是要合并 reducer 函数export default TodoReducer;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-7-prepare"><a href="#4-2-7-prepare" class="headerlink" title="4.2.7 prepare"></a>4.2.7 prepare</h4><p>当 Action 指令被发出后，ReduxToolkit 允许开发者在 Reducer 函数接收 Action 之前预先对 Action 对象中的 payload 属性值进行预处理。</p><p>这样做的目的是抽离组件中和组件无关的逻辑，净化组件代码。</p><p><code>store/todos.slice.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { nanoid } from "@reduxjs/toolkit";createSlice({  reducers: {    addTodo: {      reducer(state, action) {        state.push(action.payload);      },      prepare(payload) {        return {          payload: { ...payload,  id: nanoid(), date: new Date },        };      },    },  },});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-8-createAsyncThunk"><a href="#4-2-8-createAsyncThunk" class="headerlink" title="4.2.8 createAsyncThunk"></a>4.2.8 createAsyncThunk</h4><p>通过实现 <code>加载服务端任务列表</code> 功能学习 ReduxToolkit 是如何在工作流程中加入异步功能的。</p><p><code>src/store/todos.slice.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 导入 createAsyncThunk 方法, 用于处理异步代码import { createAsyncThunk } from "@reduxjs/toolkit";// 导入 axios 对象, 用于发送 Ajax 请求import axios from "axios";// 调用 createAsyncThunk 方法, 用于处理异步代码// createAsyncThunk 方法的第一个参数是 action 对象中 type 属性值的前缀, 按照约定, 异步 action 的 type 属性值由三部分构成// 第一部分表示要对什么状态进行处理, 第二部分表示对状态进行什么处理, 第三部分表示对状态处理的过程进行到哪一步了// 等待: todos/loadTodos/pending, 成功: todos/loadTodos/fulfilled, 失败: todos/loadTodos/rejected// createAsyncThunk 方法的第二个参数是函数类型, 用于放置步代码// 该参数函数有一个 payload 参数, 是调用 action creator 函数时传递的参数// createAsyncThunk 方法的返回值是 action creator 函数, 调用它并将返回值传递给 dispatch, 可以触发该异步操作的执行export const loadTodos = createAsyncThunk("todos/loadTodos", (payload) =&gt; {  // 异步操作成功, 返回异步操作结果, 它将会被作为 fulfilled action 的 payload  // 异步操作失败, 抛出异常, 它将会作为 rejected action 的 error  try {    return axios.get(payload).then((response) =&gt; response.data);  } catch (error) {    throw new Error("自定义错误信息");  }});const { actions, reducer: TodoReducer } = createSlice({  // 通过 extraReducers 配置项处理异步 action   extraReducers: {    // 等待    [loadTodos.pending]() {      console.log("loadTodos.pending");    },    // 成功    [loadTodos.fulfilled](state, action) {      // action.payload: 存储异步操作成功的结果      action.payload.forEach((todo) =&gt; state.push(todo));    },    // 失败    [loadTodos.rejected](state, action) {      // action.error: 存储异步操作失败的原因      console.log("loadTodos.rejected");    },  },});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>src/components/TodoMain.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useEffect } from "react";import { useDispatch } from "react-redux";import { loadTodos } from "../store/todos.slice";function TodoMain() {  const dispatch = useDispatch();  useEffect(() =&gt; {    dispatch(loadTodos("http://localhost:3001/todos"));  }, [dispatch]);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-9-feature-key"><a href="#4-2-9-feature-key" class="headerlink" title="4.2.9 feature_key"></a>4.2.9 feature_key</h4><p>关于状态名称字符串，在多个地方被用到，比如设置状态名称前缀时，创建异步 Action Creator 时，在创建 Store 对象时，在组件中获取状态时，为了保持应用代码的可维护性，ReduxToolkit 官方推荐我们将它抽取成一个常量，然后在每个地方都使用这个常量，当常量值发生变化时每个使用的地方都会得到同步，不会轻易导致程序报错。</p><p><code>src/store/todos.slice.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">export const TODO_FEATURE_KEY = "todos";<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">createSlice({  name: TODO_FEATURE_KEY,});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">createAsyncThunk(  `${TODO_FEATURE_KEY}/loadTodos`);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>src/store/index.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">export default configureStore({  reducer: {    [TODO_FEATURE_KEY]: TodoReducer,  }});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>src/components/TodoMain.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function TodoMain() {  const todos = useSelector((state) =&gt; state[TODO_FEATURE_KEY]);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-2-10-middleware"><a href="#4-2-10-middleware" class="headerlink" title="4.2.10 middleware"></a>4.2.10 middleware</h4><p>在 configureStore 方法的配置对象中，ReduxToolkit 提供了 middleware 选项用来配置中间件，它的值是一个函数，函数中要返回包含中间件的数组。</p><p>ReduxToolkit 默认内置了一些中间件，在 middleware 函数的返回值中要包含内置中间件，内置中间件通过函数参数获取。</p><p><code>src/store/index.js</code></p><p><code>npm i redux-logger</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import logger from "redux-logger";export default configureStore({  middleware: (getDefaultMiddeware) =&gt; {    return getDefaultMiddeware().concat(logger);  },});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-11-实体适配器"><a href="#4-2-11-实体适配器" class="headerlink" title="4.2.11 实体适配器"></a>4.2.11 实体适配器</h4><h5 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h5><p>实体指的就是状态，可以将实体适配器理解为状态适配器。</p><p>实体适配器是对象类型，开发者必须按照要求的格式将状态存储在其中，实体适配器会提供操作状态的快捷方法，以简化 reducer 中对状态的操作代码。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">{  // The unique IDs of each item. Must be strings or numbers  ids: []  // A lookup table mapping entity IDs to the corresponding entity objects  entities: {}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">{  ids: [1,2,3],  entities: {    1: { "id": 1, "title": "吃饭", "isCompleted": false },    2: { "id": 2, "title": "睡觉", "isCompleted": false },    3: { "id": 3, "title": "打豆豆", "isCompleted": false }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-创建实体适配器"><a href="#2-创建实体适配器" class="headerlink" title="2. 创建实体适配器"></a>2. 创建实体适配器</h5><p><code>src/store/todos.slice.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// createEntityAdapter: 用于创建实体适配器对象import { createEntityAdapter } from "@reduxjs/toolkit";// 创建用于存储 todo 任务列表的实体适配器const todosAdapter = createEntityAdapter();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-应用实体适配器"><a href="#3-应用实体适配器" class="headerlink" title="3. 应用实体适配器"></a>3. 应用实体适配器</h5><p><code>src/store/todos.slice.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const { actions, reducer: TodoReducer } = createSlice({  // 将实体适配器的初始值作为状态切片的初始状态  initialState: todosAdapter.getInitialState(),  reducers: {    addTodo: {      reducer(state, action) {        // 向实体适配器中添加一条状态        todosAdapter.addOne(state, action);      }    },  },  extraReducers: {    [loadTodos.fulfilled](state, action) {      // 向实体适配器中添加多条状态      todosAdapter.addMany(state, action);    },  },});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>src/components/TodoMain.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function TodoMain() {  const todos = useSelector((state) =&gt; state[TODO_FEATURE_KEY].entities);  return (    &lt;ul className="todo-list"&gt;      {Object.values(todos).map((item) =&gt; ())}    &lt;/ul&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在实体操作方法的部它会判断如果方法接受到的第二个参数为 <code>action</code>，它会直接找到 action 对象中的 <code>payload</code>属性值，使用它和 <code>state</code> 对象进行交互，所以调用实体操作方法的代码可以简化为以下形式： </p><pre class="line-numbers language-react" data-language="react"><code class="language-react">createSlice({  reducers: {    addTodo: {      reducer: todosAdaptor.addOne,    },  },  extraReducers: {    [loadTodos.fulfilled]: todosAdaptor.addMany  },});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-2-12-状态选择器"><a href="#4-2-12-状态选择器" class="headerlink" title="4.2.12 状态选择器"></a>4.2.12 状态选择器</h4><p>状态选择器用于从 store 对象中获取状态并将状态的格式转换为开发者想要的。</p><p><code>src/store/todos.slice.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { createSelector } from "@reduxjs/toolkit";const { selectAll } = todosAdaptor.getSelectors();export const selectTodos = createSelector(  (state) =&gt; state[TODO_FEATURE_KEY],  selectAll);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>src/components/TodosMain.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { loadTodos, selectTodos } from "../store/todos.slice";const todos = useSelector(selectTodos);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="4-2-13-RTK-Query"><a href="#4-2-13-RTK-Query" class="headerlink" title="4.2.13 RTK Query"></a>4.2.13 RTK Query</h4><h5 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1. 概述"></a>1. 概述</h5><p>RTK Query 是一个强大的状态获取和缓存工具，它可以简化 Redux 应用程序中的状态获取与缓存逻辑。</p><p>当从服务器端同步状态时，RTK Query 会将状态作为”缓存”存储在 Redux 存储中。</p><p>当对相同的状态执行额外的请求时，RTK Query 将提供现有的缓存数据，而不是向服务器端再次发送请求。</p><h5 id="2-createApi"><a href="#2-createApi" class="headerlink" title="2. createApi"></a>2. createApi</h5><p>通过 createApi 方法可以创建 API 状态切片，它用于定义请求、返回用于在组件中使用的同步状态的钩子函数。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// src/state/services/api.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createApi<span class="token punctuation">,</span> fetchBaseQuery <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@reduxjs/toolkit/query/react"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> apiService <span class="token operator">=</span> <span class="token function">createApi</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment">// 设置状态存储在 store 中的名字</span>  reducerPath<span class="token operator">:</span> <span class="token string">"api"</span><span class="token punctuation">,</span>  <span class="token comment">// baseQuery 选项用于设置请求的公共配置</span>  baseQuery<span class="token operator">:</span> <span class="token function">fetchBaseQuery</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">// 请求基准 URL</span>    baseUrl<span class="token operator">:</span> <span class="token string">"http://jsonplaceholder.typicode.com/"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">endpoints</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">builder</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-配置-store"><a href="#3-配置-store" class="headerlink" title="3. 配置 store"></a>3. 配置 store</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// src/state/store.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> configureStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@reduxjs/toolkit"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> apiService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"./services"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  reducer<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>apiService<span class="token punctuation">.</span>reducerPath<span class="token punctuation">]</span><span class="token operator">:</span> apiService<span class="token punctuation">.</span>reducer<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">middleware</span><span class="token punctuation">(</span><span class="token parameter">getDefaultMiddles</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getDefaultMiddles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>apiService<span class="token punctuation">.</span>middleware<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-定义获取状态的逻辑"><a href="#4-定义获取状态的逻辑" class="headerlink" title="4. 定义获取状态的逻辑"></a>4. 定义获取状态的逻辑</h5><p>正常来说，请求的定义要写在 endpoints 选项中，但是为了进行代码拆分，我们要根据不同类型的状态将其对应的请求定义拆分到不同的文件中。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// src/state/services/todo.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> apiService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"."</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> todoService <span class="token operator">=</span> apiService<span class="token punctuation">.</span><span class="token function">injectEndpoints</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token function-variable function">endpoints</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">builder</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment">// 获取任务列表</span>    getTodos<span class="token operator">:</span> builder<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token comment">// 定义请求信息</span>      <span class="token function-variable function">query</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">params</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> url<span class="token operator">:</span> <span class="token string">"/todos"</span><span class="token punctuation">,</span> params<span class="token punctuation">,</span> method<span class="token operator">:</span> <span class="token string">"get"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment">// 对响应数据进行转换</span>    <span class="token function-variable function">transformResponse</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">response<span class="token punctuation">,</span> meta<span class="token punctuation">,</span> arg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// 服务器端响应数据</span>      <span class="token comment">// console.log(response);</span>      <span class="token comment">// 对象类型, 内包含请求对象 request, 响应对象 response</span>      <span class="token comment">// console.log(meta);</span>      <span class="token comment">// 请求参数对象, 即 params</span>      <span class="token comment">// console.log(arg);</span>      <span class="token comment">// 该函数中返回什么, 客户端就缓存什么</span>      <span class="token keyword">return</span> response<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> useGetTodosQuery <span class="token punctuation">}</span> <span class="token operator">=</span> todoService<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="5-在组件中同步状态"><a href="#5-在组件中同步状态" class="headerlink" title="5. 在组件中同步状态"></a>5. 在组件中同步状态</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/components/pages/Todo/index.jsimport { useGetTodosQuery } from "@state";export default function Todo() {  // isLoading: 只有初次加载状态时为true, 后续的每次重新加载都为false  // error: 请求出错时包含错误信息的对象  // data: 服务器端返回的状态  // 优化: 当组件中的其他不相关状态的变化引起组件重新渲染时, 并不会同步状态  const { data, error, isLoading } = useGetTodosQuery({ _limit: 5, _page: page });  // 初始加载过程中显示的等待状态  if (isLoading) return &lt;div&gt;loading....&lt;/div&gt;;// 请求出现错误后显示的错误信息  if (error) return &lt;div&gt;{error.error}&lt;/div&gt;;  return &lt;ul&gt; {data &amp;&amp; data.map((item) =&gt; &lt;li key={item.id}&gt;{item.title}&lt;/li&gt;)} &lt;/ul&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="6-同步状态选项"><a href="#6-同步状态选项" class="headerlink" title="6. 同步状态选项"></a>6. 同步状态选项</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// isFetching: 初次加载状态时为false, 后续的每次重新加载都为true</span><span class="token keyword">const</span> <span class="token punctuation">{</span> isFetching <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useGetTodosQuery</span><span class="token punctuation">(</span>  <span class="token punctuation">{</span> _limit<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span> _page<span class="token operator">:</span> page <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    <span class="token comment">// 间隔 3s 重新发送请求同步状态</span>    pollingInterval<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    <span class="token comment">// 当参数发生变化或者发生组件挂载行为时重新同步状态</span>    refetchOnMountOrArgChange<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 当浏览器窗口重新获取焦点时同步状态</span>    refetchOnFocus<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 当网络重新链接时同步状态</span>    refetchOnReconnect<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment">// 阻止默认同步状态的行为或者根据条件忽略某次同步状态的行为</span>    <span class="token comment">// 如果值为 true, 将忽略同步状态的行为</span>    <span class="token comment">// 比如组件初次挂载时同步状态的行为, 再比如当页面为3时忽略同步状态的行为</span>    skip<span class="token operator">:</span> page <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<code>refetchOnFocus</code> 和 <code>refetchOnReconnect</code> 默认是不生效的，需要做以下配置才可以。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/store.jsimport { setupListeners } from "@reduxjs/toolkit/dist/query";setupListeners(store.dispatch);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="7-定义状态突变逻辑"><a href="#7-定义状态突变逻辑" class="headerlink" title="7. 定义状态突变逻辑"></a>7. 定义状态突变逻辑</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/services/todo.jsimport { apiService } from ".";export const todoService = apiService.injectEndpoints({  endpoints: (builder) =&gt; ({    // 删除任务    removeTodoById: builder.mutation({      query: (id) =&gt; ({        url: `/todos/${id}`,        method: "delete",      })    })  }),});export const { useRemoveTodoByIdMutation } = todoService;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="8-组件执行状态突变"><a href="#8-组件执行状态突变" class="headerlink" title="8. 组件执行状态突变"></a>8. 组件执行状态突变</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/components/pages/Todo/index.jsimport { useRemoveToByIdMutation } from "@state";export default function Todo() {  // removeTodoById: 调用该方法执行状态突变  // result: 突变过程中的状态跟踪及突变结果  const [removeTodoById, result] = useRemoveToByIdMutation();  return &lt;button onClick={() =&gt; removeToById(item.id)}&gt;delete&lt;/button&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="9-状态突变后更新列表"><a href="#9-状态突变后更新列表" class="headerlink" title="9. 状态突变后更新列表"></a>9. 状态突变后更新列表</h5><p>方式一：在删除操作成功以后重新同步列表状态。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/components/pages/Todo/index.jsexport default function Todo() {  // refetch: 调用该方法, 表示重新同步状态  // 优化: 当组件中的其他不相关状态的变化引起组件重新渲染时, 并不会同步状态  const { refetch } = useGetTodosQuery();  const [removeToById, result] = useRemoveToByIdMutation();// 监听突变操作是否成功  useEffect(() =&gt; {    // 重新同步状态    refetch();  }, [result.isSuccess, refetch]);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式二：使列表状态无效，RTK Query 会自动重新同步状态。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/services/todo.jsexport const todoService = apiService.injectEndpoints({  endpoints: (builder) =&gt; ({    // 获取任务列表    getTodos: builder.query({      // 为缓存数据附加标签, 通过标签可以定位到数据从而对数据进行操作      providesTags: ["todos"],    }),    // 删除任务    removeToById: builder.mutation({      invalidatesTags: ["todos"],    }),  }),});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="10-数据预取"><a href="#10-数据预取" class="headerlink" title="10. 数据预取"></a>10. 数据预取</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// src/state/services/todo.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> usePrefetch<span class="token operator">:</span> useTodosPrefetch <span class="token punctuation">}</span> <span class="token operator">=</span> todoService<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useTodosPrefetch } from "@state";export default function Todo() {  const prefetchTodos = useTodosPrefetch("getTodos");  const prefetchNext = useCallback(() =&gt; {    prefetchTodos({ _page: page + 1, _limit: 5 });  }, [prefetchTodos, page]);  return &lt;button onMouseEnter={prefetchNext} onClick={() =&gt; setPage((page) =&gt; page + 1)}&gt;{page}&lt;/button&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-3-MobX"><a href="#4-3-MobX" class="headerlink" title="4.3 MobX"></a>4.3 MobX</h3><h4 id="4-3-1-概述"><a href="#4-3-1-概述" class="headerlink" title="4.3.1. 概述"></a>4.3.1. 概述</h4><p>MobX 是一个简单的可扩展的状态管理库，无样板代码风格简约。</p><p>目前最新版本为 6，版本 4 和版本 5 已不再支持。</p><p>在 MobX 6 中不推荐使用装饰器语法，因为它不是 ES 标准，并且标准化过程要花费很长时间，但是通过配置仍然可以启用装饰器语法。</p><p>MobX 可以运行在任何支持 ES5 的环境中，包含浏览器和 Node。</p><p><a href="https://mobx.js.org/README.html">MobX</a> 通常和 React 配合使用，但是在 <a href="https://github.com/mobxjs/mobx-angular">Angular</a> 和 <a href="https://github.com/mobxjs/mobx-vue">Vue</a> 中也可以使用 MobX。</p><h4 id="4-3-2-核心概念"><a href="#4-3-2-核心概念" class="headerlink" title="4.3.2 核心概念"></a>4.3.2 核心概念</h4><ol><li>observable：被 MobX 跟踪的状态。</li><li>action：允许修改状态的方法，在严格模式下只有 action 方法被允许修改状态。</li><li>computed：根据现有状态衍生出来的状态。</li><li>flow：执行副作用，它是 generator 函数。可以更改状态值。</li></ol><h4 id="4-3-3-工作流程"><a href="#4-3-3-工作流程" class="headerlink" title="4.3.3 工作流程"></a>4.3.3 工作流程</h4><img src="/medias/assets/images/54.png"><h4 id="4-3-4-下载"><a href="#4-3-4-下载" class="headerlink" title="4.3.4 下载"></a>4.3.4 下载</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token function">yarn</span> <span class="token function">add</span> mobx@6.3.1 mobx-react-lite@3.2.0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>mobx：MobX 核心库</li><li>mobx-react-lite：仅支持函数组件</li><li>mobx-react：既支持函数组件也支持类组件</li></ul><h4 id="4-3-5-案例驱动之计数器"><a href="#4-3-5-案例驱动之计数器" class="headerlink" title="4.3.5 案例驱动之计数器"></a>4.3.5 案例驱动之计数器</h4><p>在组件中显示数值状态，单击[+1]按钮使数值加一，单击[-1]按钮使数值减一。</p><ol><li><p>创建用于存储状态的 Store</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">export default class CounterStore {  constructor() {    this.count = 0  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建用于修改状态的方法</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">export default class CounterStore {  constructor() {    this.count = 0  }  increment() {    this.count += 1  }  decrement() {    this.count -= 1  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>让 MobX 可以追踪状态的变化</p><ol><li>通过 observable 标识状态，使状态可观察</li><li>通过 action 标识修改状态的方法，状态只有通过 action 方法修改后才会通知视图更新</li></ol><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { action, makeObservable, observable } from "mobx"export default class CounterStore {  constructor() {    this.count = 0    makeObservable(this, {      count: observable,      increment: action,      decrement: action    })  }  increment() {    this.count += 1  }  decrement() {    this.count -= 1  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建 Store 类的实例对象并将实例对象传递给组件</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// App.jsimport Counter from "./Counter"import CounterStore from "../store/Counter"const counterStore = new CounterStore()function App() {  return &lt;Counter counterStore={counterStore} /&gt;}export default App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在组件中通过 Store 实例对象获取状态以及操作状态的方法</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Counter({ counterStore }) {  return (    &lt;Container&gt;      &lt;Button onClick={() =&gt; counterStore.increment()}&gt;        INCREMENT      &lt;/Button&gt;      &lt;Button&gt;{counterStore.count}&lt;/Button&gt;      &lt;Button onClick={() =&gt; counterStore.decrement()}&gt;        DECREMENT      &lt;/Button&gt;    &lt;/Container&gt;  )}export default Counter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当组件中使用到的 MobX 管理的状态发生变化后，使视图更新。通过 observer 方法包裹组件实现目的</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { observer } from "mobx-react-lite"function Counter() { }export default observer(Counter)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>简化组件代码</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Counter({ counterStore }) {  const { count, increment, decrement } = counterStore  return (    &lt;Container&gt;      &lt;Button border="left" onClick={increment}&gt;        INCREMENT      &lt;/Button&gt;      &lt;Button&gt;{count}&lt;/Button&gt;      &lt;Button border="right" onClick={decrement}&gt;        DECREMENT      &lt;/Button&gt;    &lt;/Container&gt;  )}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当代码简化后，修改状态的方法中的 this 指向出现了问题，通过 action.bound 强制绑定 this，使 this 指向 Store 实例对象</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { action, makeObservable, observable } from "mobx"export default class CounterStore {  constructor() {    this.count = 0    makeObservable(this, {      count: observable,      increment: action.bound,      decrement: action.bound    })  }  increment() {    this.count += 1  }  decrement() {    this.count -= 1  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>总结：状态变化更新视图的必要条件</p><ol><li>状态必须被标记为 <code>observable</code></li><li>更改状态的方法必须被标记为 <code>action</code></li><li>组件必须通过 <code>observer</code> 方法包裹</li></ol></li><li><p>创建 RootStore</p><p>在应用中可存在多个 Store，多个 Store 最终要通过 RootStore 管理，在每个组件都需要获取到 RootStore。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// store/index.jsimport { createContext, useContext } from "react"import CounterStore from "./Counter"class RootStore {  constructor() {    this.counterStore = new CounterStore()  }}const rootStore = new RootStore()const RootStoreContext = createContext()export const RootStoreProvider = ({ children }) =&gt; {  return (    &lt;RootStoreContext.Provider value={rootStore}&gt;      {children}    &lt;/RootStoreContext.Provider&gt;  )}export const useRootStore = () =&gt; {  return useContext(RootStoreContext)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// App.jsimport { RootStoreProvider } from "../store"import Counter from "./Counter"function App() {  return (    &lt;RootStoreProvider&gt;      &lt;Counter /&gt;    &lt;/RootStoreProvider&gt;  )}export default App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { observer } from "mobx-react-lite"import { useRootStore } from "../store"function Counter() {  const { counterStore } = useRootStore()  const { count, increment, decrement } = counterStore  return (    &lt;Container&gt;      &lt;Button onClick={increment}&gt;        INCREMENT      &lt;/Button&gt;      &lt;Button&gt;{count}&lt;/Button&gt;      &lt;Button onClick={decrement}&gt;        DECREMENT      &lt;/Button&gt;    &lt;/Container&gt;  )}export default observer(Counter)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="4-3-6-案例驱动之-Todo"><a href="#4-3-6-案例驱动之-Todo" class="headerlink" title="4.3.6 案例驱动之 Todo"></a>4.3.6 案例驱动之 Todo</h4><h5 id="1-创建-Store"><a href="#1-创建-Store" class="headerlink" title="1. 创建 Store"></a>1. 创建 Store</h5><ol><li><p>创建用于管理 Todo 任务的 Store</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { makeObservable, observable } from "mobx"export default class Todo {  constructor(todo) {    this.id = todo.id    this.title = todo.title    this.isCompleted = todo.isCompleted || false    this.isEditing = false    makeObservable(this, {      title: observable,      isCompleted: observable,      isEditing: observable    })  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建用于管理 Todo 任务列表的 Store</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { makeObservable, observable } from "mobx"export default class TodoStore {  constructor() {    this.todos = []    makeObservable(this, {      todos: observable    })  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="2-添加任务"><a href="#2-添加任务" class="headerlink" title="2. 添加任务"></a>2. 添加任务</h5><ol><li><p>创建向 todo 任务列表中添加 todo 任务的方法</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { action, makeObservable, observable } from "mobx"import Todo from "./Todo"export default class TodoStore {  constructor() {    this.todos = []    makeObservable(this, {      todos: observable,      addTodo: action.bound    })  }  addTodo(title) {    this.todos.push(new Todo({ title, id: this.generateTodoId() }))  }  generateTodoId() {    if (!this.todos.length) return 1    return this.todos.reduce((id, todo) =&gt; (id &lt; todo.id ? todo.id : id), 0) + 1  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在组件中实现添加任务的逻辑</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useState } from "react"import { useRootStore } from "../../store"function Header() {  const [title, setTitle] = useState("")  const { todoStore } = useRootStore()  const { addTodo } = todoStore  return (    &lt;header className="header"&gt;      &lt;input        value={title}        onChange={e =&gt; setTitle(e.target.value)}        onKeyUp={e =&gt; {          if (e.key !== "Enter") return          addTodo(title)          setTitle("")        }}      /&gt;    &lt;/header&gt;  )}export default Header<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="3-显示任务列表"><a href="#3-显示任务列表" class="headerlink" title="3. 显示任务列表"></a>3. 显示任务列表</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { observer } from "mobx-react-lite"import { useRootStore } from "../../store"import Todo from "./Todo"function Main() {  const { todoStore } = useRootStore()  const { todos } = todoStore  return (    &lt;section className="main"&gt;      &lt;ul className="todo-list"&gt;        {todos.map(todo =&gt; (          &lt;Todo key={todo.id} todo={todo} /&gt;        ))}      &lt;/ul&gt;    &lt;/section&gt;  )}export default observer(Main)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Todo({ todo }) {  return (    &lt;li&gt;      &lt;div className="view"&gt;        &lt;input className="toggle" type="checkbox" /&gt;        &lt;label&gt;{todo.title}&lt;/label&gt;        &lt;button className="destroy" /&gt;      &lt;/div&gt;      &lt;input className="edit" /&gt;    &lt;/li&gt;  )}export default Todo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-加载远端任务"><a href="#4-加载远端任务" class="headerlink" title="4 加载远端任务"></a>4 加载远端任务</h5><ol><li><p>下载 json-server：<code>yarn add json-server@0.16.3</code></p></li><li><p>创建 db.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"todos"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"吃饭"</span><span class="token punctuation">,</span>      <span class="token property">"isCompleted"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"睡觉"</span><span class="token punctuation">,</span>      <span class="token property">"isCompleted"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"打豆豆"</span><span class="token punctuation">,</span>      <span class="token property">"isCompleted"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 package.json 文件中添加启动命令</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"json-server"</span><span class="token operator">:</span> <span class="token string">"json-server --watch ./db.json --port 3001"</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>启动 json-server：<code>npm run json-server</code></p></li><li><p>在 todoStore 中添加加载任务列表的方法</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import axios from "axios"import { flow, makeObservable, observable } from "mobx"import Todo from "./Todo"export default class TodoStore {  constructor() {    this.todos = []    makeObservable(this, {      todos: observable,      loadTodos: flow    })    this.loadTodos()  }  *loadTodos() {    let response = yield axios.get("http://localhost:3001/todos")    response.data.forEach(todo =&gt; this.todos.push(new Todo(todo)))  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="5-更改任务状态"><a href="#5-更改任务状态" class="headerlink" title="5. 更改任务状态"></a>5. 更改任务状态</h5><ol><li><p>在 Todo 类中添加修改任务是否已经完成的方法</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">export default class Todo {  constructor() {    makeObservable(this, {      modifyTodoIsCompleted: action.bound    })  }  modifyTodoIsCompleted() {    this.isCompleted = !this.isCompleted  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建 <code>TodoCompleted</code> 组件实现逻辑</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { observer } from "mobx-react-lite"function TodoCompleted({ todo }) {  const { isCompleted, modifyTodoIsCompleted } = todo  return (    &lt;input      className="toggle"      type="checkbox"      checked={isCompleted}      onChange={modifyTodoIsCompleted}    /&gt;  )}export default observer(TodoCompleted)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>Todo</code> 组件中引用<code>TodoCompleted</code> 组件并根据条件决定是否为 <code>li</code> 添加 <code>completed</code> 类名</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { observer } from "mobx-react-lite"import TodoCompleted from "./TodoCompleted"function Todo({ todo }) {  return (    &lt;li className={todo.isCompleted ? "completed" : ""}&gt;      &lt;div className="view"&gt;        &lt;TodoCompleted todo={todo} /&gt;      &lt;/div&gt;    &lt;/li&gt;  )}export default observer(Todo)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="6-删除任务"><a href="#6-删除任务" class="headerlink" title="6. 删除任务"></a>6. 删除任务</h5><ol><li><p>在 <code>todoStore</code> 中添加实现删除任务的方法</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import axios from "axios"import { action, makeObservable,  } from "mobx"export default class TodoStore {  constructor() {    makeObservable(this, {      removeTodo: action.bound    })  }  removeTodo(id) {    this.todos = this.todos.filter(todo =&gt; todo.id !== id)  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建 <code>TodoDelete</code> 组件实现删除 todo 任务逻辑</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useRootStore } from "../../store"function TodoDelete({ id }) {  const { todoStore } = useRootStore()  const { removeTodo } = todoStore  return &lt;button className="destroy" onClick={removeTodo.bind(null, id)} /&gt;}export default TodoDelete<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>Todo</code> 组件调用 <code>TodoDelete</code> 组件并传入 todo ID</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { observer } from "mobx-react-lite"import TodoDelete from "./TodoDelete"function Todo({ todo }) {  return (    &lt;li&gt;      &lt;div className="view"&gt;        &lt;TodoDelete id={todo.id} /&gt;      &lt;/div&gt;    &lt;/li&gt;  )}export default observer(Todo)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="7-编辑任务"><a href="#7-编辑任务" class="headerlink" title="7. 编辑任务"></a>7. 编辑任务</h5><ol><li><p>在 todoStore 中添加更改任务是否处于编辑状态的方法</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { action, makeObservable } from "mobx"export default class Todo {  constructor(todo) {    makeObservable(this, {      modifyTodoIsEditing: action.bound,    })  }  modifyTodoIsEditing() {    this.isEditing = !this.isEditing  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>添加 <code>TodoTitle</code> 组件展示任务标题并为其添加双击事件，当事件发生时将任务更改为可编辑状态</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function TodoTitle({ todo }) {  const { title, modifyTodoIsEditing } = todo  return &lt;label onDoubleClick={modifyTodoIsEditing}&gt;{title}&lt;/label&gt;}export default TodoTitle<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>Todo</code> 组件中调用 <code>TodoTitle</code> 组件，并为 <code>li</code> 添加 <code>editing</code> 类名</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { observer } from "mobx-react-lite"import TodoTitle from "./TodoTitle"import classnames from "classnames"function Todo({ todo }) {  return (    &lt;li className={classnames({ completed: todo.isCompleted, editing: todo.isEditing })} &gt;      &lt;div className="view"&gt;        &lt;TodoTitle todo={todo} /&gt;      &lt;/div&gt;    &lt;/li&gt;  )}export default observer(Todo)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建 <code>TodoEditing</code> 组件实现编辑 todo 任务标题</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useRef, useEffect } from "react"function TodoEditing({ todo }) {  const { title, modifyTodoTitle, isEditing } = todo  const ref = useRef(null)  useEffect(() =&gt; {    if (isEditing) ref.current.focus()  }, [isEditing])  return (    &lt;input      ref={ref}      className="edit"      defaultValue={title}      onBlur={e =&gt; modifyTodoTitle(e.target.value)}    /&gt;  )}export default TodoEditing<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>Todo</code> 组件中调用 <code>TodoEditing</code> 组件并传递 todo 任务</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { observer } from "mobx-react-lite"import TodoTitle from "./TodoTitle"import classnames from "classnames"import TodoEditing from "./TodoEditing"function Todo({ todo }) {  return (    &lt;li className={classnames({ completed: todo.isCompleted, editing: todo.isEditing })} &gt;      &lt;div className="view"&gt;        &lt;TodoTitle todo={todo} /&gt;      &lt;/div&gt;      &lt;TodoEditing todo={todo} /&gt;    &lt;/li&gt;  )}export default observer(Todo)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="8-计算未完成任务数量"><a href="#8-计算未完成任务数量" class="headerlink" title="8. 计算未完成任务数量"></a>8. 计算未完成任务数量</h5><ol><li><p>在 todoStore 中添加获取未完成任务数量的派生状态</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import axios from "axios"import { makeObservable, computed } from "mobx"export default class TodoStore {  constructor() {    makeObservable(this, {      unCompletedTodoCount: computed    })  }  get unCompletedTodoCount() {    return this.todos.filter(todo =&gt; !todo.isCompleted).length  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建 <code>UnCompletedTodoCount</code> 组件实现逻辑</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { observer } from "mobx-react-lite"import { useRootStore } from "../../store"function UnCompletedTodoCount() {  const { todoStore } = useRootStore()  const { unCompletedTodoCount } = todoStore  return (    &lt;span className="todo-count"&gt;      &lt;strong&gt;{unCompletedTodoCount}&lt;/strong&gt; item left    &lt;/span&gt;  )}export default observer(UnCompletedTodoCount)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>Footer</code> 组件中调用 <code>UnCompletedTodoCount</code> 组件</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import UnCompletedTodoCount from "./UnCompletedTodoCount"function Footer() {  return (    &lt;footer className="footer"&gt;      &lt;UnCompletedTodoCount /&gt;    &lt;/footer&gt;  )}export default Footer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="9-任务过滤"><a href="#9-任务过滤" class="headerlink" title="9. 任务过滤"></a>9. 任务过滤</h5><ol><li><p>在 <code>todoStore</code> 中添加存储过滤条件的属性以及更改过滤条件的方法</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import axios from "axios"import { action, makeObservable, observable, } from "mobx"export default class TodoStore {  constructor() {    this.filterCondition = "All"    makeObservable(this, {      modifyFilterCondition: action.bound,      filterCondition: observable,    })  }  modifyFilterCondition(filterCondition) {    this.filterCondition = filterCondition  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建 <code>TodoFilter</code> 组件，为过滤按钮添加事件以更改过滤条件，根据过滤条件为按钮添加 <code>selected</code> 类名</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import classNames from "classnames"import { observer } from "mobx-react-lite"import { useRootStore } from "../../store"function TodoFilter() {  const { todoStore } = useRootStore()  const { filterCondition, modifyFilterCondition } = todoStore  return (    &lt;ul className="filters"&gt;      &lt;li&gt;        &lt;button          onClick={() =&gt; modifyFilterCondition("All")}          className={classNames({ selected: filterCondition === "All" })}        &gt;          All        &lt;/button&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;button          onClick={() =&gt; modifyFilterCondition("Active")}          className={classNames({ selected: filterCondition === "Active" })}        &gt;          Active        &lt;/button&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;button          onClick={() =&gt; modifyFilterCondition("Completed")}          className={classNames({ selected: filterCondition === "Completed" })}        &gt;          Completed        &lt;/button&gt;      &lt;/li&gt;    &lt;/ul&gt;  )}export default observer(TodoFilter)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>Footer</code> 组件中调用 <code>TodoFilter</code> 组件</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import TodoFilter from "./TodoFilter"function Footer() {  return (    &lt;footer className="footer"&gt;      &lt;TodoFilter /&gt;    &lt;/footer&gt;  )}export default Footer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>TodoStore</code> 中添加派生状态，根据条件获取过滤后的 todo 列表</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import axios from "axios"import { action, flow, makeObservable, observable, computed } from "mobx"import Todo from "./Todo"export default class TodoStore {  constructor() {    makeObservable(this, {      filterTodos: computed    })  }  get filterTodos() {    switch (this.filterCondition) {      case "Active":        return this.todos.filter(todo =&gt; !todo.isCompleted)      case "Completed":        return this.todos.filter(todo =&gt; todo.isCompleted)      default:        return this.todos    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 Main 组件获取 <code>filterTodos</code> 派生状态</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { observer } from "mobx-react-lite"import { useRootStore } from "../../store"import Todo from "./Todo"function Main() {  const { todoStore } = useRootStore()  const { filterTodos } = todoStore  return (    &lt;section className="main"&gt;      &lt;ul className="todo-list"&gt;        {filterTodos.map(todo =&gt; (          &lt;Todo key={todo.id} todo={todo} /&gt;        ))}      &lt;/ul&gt;    &lt;/section&gt;  )}export default observer(Main)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h5 id="10-清除已完成任务"><a href="#10-清除已完成任务" class="headerlink" title="10. 清除已完成任务"></a>10. 清除已完成任务</h5><ol><li><p>在 <code>TodoStore</code> 中添加清除已完成任务的方法</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import axios from "axios"import { action, makeObservable, } from "mobx"export default class TodoStore {  constructor() {    makeObservable(this, {      clearCompleted: action.bound    })  }  clearCompleted() {    this.todos = this.todos.filter(todo =&gt; !todo.isCompleted)  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建 <code>ClearCompleted</code> 组件实现清除已完成任务功能</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useRootStore } from "../../store"function ClearCompleted() {  const { todoStore } = useRootStore()  const { clearCompleted } = todoStore  return (    &lt;button className="clear-completed" onClick={clearCompleted}&gt;      Clear completed    &lt;/button&gt;  )}export default ClearCompleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>Footer</code> 组件中调用 <code>ClearCompleted</code> 组件</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import ClearCompleted from "./ClearCompleted"function Footer() {  return (    &lt;footer className="footer"&gt;      &lt;ClearCompleted /&gt;    &lt;/footer&gt;  )}export default Footer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="4-4-Recoil"><a href="#4-4-Recoil" class="headerlink" title="4.4 Recoil"></a>4.4 Recoil</h3><h4 id="4-4-1-概述"><a href="#4-4-1-概述" class="headerlink" title="4.4.1 概述"></a>4.4.1 概述</h4><p>Recoil 是 Facebook 提供的在 React 中实现全局状态管理的扩展库，目前仍然在实验阶段。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> recoil<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-4-2-RecoilRoot"><a href="#4-4-2-RecoilRoot" class="headerlink" title="4.4.2 RecoilRoot"></a>4.4.2 RecoilRoot</h4><p>RecoilRoot 用于为组件提供获取状态的上下文对象。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import ReactDOM from "react-dom";import App from "./App";import { RecoilRoot } from "recoil";ReactDOM.render(  &lt;RecoilRoot&gt;    &lt;App /&gt;  &lt;/RecoilRoot&gt;,  document.getElementById("root"));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-3-atom"><a href="#4-4-3-atom" class="headerlink" title="4.4.3 atom"></a>4.4.3 atom</h4><p>atom 方法用于创建全局状态。</p><h5 id="1-未使用全局状态"><a href="#1-未使用全局状态" class="headerlink" title="1. 未使用全局状态"></a>1. 未使用全局状态</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useState } from "react";function DarkModeSwitch({ dark, setDark }) {  return (    &lt;input      type="checkbox"      checked={dark}      onChange={(event) =&gt; setDark(event.target.checked)}    /&gt;  );}function Paragraph({ dark }) {  const styles = {    background: dark ? "black" : "white",    color: dark ? "white" : "black",  };  return &lt;p style={styles}&gt;Paragraph ...&lt;/p&gt;;}function App() {  const [dark, setDark] = useState(false);  return (    &lt;&gt;      &lt;DarkModeSwitch dark={dark} setDark={setDark} /&gt;      &lt;Paragraph dark={dark} /&gt;    &lt;/&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-使用了全局状态"><a href="#2-使用了全局状态" class="headerlink" title="2. 使用了全局状态"></a>2. 使用了全局状态</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { atom, useRecoilState, useRecoilValue } from "recoil";const darkModeState = atom({  key: "darkModeState",  default: false,});function DarkModeSwitch() {  const [dark, setDark] = useRecoilState(darkModeState);  return (    &lt;input      type="checkbox"      checked={dark}      onChange={(event) =&gt; setDark(event.target.checked)}    /&gt;  );}function Paragraph() {  const dark = useRecoilValue(darkModeState);  const styles = {    background: dark ? "black" : "white",    color: dark ? "white" : "black",  };  return &lt;p style={styles}&gt;Paragraph ...&lt;/p&gt;;}function App() {  return (    &lt;&gt;      &lt;DarkModeSwitch /&gt;      &lt;Paragraph /&gt;    &lt;/&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="3-代码拆分"><a href="#3-代码拆分" class="headerlink" title="3. 代码拆分"></a>3. 代码拆分</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/atoms/darkMode.jsimport { atom, useRecoilState, useRecoilValue } from "recoil";const darkModeState = atom({  key: "darkModeState",  default: false,});export function useDarkModeState() {  return useRecoilState(darkModeState);}export function useDarkModeValue() {  return useRecoilValue(darkModeState);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useDarkModeState, useDarkModeValue } from "./atoms/darkMode";function DarkModeSwitch() {  const [dark, setDark] = useDarkModeState();  return (    &lt;input      type="checkbox"      checked={dark}      onChange={(event) =&gt; setDark(event.target.checked)}    /&gt;  );}function Paragraph() {  const dark = useDarkModeValue();  const styles = {    background: dark ? "black" : "white",    color: dark ? "white" : "black",  };  return &lt;p style={styles}&gt;Paragraph ...&lt;/p&gt;;}function App() {  return (    &lt;&gt;      &lt;DarkModeSwitch /&gt;      &lt;Paragraph /&gt;    &lt;/&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-4-selector"><a href="#4-4-4-selector" class="headerlink" title="4.4.4 selector"></a>4.4.4 selector</h4><p>selector 表示派生状态，基于现有状态计算新的状态。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { atom, selector, useRecoilState, useRecoilValue } from "recoil";// 汇率const exChangeRate = 0.1572;// 人民币const CNYState = atom({  key: "CNY",  default: 1,});// 根据汇率将人民币转换为美元const USDSelector = selector({  key: "USD",  get: ({ get }) =&gt; {    const CNY = get(CNYState);    return CNY * exChangeRate;  },  // 设置新的美元时重新计算人民币  set({ set }, newValue) {    const newCNY = newValue / exChangeRate;    set(CNYState, newCNY);  },});function App() {  const [CNY, setCNY] = useRecoilState(CNYState);  const [USD, setUSD] = useRecoilState(USDSelector);  return (    &lt;&gt;      &lt;input        type="text"        value={CNY}        onChange={(event) =&gt; setCNY(event.target.value)}      /&gt;      &lt;input        type="text"        value={USD}        onChange={(event) =&gt; setUSD(event.target.value)}      /&gt;    &lt;/&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-5-data-fetching"><a href="#4-4-5-data-fetching" class="headerlink" title="4.4.5 data fetching"></a>4.4.5 data fetching</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">import axios from "axios";import { Suspense } from "react";import { atom, selector, useRecoilState, useRecoilValue } from "recoil";const userIdState = atom({  key: "userId",  default: "",});const userState = selector({  key: "userState",  get: async ({ get }) =&gt; {    const userId = get(userIdState);    if (userId) {      let response = await axios.get(        `https://jsonplaceholder.typicode.com/users/${userId}`      );      return response.data;    }  },});function User() {  const user = useRecoilValue(userState);  return (    &lt;ul&gt;      &lt;li&gt;{user.name}&lt;/li&gt;      &lt;li&gt;{user.email}&lt;/li&gt;    &lt;/ul&gt;  );}function App() {  const [userId, setUserId] = useRecoilState(userIdState);  return (    &lt;&gt;      &lt;select        value={userId}        onChange={(event) =&gt; setUserId(event.target.value)}      &gt;        &lt;option value=""&gt;请选择用户&lt;/option&gt;        &lt;option value="1"&gt;用户一&lt;/option&gt;        &lt;option value="2"&gt;用户二&lt;/option&gt;        &lt;option value="3"&gt;用户三&lt;/option&gt;      &lt;/select&gt;      {userId &amp;&amp; (        &lt;Suspense fallback={&lt;div&gt;loading...&lt;/div&gt;}&gt;          &lt;User /&gt;        &lt;/Suspense&gt;      )}    &lt;/&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-6-selectorFamily"><a href="#4-4-6-selectorFamily" class="headerlink" title="4.4.6 selectorFamily"></a>4.4.6 selectorFamily</h4><p>selectorFamily 允许开发者在调用查询时传递参数。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import axios from "axios";import { Suspense, useState } from "react";import { selectorFamily, useRecoilValue } from "recoil";const userState = selectorFamily({  key: "userState",  get: (userId) =&gt; async () =&gt; {    if (userId) {      let response = await axios.get(        `https://jsonplaceholder.typicode.com/users/${userId}`      );      return response.data;    }  },});function User({ userId }) {  const user = useRecoilValue(userState(userId));  return (    &lt;ul&gt;      &lt;li&gt;{user.name}&lt;/li&gt;      &lt;li&gt;{user.email}&lt;/li&gt;    &lt;/ul&gt;  );}function App() {  const [userId, setUserId] = useState("");  return (    &lt;&gt;      &lt;select        value={userId}        onChange={(event) =&gt; setUserId(event.target.value)}      &gt;        &lt;option value=""&gt;请选择用户&lt;/option&gt;        &lt;option value="1"&gt;用户一&lt;/option&gt;        &lt;option value="2"&gt;用户二&lt;/option&gt;        &lt;option value="3"&gt;用户三&lt;/option&gt;      &lt;/select&gt;      {userId &amp;&amp; (        &lt;Suspense fallback={&lt;div&gt;loading...&lt;/div&gt;}&gt;          &lt;User userId={userId} /&gt;        &lt;/Suspense&gt;      )}    &lt;/&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-7-catch-errors"><a href="#4-4-7-catch-errors" class="headerlink" title="4.4.7 catch errors"></a>4.4.7 catch errors</h4><p>使用错误边界组件捕获程序执行过程中出现的错误。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i react-error-boundary@3.1.4<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import axios from "axios";import { Suspense, useState } from "react";import { selectorFamily, useRecoilValue } from "recoil";import { ErrorBoundary } from "react-error-boundary";const userState = selectorFamily({  key: "userState",  get: (userId) =&gt; async () =&gt; {    if (userId) {      let response = await axios.get(        `https://jsonplaceholder.typicode.com/users/${userId}`      );      // 模拟程序出现错误      if (userId === "4") throw new Error("用户不存在");      return response.data;    }  },});function User({ userId }) {  const user = useRecoilValue(userState(userId));  return (    &lt;ul&gt;      &lt;li&gt;{user.name}&lt;/li&gt;      &lt;li&gt;{user.email}&lt;/li&gt;    &lt;/ul&gt;  );}// resetErrorBoundary: 用于重置错误边界function ErrorFallback({ error, resetErrorBoundary }) {  return (    &lt;&gt;      &lt;p&gt;发生了错误:&lt;/p&gt;      &lt;pre&gt;{error.message}&lt;/pre&gt;      &lt;button onClick={resetErrorBoundary}&gt;重试&lt;/button&gt;    &lt;/&gt;  );}function App() {  const [userId, setUserId] = useState("");  return (    &lt;&gt;      &lt;select        value={userId}        onChange={(event) =&gt; setUserId(event.target.value)}      &gt;        &lt;option value=""&gt;请选择用户&lt;/option&gt;        &lt;option value="1"&gt;用户一&lt;/option&gt;        &lt;option value="2"&gt;用户二&lt;/option&gt;        &lt;option value="3"&gt;用户三&lt;/option&gt;        &lt;option value="4"&gt;用户四&lt;/option&gt;      &lt;/select&gt;      {/*          FallbackComponent: 指定发生错误时显示的用户界面          onReset: 错误边界被重置时执行的回调函数          resetKeys: 当指定的状态发生更改时重置错误边界        */}      &lt;ErrorBoundary FallbackComponent={ErrorFallback} resetKeys={[userId]}&gt;        {userId &amp;&amp; (          &lt;Suspense fallback={&lt;div&gt;loading...&lt;/div&gt;}&gt;            &lt;User userId={userId} /&gt;          &lt;/Suspense&gt;        )}      &lt;/ErrorBoundary&gt;    &lt;/&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-4-8-effects"><a href="#4-4-8-effects" class="headerlink" title="4.4.8 effects"></a>4.4.8 effects</h4><p>effects 用于执行副作用。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useState } from "react";import { atom, useRecoilState } from "recoil";const todoListState = atom({  key: "todoList",  default: [],  effects: [    ({ setSelf, onSet }) =&gt; {      const storedTodo = localStorage.getItem("todos");      if (storedTodo) setSelf(JSON.parse(storedTodo));      onSet((value) =&gt; {        localStorage.setItem("todos", JSON.stringify(value));      });    },  ],});function App() {  const [title, setTitle] = useState("");  const [todos, setTodos] = useRecoilState(todoListState);  const addTodo = (event) =&gt; {    if (event.key === "Enter") {      setTodos([...todos, { title }]);      setTitle("");    }  };  return (    &lt;div&gt;      &lt;input        type="text"        value={title}        onChange={(event) =&gt; setTitle(event.target.value)}        onKeyUp={addTodo}      /&gt;      &lt;ul&gt;        {todos.map((todo, index) =&gt; (          &lt;li key={index}&gt;{todo.title}&lt;/li&gt;        ))}      &lt;/ul&gt;    &lt;/div&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-React-路由-V6"><a href="#5-React-路由-V6" class="headerlink" title="5. React 路由 V6"></a>5. React 路由 V6</h2><h3 id="5-1-客户端路由概述"><a href="#5-1-客户端路由概述" class="headerlink" title="5.1 客户端路由概述"></a>5.1 客户端路由概述</h3><p>在 Web 应用中，客户端路由就是导航，就是 URL 地址与页面之间的对应关系，可以实现点击不同的链接跳转到不同的页面。</p><p>传统 Web 应用的中的路由是由 a 标记实现的，通过 a 标记可以实现在不同的 HTML 文件之间进行跳转。</p><p>在 React 应用中，只有一个 HTML 文件，React 应用通过不同的组件模拟不同的页面，所以 React 应用中的路由要实现的是在不同的组件之间进行跳转。</p><img src="/medias/assets/images/41.png" align="left" width="50%"><img src="/medias/assets/images/42.gif" align="left" width="45%"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> react-router-dom<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-2-基本使用"><a href="#5-2-基本使用" class="headerlink" title="5.2 基本使用"></a>5.2 基本使用</h3><p>需求：为应用创建首页和关于我们两个页面。</p><ol><li><p>创建页面级路由组件</p><p><code>src/pages/Home.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Home() {  return &lt;div&gt;欢迎来到首页 🌶🌶🌶 &lt;/div&gt;;}export default Home;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>src/pages/News.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function News() {  return &lt;div&gt;欢迎来到关于新闻页 😁😁😁&lt;/div&gt;;}export default News;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>src/pages/Error.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function Error() {  return &lt;div&gt;页面走丢了 😭😭😭&lt;/div&gt;;}export default Error;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置路由规则</p><p><code>src/App.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { BrowserRouter, Routes, Route } from "react-router-dom";import News from "./pages/News";import Home from "./pages/Home";function App() {  // 注意: 在 v6 版本中，一旦路由规则匹配成功，则不再继续向后匹配，所以不再需要使用 exact 属性  return (    &lt;BrowserRouter&gt;      &lt;Routes&gt;        &lt;Route path="/" element={&lt;Home /&gt;} /&gt;        &lt;Route path="/news" element={&lt;News /&gt;} /&gt;      &lt;/Routes&gt;    &lt;/BrowserRouter&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>为应用添加用于跳转页面的链接地址</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { Link } from "react-router-dom";function App() {  // 注意: react-router-dom 提供的组件都必须被 BrowserRouter 组件包裹, 包括 Link 组件  return (    &lt;BrowserRouter&gt;      &lt;Link to="/"&gt;Home&lt;/Link&gt;      &lt;Link to="/news"&gt;News&lt;/Link&gt;    &lt;/BrowserRouter&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="5-3-NavLink-组件"><a href="#5-3-NavLink-组件" class="headerlink" title="5.3 NavLink 组件"></a>5.3 NavLink 组件</h3><p>Link 组件是用于生成普通链接的组件，导航链接应该使用 NavLink 组件，当前链接被激活时，链接元素身上会自动添加 active 激活类名。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;NavLink to="/"&gt;  Home&lt;/NavLink&gt;&lt;NavLink to="/news"&gt;  News&lt;/NavLink&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过以下方式更改默认的激活类名。</p> <pre class="line-numbers language-react" data-language="react"><code class="language-react">const activeClassName = ({ isActive }) =&gt; (isActive ? "on" : "off");&lt;NavLink to="/" className={activeClassName}&gt;  Home&lt;/NavLink&gt;&lt;NavLink to="/about" className={activeClassName}&gt;  News&lt;/NavLink&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过同样的方式也可以为导航链接添加行内样式。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;NavLink to="/" style={({ isActive }) =&gt; ({ color: isActive ? "red" : "blue" })}&gt;  Home&lt;/NavLink&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="5-4-404-与-Navigate"><a href="#5-4-404-与-Navigate" class="headerlink" title="5.4 404 与 Navigate"></a>5.4 404 与 Navigate</h3><p>在路由规则配置的最后，可以使用 <code>*</code> 号匹配不存在的路由规则，匹配到以后可以指定表示 404 的页面组件。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import Error from "./pages/Error";function App() {  return (    &lt;BrowserRouter&gt;      &lt;Routes&gt;        &lt;Route path="*" element={&lt;Error /&gt;} /&gt;      &lt;/Routes&gt;    &lt;/BrowserRouter&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不想展示 404，也可以将路由重定向到应用中已经存在的页面路由组件。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { Navigate } from "react-router-dom";function App() {  return (    &lt;BrowserRouter&gt;      &lt;Routes&gt;        &lt;Route path="*" element={&lt;Navigate to="/" /&gt;} /&gt;      &lt;/Routes&gt;    &lt;/BrowserRouter&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-嵌套路由"><a href="#5-5-嵌套路由" class="headerlink" title="5.5 嵌套路由"></a>5.5 嵌套路由</h3><p>嵌套路由可以理解为二级路由乃至三级路由. 就是在路由组件中还包含路由匹配组件。</p><img src="/medias/assets/images/40.png" align="left" width="55%"><ol><li><p>配置新闻页面中的二级路由规则</p><p><code>src/App.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import News from "./pages/News";import InnerNews from "./pages/InnerNews";import OuterNews from "./pages/OuterNews";function App() {  return (    &lt;BrowserRouter&gt;      &lt;Routes&gt;        &lt;Route path="/news" element={&lt;News /&gt;}&gt;          &lt;Route path="inner" element={&lt;InnerNews /&gt;} /&gt;          &lt;Route path="outer" element={&lt;OuterNews /&gt;} /&gt;        &lt;/Route&gt;      &lt;/Routes&gt;    &lt;/BrowserRouter&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在一级路由页面组件 ( 新闻页面组件 ) 中放置路由插槽、配置跳转链接</p><p><code>src/pages/News.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { NavLink, Outlet } from "react-router-dom";function News() {  return (    &lt;div&gt;      &lt;p&gt;欢迎来到关于新闻页 😁😁😁&lt;/p&gt;      &lt;NavLink to="/news/inner"&gt;国内新闻&lt;/NavLink&gt;      &lt;NavLink to="/news/outer"&gt;国际新闻&lt;/NavLink&gt;      &lt;Outlet /&gt;    &lt;/div&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="5-6-索引路由"><a href="#5-6-索引路由" class="headerlink" title="5.6 索引路由"></a>5.6 索引路由</h3><p>通过索引路由可以指定默认显示的二级路由，比如上述案例中，当进入新闻页面时二级路由组件所在区域是空白的，该缺陷就可以通过索引路由补救。</p><p><code>src/App.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  // 注意: 索引路由不能有 path  return (    &lt;BrowserRouter&gt;      &lt;Routes&gt;        &lt;Route path="/news" element={&lt;News /&gt;}&gt;          &lt;Route index element={&lt;InnerNews /&gt;} /&gt;          &lt;Route path="inner" element={&lt;InnerNews /&gt;} /&gt;          &lt;Route path="outer" element={&lt;OuterNews /&gt;} /&gt;        &lt;/Route&gt;      &lt;/Routes&gt;    &lt;/BrowserRouter&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-7-编程式导航"><a href="#5-7-编程式导航" class="headerlink" title="5.7 编程式导航"></a>5.7 编程式导航</h3><p>通过事件的方式进行跳转。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useNavigate } from "react-router-dom";function Home() {  const navigate = useNavigate();  return &lt;button onClick={() =&gt; navigate("/news")}&gt;News&lt;/button&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-8-路由参数"><a href="#5-8-路由参数" class="headerlink" title="5.8 路由参数"></a>5.8 路由参数</h3><p>通过路由参数可以实现在不同的页面组件之间跳转时携带数据。</p><p>比如在文章列表页面中，点击某一篇文章跳转到文章详情页面，此时就需要将被点击的那篇文章的 id 传递到文章详情页面。</p><p>在应用中会有很多篇文章，但是文章详情页面组件只有一个，可以将它理解为文章详情的模板页面，在跳转到这个模板页面时，需要将文章id传进来，在模板页面中需要通过 id 获取详情，从而展示详情数据。</p><ol><li><p>添加路由规则并指定跳转到该路由时需要传递参数</p><p><code>src/App.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import Detail from "./pages/Detail";function App() {  return (    &lt;BrowserRouter&gt;      &lt;Routes&gt;        &lt;Route path="/detail/:id" element={&lt;Detail /&gt;} /&gt;      &lt;/Routes&gt;    &lt;/BrowserRouter&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在实现跳转的路由链接中传递参数</p><p><code>src/pages/Home.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { Link } from "react-router-dom";function Home() {  return (    &lt;ul&gt;      &lt;li&gt;        &lt;Link to="/detail/1"&gt;老旧小区改造, 这三区名单来了!&lt;/Link&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;Link to="/detail/2"&gt;穿鞋把脚放列车座位上, 韩总统候选人尹锡悦引发网友批..&lt;/Link&gt;      &lt;/li&gt;    &lt;/ul&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在目标跳转页面组件接收路由参数</p><p><code>src/pages/Detail.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useParams } from "react-router-dom";function Detail() {  const { id } = useParams();  return &lt;div&gt;Detail Page {id}&lt;/div&gt;;}export default Detail;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="5-9-查询参数"><a href="#5-9-查询参数" class="headerlink" title="5.9 查询参数"></a>5.9 查询参数</h3><ol><li><p>定义路由时不需要加路由参数占位符</p><p><code>src/App.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  return (    &lt;BrowserRouter&gt;      &lt;Routes&gt;        &lt;Route path="/detail" element={&lt;Detail /&gt;} /&gt;      &lt;/Routes&gt;    &lt;/BrowserRouter&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在链接跳转时添加参数</p><p><code>src/pages/Home.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { Link } from "react-router-dom";function Home() {  return (    &lt;ul&gt;      &lt;li&gt;        &lt;Link to="/detail?id=1"&gt;老旧小区改造, 这三区名单来了!&lt;/Link&gt;      &lt;/li&gt;      &lt;li&gt;        &lt;Link to="/detail?id=2"&gt;穿鞋把脚放列车座位上, 韩总统候选人尹锡悦引发网友批..&lt;/Link&gt;      &lt;/li&gt;    &lt;/ul&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在目标跳转页面组件接收路由参数</p><p><code>src/pages/Detail.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useSearchParams } from "react-router-dom";function Detail() {  const [searchParams] = useSearchParams();  return &lt;div&gt;Detail Page {searchParams.get("id")}&lt;/div&gt;;}export default Detail;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="5-10-路由组件懒加载"><a href="#5-10-路由组件懒加载" class="headerlink" title="5.10 路由组件懒加载"></a>5.10 路由组件懒加载</h3><p>默认情况下应用中所有的组件都被打包到了同一个文件中，就是说应用初始加载时就加载了所有的组件，这样会导致初始加载应用时间长用户体验差。</p><p>解决办法就是在打包应用时以页面组件为单位，将不同的页面组件打包到不同的文件中，初始加载时只加载用户访问的页面组件。</p><ol><li><p>通过 lazy, import 异步加载组件</p><p><code>src/App.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { lazy } from 'react';const Home = lazy(() =&gt; import(/* webpackChunkName: "Home" */ "./pages/Home"));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>通过 import 方法动态导入模块时，webpack 会将导入的模块拆分成单独的文件。</p><p>webpackChunkName 定义拆分文件名称。</p></li><li><p>在调用异步加载的组件时，组件的外面必须包裹 Suspense 组件，通过 Suspense 组件可以指定组件加载过程中的等待 UI。</p><p><code>src/App.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { Suspense } from "react";function App() {  return (    &lt;BrowserRouter&gt;      &lt;Routes&gt;        &lt;Route          path="/"          element={            &lt;Suspense fallback={&lt;div&gt;loading...&lt;/div&gt;}&gt;              &lt;Home /&gt;            &lt;/Suspense&gt;          }        /&gt;      &lt;/Routes&gt;    &lt;/BrowserRouter&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>封装 Loadable 组件以复用 Suspense 组件</p><p><code>src/common/Loadable.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { Suspense } from "react";function Loadable(Component) {  return function (props) {    return (      &lt;Suspense fallback={&lt;div&gt;loading...&lt;/div&gt;}&gt;        &lt;Component {...props} /&gt;      &lt;/Suspense&gt;    );  };}export default Loadable;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>src/App.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import Loadable from "./pages/Loadable";const Home = Loadable(  lazy(() =&gt; import(/* webpackChunkName: "Home" */ "./pages/Home")));function App() {  return (    &lt;BrowserRouter&gt;      &lt;Routes&gt;        &lt;Route path="/" element={&lt;Home /&gt;}/&gt;      &lt;/Routes&gt;    &lt;/BrowserRouter&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="5-11-路由守卫-单路由守卫"><a href="#5-11-路由守卫-单路由守卫" class="headerlink" title="5.11 路由守卫 单路由守卫"></a>5.11 路由守卫 单路由守卫</h3><p>当用户去访问那些需要鉴权以后才能进入的路由组件时，需要先通过路由守卫对其进行鉴权，只有通过才允许用户进入，否则进行重定向。</p><ol><li><p>定义执行鉴权的钩子函数供路由守卫进行使用</p><p><code>src/common/useAuth.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useEffect, useState } from "react";function isAuth() {  // 模拟鉴权成功  return Promise.resolve();  // 模拟鉴权失败  // return Promise.reject();}function useAuth() {  // 用于存储鉴权结果  // true 成功  // false 失败 (默认值)  const [auth, setAuth] = useState(false);  // 用于存储异步状态  // true 等待 (默认值)  // false 结束  const [loading, setLoading] = useState(true);  useEffect(() =&gt; {    // 开始鉴权    isAuth()      // 成功      .then(() =&gt; setAuth(true))      // 失败      .catch(() =&gt; setAuth(false))      // 不管成功还是失败, 都将异步状态更新为结束      .finally(() =&gt; setLoading(false));  }, []);  // 返回异步状态和鉴权结果  return { loading, auth };}export default useAuth;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建用于实现身份验证的路由守卫组件</p><p><code>src/common/AuthGuard.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { Navigate } from "react-router-dom";import useAuth from "../hooks/useAuth";function AuthGuard({ children }) {  // 调用鉴权钩子, 获取异步状态及鉴权结果  const { auth, loading } = useAuth();  // 如果异步状态为等待, 渲染等待过程中的UI界面  if (loading) return &lt;div&gt;loading...&lt;/div&gt;;  // 判断鉴权结果, 如果通过, 进入目标路由组件, 如果没通过, 重定向到执行授权的页面  return auth ? children : &lt;Navigate to="/login" /&gt;;}export default AuthGuard;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>对 Admin 组件，即需要鉴权以后才能访问的页面路由组件进行守卫</p><p><code>src/App.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import AuthGuard from "./common/AuthGuard";function App() {  return (    &lt;BrowserRouter&gt;      &lt;Routes&gt;        &lt;Route path="/admin" element={&lt;AuthGuard&gt;&lt;Admin /&gt;&lt;/AuthGuard&gt;}/&gt;      &lt;/Routes&gt;    &lt;/BrowserRouter&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="5-12-路由守卫-多路由守卫"><a href="#5-12-路由守卫-多路由守卫" class="headerlink" title="5.12 路由守卫 多路由守卫"></a>5.12 路由守卫 多路由守卫</h3><p>通过 Outlet 路由插座组件可以实现多路由守卫。</p><p><code>src/App.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import Admin from "./pages/Admin";import AuthGuardOutlet from "./common/AuthGuardOutlet";function App() {  return (    &lt;BrowserRouter&gt;        &lt;Route path="/admin" element={&lt;AuthGuardOutlet /&gt;}&gt;          &lt;Route path="" element={&lt;Admin /&gt;} /&gt;        &lt;/Route&gt;      &lt;/Routes&gt;    &lt;/BrowserRouter&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>src/common/AuthGuardOutlet.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { Navigate, Outlet } from "react-router-dom";import useAuth from "../hooks/useAuth";function AuthGuardOutlet() {  // 调用鉴权钩子, 获取异步状态及鉴权结果  const { auth, loading } = useAuth();  // 如果异步状态为等待, 渲染等待过程中的UI界面  if (loading) return &lt;div&gt;loading...&lt;/div&gt;;  // 判断鉴权结果, 如果通过, 渲染路由插座组件, 让 children 组件能够渲染到插座组件中  // 如果没通过, 重定向到执行授权的页面  return auth ? &lt;Outlet /&gt; : &lt;Navigate to="/login" /&gt;;}export default AuthGuardOutlet;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-13-滚动行为修正"><a href="#5-13-滚动行为修正" class="headerlink" title="5.13 滚动行为修正"></a>5.13 滚动行为修正</h3><p>问题：在 A 页面中将页面滚动到底部，切换到 B 页面，此时滚动条仍处于 A 页面的位置。</p><p>解决问题的方式就是监听路由切换行为，当路由发生切换行为时，让页面自动回到顶部。</p><p><code>src/common/ScrollTop.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useEffect } from "react";import { useLocation } from "react-router-dom";function ScrollTop() {  const { pathname } = useLocation();  useEffect(() =&gt; {    window.scrollTo(0, 0);  }, [pathname]);  return null;}export default ScrollTop;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>src/App.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import ScrollTop from "./common/ScrollTop";function App() {  return (    &lt;BrowserRouter&gt;      &lt;ScrollTop /&gt;    &lt;/BrowserRouter&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-14-useRoutes"><a href="#5-14-useRoutes" class="headerlink" title="5.14 useRoutes"></a>5.14 useRoutes</h3><p>通过 useRoutes 钩子函数可以实现通过 JavaScript 配置对象的方式定义路由规则。</p><p><code>src/AppRoute.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useRoutes } from "react-router-dom";import Home from "./pages/Home";import InnerNews from "./pages/InnerNews";import News from "./pages/News";import OuterNews from "./pages/OuterNews";const routes = [  { path: "/", element: &lt;Home /&gt; },  {    path: "/news",    element: &lt;News /&gt;,    children: [      { path: "inner", element: &lt;InnerNews /&gt; },      { path: "outer", element: &lt;OuterNews /&gt; },    ],  },]function AppRoute() {  let element = useRoutes(routes);  return element;}export default AppRoute;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>src/App.js</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { BrowserRouter } from "react-router-dom";import AppRoute from "./AppRoute";function App() {  return (    &lt;BrowserRouter&gt;      &lt;AppRoute /&gt;    &lt;/BrowserRouter&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-15-嵌套路由与布局组件"><a href="#5-15-嵌套路由与布局组件" class="headerlink" title="5.15 嵌套路由与布局组件"></a>5.15 嵌套路由与布局组件</h3><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/App.jsimport { BrowserRouter, Route, Routes } from "react-router-dom";import AdminHome from "./admin/AdminHome";import AdminLayout from "./admin/AdminLayout";import Layout from "./components/Layout";import About from "./pages/About";import Home from "./pages/Home";export default  function App() {  return (    &lt;BrowserRouter&gt;      &lt;Routes&gt;        &lt;Route path="/" element={&lt;Layout /&gt;}&gt;          &lt;Route path="" element={&lt;Home /&gt;} /&gt;          &lt;Route path="/about" element={&lt;About /&gt;} /&gt;        &lt;/Route&gt;        &lt;Route path="/admin" element={&lt;AdminLayout /&gt;}&gt;          &lt;Route path="" element={&lt;AdminHome /&gt;} /&gt;        &lt;/Route&gt;      &lt;/Routes&gt;    &lt;/BrowserRouter&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import Header from "./Header";import Footer from "./Footer";import { Outlet } from "react-router-dom";export default function Layout() {  return (    &lt;&gt;      &lt;Header /&gt;      &lt;Outlet /&gt;      &lt;Footer /&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-服务端渲染"><a href="#6-服务端渲染" class="headerlink" title="6. 服务端渲染"></a>6. 服务端渲染</h2><h3 id="6-1-概述"><a href="#6-1-概述" class="headerlink" title="6.1 概述"></a>6.1 概述</h3><h4 id="6-1-1-渲染概述"><a href="#6-1-1-渲染概述" class="headerlink" title="6.1.1 渲染概述"></a>6.1.1 渲染概述</h4><h5 id="1-服务端渲染-SSR"><a href="#1-服务端渲染-SSR" class="headerlink" title="1. 服务端渲染 SSR"></a>1. 服务端渲染 SSR</h5><p>服务端渲染 ( server-side rendering ) 是指数据和 HTML 模板在服务端进行拼接，完成拼接后再发送到客户端进行解析。</p><img src="/medias/assets/next/02.png"><h5 id="2-客户端渲染-CSR"><a href="#2-客户端渲染-CSR" class="headerlink" title="2. 客户端渲染 CSR"></a>2. 客户端渲染 CSR</h5><p>客户端渲染 ( client-side rendering ) 是指数据和 HTML 模板在客户端浏览器中进行拼接，拼接完成后再追加到 DOM 树中供浏览器解析。</p><img src="/medias/assets/images/csr.png"><h5 id="3-静态生成-SSG"><a href="#3-静态生成-SSG" class="headerlink" title="3. 静态生成 SSG"></a>3. 静态生成 SSG</h5><p>静态站点生成 ( static stie generation ) 是指在站点构建阶段进行数据和HTML模板的拼接并生成对应的静态的 HTML 页面。</p><h4 id="6-1-2-渲染发展史"><a href="#6-1-2-渲染发展史" class="headerlink" title="6.1.2 渲染发展史"></a>6.1.2 渲染发展史</h4><h5 id="1-传统意义上的服务器端渲染"><a href="#1-传统意义上的服务器端渲染" class="headerlink" title="1. 传统意义上的服务器端渲染"></a>1. 传统意义上的服务器端渲染</h5><p>传统意义上的服务器端渲染存在的问题主要是用户体验差：</p><ol><li>在网速比较慢的情况下，页面长时间处于白屏状态，用于等待时易产生焦虑。</li><li>每次页面跳转都会重新加载整个页面体验差。</li></ol><h5 id="2-基于前端框架的客端户渲染"><a href="#2-基于前端框架的客端户渲染" class="headerlink" title="2. 基于前端框架的客端户渲染"></a>2. 基于前端框架的客端户渲染</h5><p>基于前端框架的客户端渲染虽然解决了传统服务端渲染用户体验差的问题，但也随之带来了新的问题：</p><p>客户端渲染不支持 SEO，导致页面很难被搜索引擎收录。</p><h5 id="3-基于前端框架的服务端渲染"><a href="#3-基于前端框架的服务端渲染" class="headerlink" title="3. 基于前端框架的服务端渲染"></a>3. 基于前端框架的服务端渲染</h5><p>基于前端框架的服务端渲染解决了用户体验差的问题，也解决了 SEO 支持不友好的问题。</p><p>缺点是数据和HTML模板在服务端进行，访问速度还是会受一些影响，而且服务端只能使用 JavaScript 运行时。</p><h5 id="4-基于静态生成的服务端渲染"><a href="#4-基于静态生成的服务端渲染" class="headerlink" title="4. 基于静态生成的服务端渲染"></a>4. 基于静态生成的服务端渲染</h5><p>基于静态生成的服务端渲染在访问速度上是最具有优势的，也不存在 SEO 支持不友好的问题。</p><p>但是它只适用于页面内容不会发生频繁变化的场景，比如企宣，商城，博客，新闻等。</p><h3 id="6-2-Next-js"><a href="#6-2-Next-js" class="headerlink" title="6.2 Next.js"></a>6.2 Next.js</h3><h4 id="6-2-1-概述"><a href="#6-2-1-概述" class="headerlink" title="6.2.1 概述"></a>6.2.1 概述</h4><p><a href="https://nextjs.org/">Next.js</a> 是集成式 React 服务端渲染应用框架，用于构建 SEO 友好的 SPA 应用。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 全局安装 next.js 脚手架工具</span><span class="token function">npm</span> <span class="token function">install</span> -g create-next-app<span class="token comment"># 创建 next.js 应用</span>create-next-app next-tutorial<span class="token comment"># 启动开发服务器</span><span class="token function">npm</span> run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-2-基于文件系统的路由"><a href="#6-2-2-基于文件系统的路由" class="headerlink" title="6.2.2 基于文件系统的路由"></a>6.2.2 基于文件系统的路由</h4><h5 id="1-路由匹配"><a href="#1-路由匹配" class="headerlink" title="1. 路由匹配"></a>1. 路由匹配</h5><p>在 Next.js 中，页面是存储在 pages 文件中的 React 组件，组件文件名称与路由相关联。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// pages/index.js ====&gt; http://localhost:3000/export default function Home() {  return &lt;div&gt;首页&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// pages/about.js ====&gt; http://localhost:3000/aboutexport default function About() {  return &lt;div&gt;关于我们&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// pages/post/index.js ====&gt; http://localhost:3000/postexport default function Post() {  return &lt;div&gt;这是博客索引目录&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// pages/blog/first-blog.js ====&gt; http://localhost:3000/blog/first-postexport default function FirstPost () {  return &lt;div&gt;这是我的第一篇博客文章&lt;/div&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// pages/post/[pid].js ====&gt; http://localhost:3000/post/1import { useRouter } from "next/router";export default function Post() {  const router = useRouter(); // routter.query ====&gt; {"pid": "1"}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// pages/post/[pid].js ====&gt; http://localhost:3000/post/1?name=zhangsanimport { useRouter } from "next/router";export default function Post() {  const router = useRouter(); // routter.query ====&gt; {"pid": "1", "name": "张三"}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// pages/order/[uid]/[status].js ====&gt; http://localhost:3000/order/2/allimport { useRouter } from "next/router";export default function Orders() {  const router = useRouter(); // router.query ====&gt; {"uid": "2", "status": "all"}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// pages/404.js ====&gt; 自定义404页面export default function NotFound() {  return &lt;div&gt;这是自定义的404页面&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-路由跳转"><a href="#2-路由跳转" class="headerlink" title="2. 路由跳转"></a>2. 路由跳转</h5><p>Link 组件默认进行客户端路由跳转，如果浏览器中 JavaScript 被禁用则使用链接进行服务端路由跳转。</p><p>Link 组件中不应添加除 href 属性以外的属性，其余属性添加到 a 标签上，比如 title、onClick。</p><p>Link 组件通过预取(在生产中)功能自动优化应用程序以获得最佳性能。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import Link from "next/link";export default function Home() {  return (    &lt;Link href="/about"&gt;      &lt;a title="关于我们"&gt;关于我们&lt;/a&gt;    &lt;/Link&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import Link from "next/link";const posts = [  { id: 1, title: "这是id为1的文章" },  { id: 2, title: "这是id为2的文章" },];export default function Post() {  return (    &lt;ul&gt;      {posts.map((post) =&gt; (        &lt;li key={post.id}&gt;          &lt;Link href={`/post/${post.id}`}&gt;            &lt;a&gt;{post.title}&lt;/a&gt;          &lt;/Link&gt;        &lt;/li&gt;      ))}    &lt;/ul&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import Link from "next/link";const posts = [  { id: 1, title: "这是id为1的文章" },  { id: 2, title: "这是id为2的文章" },];export default function Post() {  return (    &lt;ul&gt;      {posts.map((post) =&gt; (        &lt;li key={post.id}&gt;          &lt;Link href={{ pathname: "/post/[pid]", query: { pid: post.id } }}&gt;            &lt;a&gt;{post.title}&lt;/a&gt;          &lt;/Link&gt;        &lt;/li&gt;      ))}    &lt;/ul&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useRouter } from "next/router";export default function Home() {  const router = useRouter();  return &lt;button onClick={() =&gt; router.push("/about")}&gt;关于我们&lt;/button&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import Link from "next/link";export default function Home() {  const onClickHandler = (event) =&gt; {    alert("clicked");    event.preventDefault();  };  return (    &lt;Link href="/about"&gt;      &lt;a onClick={onClickHandler}&gt;关于我们&lt;/a&gt;    &lt;/Link&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-3-API-路由"><a href="#6-2-3-API-路由" class="headerlink" title="6.2.3 API 路由"></a>6.2.3 API 路由</h4><p>通过 API 路由开发者可以为<strong>客户端</strong>应用提供 API 接口。</p><p>API 路由是服务端应用程序，代码将会被打包到服务端应用程序，它不会增加客户端打包文件的体积。</p><h5 id="1-基本使用-1"><a href="#1-基本使用-1" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// pages/api/index.js ====&gt; http://localhost:3000/api</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// req: 请求对象</span>  <span class="token comment">// res: 响应对象</span>  <span class="token comment">// 对客户端进行响应</span>  res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> msg<span class="token operator">:</span> <span class="token string">"API Route is running"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// pages/api/posts/index.js</span><span class="token comment">// 获取文章列表: GET  http://localhost:3000/api/posts</span><span class="token comment">// 添加文章:    POST  http://localhost:3000/api/posts</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"GET"</span><span class="token operator">:</span>      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> msg<span class="token operator">:</span> <span class="token string">"客户端在获取文章列表"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"POST"</span><span class="token operator">:</span>      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> msg<span class="token operator">:</span> <span class="token string">"客户端在添加文章"</span><span class="token punctuation">,</span> body<span class="token operator">:</span> req<span class="token punctuation">.</span>body <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span>msg<span class="token operator">:</span> <span class="token string">"API 不存在"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// pages/api/posts/[pid].js</span><span class="token comment">// 根据pid获取文章: GET     http://localhost:3000/api/post/12</span><span class="token comment">// 根据pid删除文章: DELETE  http://localhost:3000/api/post/12</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"GET"</span><span class="token operator">:</span>      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> msg<span class="token operator">:</span> <span class="token string">"客户端在根据pid获取文章"</span><span class="token punctuation">,</span> pid<span class="token operator">:</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>pid <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"DELETE"</span><span class="token operator">:</span>      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> msg<span class="token operator">:</span> <span class="token string">"客户端在根据pid删除文章"</span><span class="token punctuation">,</span> pid<span class="token operator">:</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>pid <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// pages/api/posts/[...pids].js </span><span class="token comment">// 根据pid批量删除文章: DELETE http://localhost:3000/api/posts/2/3</span><span class="token comment">// [pid].js 的匹配优先级高于 [...pid].js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"DELETE"</span><span class="token operator">:</span>      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> msg<span class="token operator">:</span> <span class="token string">"客户端在根据pid批量删除文章"</span><span class="token punctuation">,</span> pid<span class="token operator">:</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>pid <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-连接数据库"><a href="#2-连接数据库" class="headerlink" title="2. 连接数据库"></a>2. 连接数据库</h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// services/dbConnection.js</span><span class="token keyword">import</span> mongoose <span class="token keyword">from</span> <span class="token string">"mongoose"</span><span class="token punctuation">;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">dbConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment">// 判断数据库是否已经连接过, 如果已经连接过, 不再重复连接</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>mongoose<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 如果数据库没有连接过, 链接数据库</span>  <span class="token keyword">await</span> mongoose<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"mongodb://localhost:27017/test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> dbConnect<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// models/Post.js</span><span class="token keyword">import</span> mongoose <span class="token keyword">from</span> <span class="token string">"mongoose"</span><span class="token punctuation">;</span><span class="token keyword">const</span> PostSchema <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mongoose<span class="token punctuation">.</span>Schema</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  title<span class="token operator">:</span> <span class="token punctuation">{</span>    type<span class="token operator">:</span> String<span class="token punctuation">,</span>    required<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"标题不能为空"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    unique<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    maxlength<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">"标题不能超过40个字符"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  description<span class="token operator">:</span> <span class="token punctuation">{</span>    type<span class="token operator">:</span> String<span class="token punctuation">,</span>    required<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    maxlength<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"描述不能超过200个字符"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Post <span class="token operator">=</span> mongoose<span class="token punctuation">.</span>models<span class="token punctuation">.</span>Post <span class="token operator">||</span> mongoose<span class="token punctuation">.</span><span class="token function">model</span><span class="token punctuation">(</span><span class="token string">"Post"</span><span class="token punctuation">,</span> PostSchema<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Post<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// pages/api/posts/index.js</span><span class="token keyword">import</span> Post <span class="token keyword">from</span> <span class="token string">"@/models/Post"</span><span class="token punctuation">;</span><span class="token keyword">import</span> dbConnect <span class="token keyword">from</span> <span class="token string">"@/services/dbConnection"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">await</span> <span class="token function">dbConnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">"GET"</span><span class="token operator">:</span>      <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> Post<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> posts <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token string">"POST"</span><span class="token operator">:</span>      <span class="token keyword">const</span> post <span class="token operator">=</span> <span class="token keyword">await</span> Post<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span> success<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> post <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">{</span> success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token operator">:</span> <span class="token string">"api 不存在"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// jsconfig.json</span><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"@/models/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"models/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"@/services/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"services/*"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-4-预渲染"><a href="#6-2-4-预渲染" class="headerlink" title="6.2.4 预渲染"></a>6.2.4 预渲染</h4><p>预渲染是指在构建阶段对应用程序进行编译，编译结果就是静态的 HTML 文件。</p><p>当客户端向服务端发送请求后，服务端直接将应用构建时编译的 HTML 文件发送到客户端。</p><p>默认情况下，如果组件不通过请求获取外部数据，Next.js 会在构建阶段将其编译为静态 HTML 文件。</p><p>预渲染适用于页面内容不会发生频繁变化的场景，比如博客、新闻、电商前台、文档、营销页面等。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">export default function About() {  return &lt;div&gt;About&lt;/div&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="1-基于页面组件的预渲染"><a href="#1-基于页面组件的预渲染" class="headerlink" title="1. 基于页面组件的预渲染"></a>1. 基于页面组件的预渲染</h5><p>在构建阶段如果组件需要获取外部数据，在组件中要导出名为 getStaticProps 的异步方法，通过它返回组件所需数据，它会在应用的构建阶段执行。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import axios from "axios";export default function Posts({ posts }) {  return (    &lt;ul&gt;      {posts.map((post) =&gt; (        &lt;li key={post.id}&gt;{post.title}&lt;/li&gt;      ))}    &lt;/ul&gt;  );}export async function getStaticProps() {  let { data } = await axios.get("https://jsonplaceholder.typicode.com/posts");  return {    props: {      posts: data,    },  };}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-基于动态路由的预渲染"><a href="#2-基于动态路由的预渲染" class="headerlink" title="2. 基于动态路由的预渲染"></a>2. 基于动态路由的预渲染</h5><p>基于动态路由的预渲染是指根据路由动态参数编译 HTML 静态文件。</p><p>该路由拥有多少参数就会编译出多少静态 HTML 文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g json-server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"todos"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"吃饭"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"睡觉"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"打豆豆"</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">json-server db.json -p <span class="token number">3001</span> -w<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// pages/todos/[id].jsimport axios from "axios";import { useRouter } from "next/router";export default function Todo({ todo }) {  const router = useRouter();  if (router.isFallback) return &lt;div&gt;Loading...&lt;/div&gt;;  return (    &lt;div&gt;      {todo.id} {todo.title}    &lt;/div&gt;  );}// 第一步: 在构建时先获取所有路由参数export async function getStaticPaths() {  return {    paths: [      {        params: { id: "1" },      },      {        params: { id: "2" },      },    ],    // false 当访问没有被预渲染的路径时展示404页面    // true: 当访问没有被预渲染的路径时, 先展示后备UI, Next.js 会在客户端请求时进行预渲染, 完后后显示预渲染结果    fallback: true,  };}// 第二步: 根据路由参数编译静态 HTML 文件// 在构建时 Next 先调用 getStaticPaths 方法获取所有路由参数// 遍历路由参数, 不断调用 getStaticProps 方法编译静态HTML文件export async function getStaticProps({ params }) {  let response = await axios.get(`http://localhost:3001/todos/${params.id}`);  await delay(2000);  return {    props: {      todo: response.data,    },    // 设置当前页面缓存的过期时间    // 当前页面被访问时, 如果缓存时间过期, 触发当前页面的重新预渲染    // 当次访问用户看到的仍然是缓存页面, 当重新预渲染完成后, 下次用户访问时看到的就是新页面了    revalidate: 10,  };}function delay(time) {  return new Promise((resolve) =&gt; setTimeout(resolve, time));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-5-服务端渲染"><a href="#6-2-5-服务端渲染" class="headerlink" title="6.2.5 服务端渲染"></a>6.2.5 服务端渲染</h4><p>服务端渲染是指在客户端发送请求时，服务器端即时编译 HTML，编译完成后将 HTML 代码发送到客户端。</p><p>服务端渲染方式适用于页面内容频繁发生变化场景且需要 SEO 的场景。</p><p>getServerSideProps 方法在服务端执行，内部可以调用 API 路由，也可以直接查询数据库。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import Post from "@/models/Post";export default function Posts({ posts }) {  return (    &lt;ul&gt;      {posts.map((post, index) =&gt; (        &lt;li key={index}&gt;          &lt;h1&gt;{post.title}&lt;/h1&gt;          &lt;p&gt;{post.description}&lt;/p&gt;        &lt;/li&gt;      ))}    &lt;/ul&gt;  );}export async function getServerSideProps() {  const posts = await Post.find({});  return {    props: {      posts: JSON.parse(JSON.stringify(posts)),    },  };}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-6-混合渲染"><a href="#6-2-6-混合渲染" class="headerlink" title="6.2.6 混合渲染"></a>6.2.6 混合渲染</h4><p>混合渲染是指客户端渲染和服务端渲染、客户端渲染和预渲染可以混合使用。</p><p>比如文章详情页面，文章内容不会经常变化可以使用预渲染，而文章评论需要实时更新可以使用客户端渲染。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// pages/api/comments/index.jsexport default function comments(req, res) {  res.send([    { id: 1, content: "评论1" },    { id: 2, content: "评论2" },  ]);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import axios from "axios";import { useState, useEffect } from "react";export default function Posts({ posts }) {  const [comments, setComments] = useState([]);  useEffect(() =&gt; {    axios.get("http://localhost:3000/api/comments").then((response) =&gt; {      setComments(response.data);    });  }, []);  return (    &lt;&gt;      {/* 预渲染部分开始 */}      &lt;ul&gt;        {posts.map((post, index) =&gt; (          &lt;li key={index}&gt;            &lt;h1&gt;{post.title}&lt;/h1&gt;            &lt;p&gt;{post.description}&lt;/p&gt;          &lt;/li&gt;        ))}      &lt;/ul&gt;      {/* 预渲染部分结束 */}      {/* 动态渲染部分开始 */}      &lt;ul&gt;        {comments.map((comment) =&gt; (          &lt;li key={comment.id}&gt;{comment.content}&lt;/li&gt;        ))}      &lt;/ul&gt;      {/* 动态渲染部分结束 */}    &lt;/&gt;  );}export async function getStaticProps() {  let response = await axios.get("http://localhost:3000/api/posts");  return {    props: {      posts: response.data.posts,    },  };}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-7-为应用添加样式"><a href="#6-2-7-为应用添加样式" class="headerlink" title="6.2.7 为应用添加样式"></a>6.2.7 为应用添加样式</h4><p>Next.js 推荐将所有样式表文件存储在 styles 目录中。</p><h5 id="1-全局样式"><a href="#1-全局样式" class="headerlink" title="1. 全局样式"></a>1. 全局样式</h5><p>全局样式表应该在 _app.js 文件中被导入。</p><p>_app.js 文件中存储的是应用程序根组件。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// pages/_app.jsimport "../styles/globals.css";function MyApp({ Component, pageProps }) {  return &lt;Component {...pageProps} /&gt;;}export default MyApp;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-组件级样式"><a href="#2-组件级样式" class="headerlink" title="2. 组件级样式"></a>2. 组件级样式</h5><pre class="line-numbers language-react" data-language="react"><code class="language-react">import styles from '../styles/Home.module.css'export default function Home() {  return &lt;div className={styles.container}&gt;&lt;/div&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-8-布局组件"><a href="#6-2-8-布局组件" class="headerlink" title="6.2.8 布局组件"></a>6.2.8 布局组件</h4><h5 id="1-情况一"><a href="#1-情况一" class="headerlink" title="1. 情况一"></a>1. 情况一</h5><p>应用中的每一个页面都有公共组件，且都是相同的公共组件，此时可以在根组件中使用布局组件。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// components/Header.jsexport default function Header() {  return &lt;div&gt;Header&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// components/Footer.jsexport default  function Footer() {  return &lt;div&gt;Footer&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// components/Layout.jsimport Footer from "./Footer";import Header from "./Header";export default function Layout({ children }) {  return (    &lt;&gt;      &lt;Header /&gt;      {children}      &lt;Footer /&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// pages/_app.jsimport Layout from "../components/Layout";export default function MyApp({ Component, pageProps }) {  return (    &lt;Layout&gt;      &lt;Component {...pageProps} /&gt;    &lt;/Layout&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-情况二"><a href="#2-情况二" class="headerlink" title="2. 情况二"></a>2. 情况二</h5><p>应用中的页面有公共组件，但不是每一个页面都有相同的公共组件。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// pages/about.jsimport Layout from "../components/Layout";export default function About() {  return (    &lt;Layout&gt;      &lt;div&gt;About&lt;/div&gt;    &lt;/Layout&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-9-Head-组件"><a href="#6-2-9-Head-组件" class="headerlink" title="6.2.9 Head 组件"></a>6.2.9 Head 组件</h4><p>通过 Head 组件可以为不同的页面设置不同的头信息，比如标题、描述、关键字等信息。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// pages/about.jsimport Head from "next/head";export default function about() {  return (    &lt;Head&gt;      &lt;title&gt;关于我们&lt;/title&gt;      &lt;meta name="description" content="关于我们页面的描述内容" /&gt;    &lt;/Head&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每个页面中公共的头信息可以放在 _app.js 文件中。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import Head from "next/head";export default function MyApp({ Component, pageProps }) {  return (    &lt;&gt;      &lt;Head&gt;        &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;      &lt;/Head&gt;      &lt;Component {...pageProps} /&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-10-Image-组件"><a href="#6-2-10-Image-组件" class="headerlink" title="6.2.10 Image 组件"></a>6.2.10 Image 组件</h4><p>使用 Image 组件加载图片可以优化图像体积、格式、图片懒加载。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import Image from "next/image";export default function about() {  return (    &lt;&gt;      {[1, 2, 3, 4, 5].map((path) =&gt; (        &lt;div key={path}&gt;          &lt;Image alt="" src={`/${path}.jpg`} width="280" height="420" /&gt;        &lt;/div&gt;      ))}    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-11-环境变量"><a href="#6-2-11-环境变量" class="headerlink" title="6.2.11 环境变量"></a>6.2.11 环境变量</h4><p>Next.js 内置对环境变量的支持。</p><table><thead><tr><th>文件名称</th><th>作用</th></tr></thead><tbody><tr><td>.env</td><td>放置开发环境和生产环境中的公共变量</td></tr><tr><td>.env.development</td><td>放置开发环境变量，优先级高于 .env 文件</td></tr><tr><td>.env.production</td><td>放置生产环境变量，优先级高于 .env 文件</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># .env.development</span><span class="token assign-left variable">API_URL</span><span class="token operator">=</span>api.development.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># .env.production</span><span class="token assign-left variable">API_URL</span><span class="token operator">=</span>api.production.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 普通环境变量只在 Node.js 环境下起作用 ( API Route、getStaticProps、getServerSideProps )</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">API_URL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>要在浏览器中使用环境变量，需要在环境变量的名字前面加 NEXT_PUBLIC_ 前缀</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># .env.development</span><span class="token assign-left variable">NEXT_PUBLIC_API_URL</span><span class="token operator">=</span>api.production.example.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>在存储环境变量的文件中可以使用 $ 开头的变量指向系统环境变量，它用于指向系统中存储的敏感信息</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># .env.development</span><span class="token assign-left variable">SECRET_KEY</span><span class="token operator">=</span><span class="token variable">$SECRET</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># ~/.zshrc</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">SECRET</span><span class="token operator">=</span>test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6-2-12-构建命令"><a href="#6-2-12-构建命令" class="headerlink" title="6.2.12 构建命令"></a>6.2.12 构建命令</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 构建生成环境代码</span>next build<span class="token comment"># 启动用于生产的支持预渲染和服务端渲染的 node.js 服务器 (基于 next build 结果)</span>next start<span class="token comment"># 启动开发环境的 node.js 服务器</span>next dev<span class="token comment"># 将站点导出为静态HTML (基于 next build 结果)</span><span class="token comment"># 不支持图片优化、api 路由</span>next <span class="token builtin class-name">export</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-服务器端渲染原理"><a href="#6-3-服务器端渲染原理" class="headerlink" title="6.3 服务器端渲染原理"></a>6.3 服务器端渲染原理</h3><h4 id="1-应用目录结构介绍"><a href="#1-应用目录结构介绍" class="headerlink" title="1. 应用目录结构介绍"></a>1. 应用目录结构介绍</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">├── build├── public├── src│   ├── client│   ├── server│   └── shared├── package-lock.json├── package.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 根据已有项目工程文件下载项目依赖</span><span class="token function">npm</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2-创建-web-服务器"><a href="#2-创建-web-服务器" class="headerlink" title="2. 创建 web 服务器"></a>2. 创建 web 服务器</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// src/server/http.js</span><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">"express"</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"服务器启动成功, 监听3000端口"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> app<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-服务器端渲染应用首页"><a href="#3-服务器端渲染应用首页" class="headerlink" title="3. 服务器端渲染应用首页"></a>3. 服务器端渲染应用首页</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/shared/pages/Home.jsimport React from "react";export default function Home() {  return &lt;div&gt;HomePage works&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/server/index.jsimport app from "./http";import Home from "../shared/pages/Home";import { renderToString } from "react-dom/server";import React from "react";app.get("/", (req, res) =&gt; {  // 通过 renderToString 方法将 React 组件转换为 HTML 字符串  const content = renderToString(&lt;Home /&gt;);  res.send(`    &lt;html&gt;      &lt;head&gt;        &lt;title&gt;React 服务器端渲染&lt;/title&gt;      &lt;/head&gt;      &lt;body&gt;        &lt;div id="root"&gt;${content}&lt;/div&gt;      &lt;/body&gt;    &lt;/html&gt;  `);});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-服务端代码打包配置"><a href="#4-服务端代码打包配置" class="headerlink" title="4. 服务端代码打包配置"></a>4. 服务端代码打包配置</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.server.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>  target<span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>  entry<span class="token operator">:</span> <span class="token string">"./src/server/index.js"</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">{</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"build"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token operator">:</span> <span class="token punctuation">{</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">{</span>          loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>          options<span class="token operator">:</span> <span class="token punctuation">{</span>            presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span> <span class="token string">"@babel/preset-react"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"dev:server-run"</span><span class="token operator">:</span> <span class="token string">"nodemon --watch build --exec 'node build/bundle.js'"</span><span class="token punctuation">,</span>  <span class="token property">"dev:server-build"</span><span class="token operator">:</span> <span class="token string">"webpack --config webpack.server.js --watch"</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-为组件附加事件"><a href="#5-为组件附加事件" class="headerlink" title="5. 为组件附加事件"></a>5. 为组件附加事件</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/shared/pages/Home.jsimport React from "react";export default function Home() {  return &lt;div onClick={() =&gt; alert("clicked")}&gt;HomePage works&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-创建客户端入口文件"><a href="#6-创建客户端入口文件" class="headerlink" title="6. 创建客户端入口文件"></a>6. 创建客户端入口文件</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/client/index.jsimport React from "react";import ReactDOM from "react-dom";import Home from "../shared/pages/Home";// hydrate: 渲染组件, 和 render 不同, 如果组件DOM结构已经存在, 复用DOM结构, 提升性能, 仅为组件附加事件ReactDOM.hydrate(&lt;Home /&gt;, document.getElementById("root"));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-客户端代码打包配置"><a href="#7-客户端代码打包配置" class="headerlink" title="7. 客户端代码打包配置"></a>7. 客户端代码打包配置</h4><p>打包目标：转换 JSX 语法，转换浏览器不识别的现代 JavaScript 语法</p><p>打包位置：public 文件夹，它是服务端的静态资源文件夹</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.client.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>  entry<span class="token operator">:</span> <span class="token string">"./src/client/index.js"</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">{</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token operator">:</span> <span class="token punctuation">{</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">{</span>          loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>          options<span class="token operator">:</span> <span class="token punctuation">{</span>            presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span> <span class="token string">"@babel/preset-react"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-加载客户端打包代码"><a href="#8-加载客户端打包代码" class="headerlink" title="8. 加载客户端打包代码"></a>8. 加载客户端打包代码</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">import express from "express";// 将 public 目录设置为静态资源目录app.use(express.static("public"));app.get("/", (req, res) =&gt; {  const content = renderToString(&lt;Home /&gt;);  res.send(`    &lt;html&gt;      &lt;head&gt;        &lt;title&gt;React 服务器端渲染&lt;/title&gt;      &lt;/head&gt;      &lt;body&gt;        &lt;div id="root"&gt;${content}&lt;/div&gt;        &lt;script src="/bundle.js"&gt;&lt;/script&gt;      &lt;/body&gt;    &lt;/html&gt;  `);});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="9-合并-webpack-配置"><a href="#9-合并-webpack-配置" class="headerlink" title="9. 合并 webpack 配置"></a>9. 合并 webpack 配置</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.base.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  mode<span class="token operator">:</span> <span class="token string">"development"</span><span class="token punctuation">,</span>  module<span class="token operator">:</span> <span class="token punctuation">{</span>    rules<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.js$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>        use<span class="token operator">:</span> <span class="token punctuation">{</span>          loader<span class="token operator">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>          options<span class="token operator">:</span> <span class="token punctuation">{</span>            presets<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/preset-env"</span><span class="token punctuation">,</span> <span class="token string">"@babel/preset-react"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.client.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack-merge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./webpack.base"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token operator">:</span> <span class="token string">"./src/client/index.js"</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">{</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"public"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// webpack.server.js</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> merge <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"webpack-merge"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> baseConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./webpack.base"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>  target<span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>  entry<span class="token operator">:</span> <span class="token string">"./src/server/index.js"</span><span class="token punctuation">,</span>  output<span class="token operator">:</span> <span class="token punctuation">{</span>    path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"build"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token operator">:</span> <span class="token string">"bundle.js"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>baseConfig<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="10-合并应用启动命令"><a href="#10-合并应用启动命令" class="headerlink" title="10. 合并应用启动命令"></a>10. 合并应用启动命令</h4><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"npm-run-all --parallel dev:*"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="11-独立渲染方法"><a href="#11-独立渲染方法" class="headerlink" title="11. 独立渲染方法"></a>11. 独立渲染方法</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/server/render.jsimport { renderToString } from "react-dom/server";import React from "react";import Home from "../shared/pages/Home";export default () =&gt; {  const content = renderToString(&lt;Home /&gt;);  return `    &lt;html&gt;      &lt;head&gt;        &lt;title&gt;React 服务器端渲染&lt;/title&gt;      &lt;/head&gt;      &lt;body&gt;        &lt;div id="root"&gt;${content}&lt;/div&gt;        &lt;script src="/bundle.js"&gt;&lt;/script&gt;      &lt;/body&gt;    &lt;/html&gt;  `;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/server/index.jsimport app from "./http";import express from "express";import render from "./render";app.use(express.static("public"));app.get("/", (req, res) =&gt; {  res.send(render());});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="12-实现服务端路由"><a href="#12-实现服务端路由" class="headerlink" title="12. 实现服务端路由"></a>12. 实现服务端路由</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 新增 List 页面// src/shared/pages/List.jsimport React from "react";export default function List() {  return &lt;div&gt;ListPage works&lt;/div&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 创建路由规则// src/shared/AppRoutes.jsimport Home from "./pages/Home";import List from "./pages/List";import React from "react";import { useRoutes } from "react-router-dom";export const routes = [  {    path: "/",    element: &lt;Home /&gt;,  },  {    path: "/list",    element: &lt;List /&gt;,  },];export default function AppRoutes() {  return useRoutes(routes);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { StaticRouter } from "react-router-dom/server";import AppRoutes from "../shared/AppRoutes";export default (req) =&gt; {  const content = renderToString(    &lt;StaticRouter location={req.path}&gt;      &lt;AppRoutes /&gt;    &lt;/StaticRouter&gt;  );};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/server/index.js// 1. 服务端 express 接收任何请求, 然后将请求转发给 React 路由进行匹配app.get("*", (req, res) =&gt; {  res.send(render(req));});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：查看代码运行结果时需要临时禁用客户端浏览器 JavaScript，因为此时客户端程序运行时会覆盖服务端返回的 HTML。</p><h4 id="13-实现客户端路由"><a href="#13-实现客户端路由" class="headerlink" title="13. 实现客户端路由"></a>13. 实现客户端路由</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/client/index.jsimport { BrowserRouter } from "react-router-dom";import AppRoutes from "../shared/AppRoutes";ReactDOM.hydrate(  &lt;BrowserRouter&gt;    &lt;AppRoutes /&gt;  &lt;/BrowserRouter&gt;,  document.getElementById("root"));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import React from "react";import { Link } from "react-router-dom";export default function Home() {  return (    &lt;&gt;      &lt;p&gt;当前为首页&lt;/p&gt;      &lt;Link to="/list"&gt;跳转到列表页面&lt;/Link&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import React from "react";import { Link } from "react-router-dom";export default function List() {  return (    &lt;&gt;      &lt;p&gt;当前为列表页&lt;/p&gt;      &lt;Link to="/"&gt;跳转到首页&lt;/Link&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="14-实现客户端-Redux"><a href="#14-实现客户端-Redux" class="headerlink" title="14. 实现客户端 Redux"></a>14. 实现客户端 Redux</h4><p>客户端与服务端共用除创建 Store 对象的代码。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/shared/state/todo.slice.jsimport { createSlice, createAsyncThunk } from "@reduxjs/toolkit";import axios from "axios";export const loadTodos = createAsyncThunk("todos/loadTodos", () =&gt; {  return axios    .get("https://jsonplaceholder.typicode.com/todos")    .then((response) =&gt; response.data);});const { actions, reducer: TodosReducer } = createSlice({  name: "todos",  initialState: [],  extraReducers: {    [loadTodos.fulfilled](state, action) {      action.payload.forEach((todo) =&gt; state.push(todo));    },  },});export default TodosReducer;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/client/store.jsimport { configureStore } from "@reduxjs/toolkit";import TodosReducer from "../shared/state/todo.slice";export default configureStore({  reducer: {    todos: TodosReducer,  }});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/client/index.jsimport { Provider } from "react-redux";import store from "./store";ReactDOM.hydrate(  &lt;Provider store={store}&gt;    &lt;BrowserRouter&gt;      &lt;AppRoutes /&gt;    &lt;/BrowserRouter&gt;  &lt;/Provider&gt;,  document.getElementById("root"));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/shared/pages/List.jsimport React, { useEffect } from "react";import { useDispatch, useSelector } from "react-redux";import { loadTodos } from "../state/todo.slice";export default function List() {  const dispatch = useDispatch();  const todos = useSelector((state) =&gt; state.todos);  useEffect(() =&gt; {    dispatch(loadTodos());  }, []);  return (    &lt;ul&gt;      {todos.map((todo) =&gt; (        &lt;li key={todo.id}&gt;{todo.title}&lt;/li&gt;      ))}    &lt;/ul&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="15-实现服务端-Redux"><a href="#15-实现服务端-Redux" class="headerlink" title="15. 实现服务端 Redux"></a>15. 实现服务端 Redux</h4><p>第一步：在组件文件中导出 loadStateFromStore 方法，该方法在服务端调用，用于获取组件需要的状态。</p><p>当组件状态获取完成以后，服务端再渲染组件，组件渲染完成之后再发送到客户端。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/shared/pages/List.jsimport { loadTodos } from "../state/todo.slice";function loadStateFromStore(store) {  return store.dispatch(loadTodos());}export default {  element: &lt;List /&gt;,  loadStateFromStore,};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步：重新配置组件路由规则，将 loadStateFromStore 方法挂载到组件配置对象中</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import List from "./pages/List";export const routes = [  {    path: "/list",    ...List,  },];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：创建服务端 Store 对象，由于服务端是在接收到请求以后动态创建 Store，所以服务端创建 Store 的代码要写在一个方法中。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/server/store.jsimport { configureStore } from "@reduxjs/toolkit";import TodosReducer from "../shared/state/todo.slice";export default function createStore() {  return configureStore({    reducer: {      todos: TodosReducer,    },  });}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第四步：服务端在接收到请求以后动态创建 store，调用组件中的 loadStateFromStore 方法获取组件状态，组件状态获取完成后再渲染组件</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import createStore from "./store";import { matchRoutes } from "react-router-dom";import { routes } from "../shared/AppRoutes";app.get("*", (req, res) =&gt; {  // 创建 store 对象  const store = createStore();  // matchRoutes 方法用于在路由规则数组中匹配出当前要使用的规则  // matchRoutes 方法的返回值是数组类型, 即使匹配到一个路由, 如果匹配不到返回 null  const matchedRoutes = matchRoutes(routes, req.path);  // 如果匹配到了路由规则  if (matchedRoutes) {    // 从路由规则中获取 loadStateFromStore 方法, 使用该方法获取组件需要的状态    // 由于获取组件状态可能涉及异步操作, 所以该方法要求返回 Promise    // 在 loadStateFromStore 方法中调用的 dispatch 方法正好返回 Promise, 所以在该方法中只需要返回 dispatch 方法的返回值即可    // 此处我们将返回的所有 Promsie 放到一个数组中, 方便监听所有异步操作完成    const loadDataArray = matchedRoutes.map(      ({ route }) =&gt; route.loadStateFromStore &amp;&amp; route.loadStateFromStore(store)    );    // 监听所有异步操作完成的状态    // 所以异步操作完成就代表 Store 中已经存储了我们需要的数据了    Promise.all(loadDataArray).then(() =&gt; {      // 当 store 中有需要的数据以后再渲染组件      res.send(render(req, store));    });  } else {    res.send(`&lt;div&gt;404 not found&lt;/div&gt;`);  }});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第五步：在服务端配置 Provider 组件</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { renderToString } from "react-dom/server";import { StaticRouter } from "react-router-dom/server";import React from "react";import { Provider } from "react-redux";import AppRoutes from "../shared/AppRoutes";export default (req, store) =&gt; {  const content = renderToString(    &lt;Provider store={store}&gt;      &lt;StaticRouter location={req.url}&gt;        &lt;AppRoutes /&gt;      &lt;/StaticRouter&gt;    &lt;/Provider&gt;  );};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="16-服务端数据回填客户端"><a href="#16-服务端数据回填客户端" class="headerlink" title="16. 服务端数据回填客户端"></a>16. 服务端数据回填客户端</h4><p>警告原因：客户端 Store 在初始状态下是没有数据的，在渲染组件的时候生成的是空 ul，但是服务器端是先获取数据再进行的组件渲染，所以生成的是有子元素的ul，hydrate 方法在对比的时候发现两者不一致所以报了个警告。</p><img src="/medias/assets/images/52.png" align="left" width="60%"><p>解决思路：将服务器端获取到的数据回填给客户端, 让客户端拥有初始数据。服务端已经获取了一次数据，客户端没有必要再次获取。</p><p>第一步：将组件状态挂载到 window 对象中</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/server/render.jsexport default (req, store) =&gt; {  // 获取初始状态  const initialState = JSON.stringify(store.getState());  return `    &lt;html&gt;        &lt;script&gt;window.initialState = ${initialState}&lt;/script&gt;        &lt;script src="/bundle.js"&gt;&lt;/script&gt;    &lt;/html&gt;  `;};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步：客户端设置初始状态</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">export default configureStore({  preloadedState: {    todos: window.initialState.todos || [],  },});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第三步：在组件中判断如果初始数据不存在再进行初始数据的获取</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function List() {  useEffect(() =&gt; {    todos.length === 0 &amp;&amp; dispatch(loadTodos());  }, []);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="17-防止XSS攻击"><a href="#17-防止XSS攻击" class="headerlink" title="17. 防止XSS攻击"></a>17. 防止XSS攻击</h4><p>第一步：服务端模拟返回恶意XSS代码</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/shared/state/todo.slice.jscreateSlice({  extraReducers: {    [loadTodos.fulfilled](state, action) {      state.push({        id: 1,        title: "&lt;/script&gt;&lt;script&gt;alert(1)&lt;/script&gt;",      });    },  },});<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二步：通过 serializeJavascript 方法对数据进行转换</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> serializeJavascript <span class="token keyword">from</span> <span class="token string">"serialize-javascript"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> store</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token comment">// 获取初始状态</span>  <span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token function">serializeJavascript</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-React-与-TypeScript"><a href="#7-React-与-TypeScript" class="headerlink" title="7. React 与 TypeScript"></a>7. React 与 TypeScript</h2><h3 id="7-1-概述"><a href="#7-1-概述" class="headerlink" title="7.1 概述"></a>7.1 概述</h3><h4 id="7-1-1-创建应用"><a href="#7-1-1-创建应用" class="headerlink" title="7.1.1 创建应用"></a>7.1.1 创建应用</h4><p>创建支持 TypeScript 语法的 React 应用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">npx create-react-app <span class="token operator">&lt;</span>appname<span class="token operator">&gt;</span> --template typescript<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="7-1-2-文件后缀"><a href="#7-1-2-文件后缀" class="headerlink" title="7.1.2 文件后缀"></a>7.1.2 文件后缀</h4><p>如果文件中包含 React 组件或者 JSX 代码，文件后缀使用 <code>tsx</code></p><p>如果文件中不包含任何 JSX 代码，文件后缀使用 <code>ts</code></p><h3 id="7-2-为组件添加类型"><a href="#7-2-为组件添加类型" class="headerlink" title="7.2 为组件添加类型"></a>7.2 为组件添加类型</h3><p>在我们定义了组件以后，TypeScript 编译器并不知道我们定义的是组件，它会认为我们定义的就是一个普通的函数。</p><p>在类型认知出现偏差以后，TypeScript 编译器不能正确的对我们的代码进行约束。</p><p>比如在下列代码中，我们通过组件获取组件下的属性，TypeScript 编译器会报错，说组件下不存在这个属性。</p><p>当 TypeScript 编译器知道我们定义的是组件以后，当我们错误的使用了组件以后，它才能准确的为我们进行提示。</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">const</span> <span class="token function-variable function">Child</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Child</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// 类型 "() =&gt; Element" 上不存在属性 "displayName"。</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Child<span class="token punctuation">.</span>displayName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 类型 "() =&gt; Element" 上不存在属性 "defaultProps"。</span><span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Child<span class="token punctuation">.</span>defaultProps<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Child<span class="token operator">:</span> <span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">Child</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-Props"><a href="#7-3-Props" class="headerlink" title="7.3 Props"></a>7.3 Props</h3><p>为组件 props 定义接口类型，编译器可以检查父组件在调用该组件时是否正确的传递了 props，在子组件内部是否正确的使用了 props。 </p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// src/props/Child.tsx</span><span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>  color<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>  <span class="token function-variable function">onClick</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> Child<span class="token operator">:</span> <span class="token constant">FC</span><span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> color<span class="token punctuation">,</span> onClick <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onClick<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>color<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// src/props/Parent.tsx</span><span class="token keyword">const</span> <span class="token function-variable function">Parent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Child</span></span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"clicked"</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-state"><a href="#7-4-state" class="headerlink" title="7.4 state"></a>7.4 state</h3><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/Guests.tsximport { useState, FC } from "react";const Guests: FC = () =&gt; {  const [name, setName] = useState&lt;string&gt;("");  // 此处如果不为 guests 指定类型, 类型将会是 never[]  const [guests, setGuests] = useState&lt;string[]&gt;([]);  const clickHandler = () =&gt; {    setName("");    // 如果 guests 是 never[], 那么字符串 name 将不能被存储到 guests 数组中    setGuests([...guests, name]);  };  return (    &lt;&gt;      &lt;ul&gt; {guests.map((guest) =&gt; &lt;li key={guest}&gt;{guest}&lt;/li&gt;)}&lt;/ul&gt;      &lt;input type="text" value={name} onChange={(event) =&gt; setName(event.target.value)}/&gt;      &lt;button onClick={clickHandler}&gt;add&lt;/button&gt;    &lt;/&gt;  );};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/state/UserSearch.tsximport { useState, FC } from "react";const users = [  { name: "张三", age: 20 },  { name: "李四", age: 30 },];const UserSearch: FC = () =&gt; {  const [name, setName] = useState&lt;string&gt;("");  // 在组件初次渲染, 在没有找到 user 的情况下, user 的类型是 undefined  // 在找到 user 以后, 它的类型是 {name: string, age: number}  // 所以 user 的类型就应该是 {name: string, age: number} | undefined  const [user, setUser] = useState&lt;{ name: string; age: number } | undefined&gt;();// 搜索用户  const searchHandler = () =&gt; {    // find 方法的返回值可能是 user, 也可能是 undefined    setUser(    users.find((user) =&gt; user.name === name)    );  };  return (    &lt;&gt;      &lt;input type="text" value={name} onChange={(event) =&gt; setName(event.target.value)} /&gt;      &lt;button onClick={searchHandler}&gt;search&lt;/button&gt;      {user &amp;&amp; JSON.stringify(user)}    &lt;/&gt;  );};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5-事件对象"><a href="#7-5-事件对象" class="headerlink" title="7.5 事件对象"></a>7.5 事件对象</h3><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/event/EventComponent.tsximport { ChangeEvent, FC, DragEvent } from "react";const EventComponent: FC = () =&gt; {  // 参数"event"隐式具有"any"类型  const changeHandler = (event: ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {    console.log(event.target.value);  };  const dragStartHandler = (event: DragEvent&lt;HTMLDivElement&gt;) =&gt; {    // event.target: 返回触发事件的元素    // event.currentTarget: 返回绑定事件的元素    console.log(event.target);    console.log(event.currentTarget);  };  return (    &lt;&gt;      &lt;input type="text" onChange={changeHandler} /&gt;      &lt;div draggable onDragStart={dragStartHandler}&gt; drag event &lt;/div&gt;    &lt;/&gt;  );};<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/medias/assets/images/43.gif" align="left"><h3 id="7-6-ref"><a href="#7-6-ref" class="headerlink" title="7.6 ref"></a>7.6 ref</h3><p><code>src/ref/RefComponent.tsx</code></p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">FC</span><span class="token punctuation">,</span> useRef<span class="token punctuation">,</span> useEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"React"</span><span class="token punctuation">;</span><span class="token keyword">const</span> RefComponent<span class="token operator">:</span> <span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> inputRef <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useRef</span><span class="token generic class-name"><span class="token operator">&lt;</span>HTMLInputElement <span class="token operator">|</span> <span class="token keyword">null</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inputRef<span class="token punctuation">.</span>current<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    inputRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>inputRef<span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-7-Redux"><a href="#7-7-Redux" class="headerlink" title="7.7 Redux"></a>7.7 Redux</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> redux redux-thunk axios react-redux @types/react-redux --save-exact<span class="token comment"># save-exact: 在 package.json 文件中记录安装包的确切版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>redux、redux-thunk、axios 内置 TypeScript 类型声明文件，所以不需要单独下载。</p><p>react-redux 没有内置类型声明文件，所以需要单独下载。</p><p><img src="/medias/assets/images/44.png" align="left" width="32%"><img src="/medias/assets/images/45.png" align="left" width="30%"></p><p>需求：向 npm 发送请求加载 npm 包列表信息。</p><p>第一步：定义 Action Type</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/state/action-types/package.action.types.ts</span><span class="token keyword">export</span> <span class="token keyword">enum</span> searchActionType <span class="token punctuation">{</span>  <span class="token comment">// 请求中</span>  <span class="token constant">SEARCH_PACKAGES</span> <span class="token operator">=</span> <span class="token string">"search_packages"</span><span class="token punctuation">,</span>  <span class="token comment">// 请求成功</span>  <span class="token constant">SEARCH_PACKAGES_SUCCESS</span> <span class="token operator">=</span> <span class="token string">"search_packages_success"</span><span class="token punctuation">,</span>  <span class="token comment">// 请求失败</span>  <span class="token constant">SEARCH_PACKAGES_ERROR</span> <span class="token operator">=</span> <span class="token string">"search_packages_error"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/state/action-types/index.ts</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"./package.action.types"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第二步：定义 Action 对象类型、Reducer 函数的 action 参数 action 类型</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/state/actions/packages.action.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> searchActionType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../action-types"</span><span class="token punctuation">;</span><span class="token comment">/** * 请求: {type: "search_packages"} * 成功: {type: "search_packages_success", payload: ["react", "react-dom"]} * 失败: {type: "search_packages_error", error: "Request Failed"} */</span><span class="token keyword">interface</span> <span class="token class-name">SearchPackagesAction</span> <span class="token punctuation">{</span>  type<span class="token operator">:</span> searchActionType<span class="token punctuation">.</span><span class="token constant">SEARCH_PACKAGES</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">SearchPackagesSuccessAction</span> <span class="token punctuation">{</span>  type<span class="token operator">:</span> searchActionType<span class="token punctuation">.</span><span class="token constant">SEARCH_PACKAGES_SUCCESS</span><span class="token punctuation">;</span>  payload<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">SearchPackagesErrorAction</span> <span class="token punctuation">{</span>  type<span class="token operator">:</span> searchActionType<span class="token punctuation">.</span><span class="token constant">SEARCH_PACKAGES_ERROR</span><span class="token punctuation">;</span>  error<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">SearchAction</span> <span class="token operator">=</span>  <span class="token operator">|</span> SearchPackagesAction  <span class="token operator">|</span> SearchPackagesSuccessAction  <span class="token operator">|</span> SearchPackagesErrorAction<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/state/actions/index.ts</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"./packages.action"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第三步：创建 Reducer 函数，匹配 Action Type 返回对应的状态</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/state/reducers/packages.reducer.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> searchActionType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../action-types"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> SearchAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../actions"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">PackagesState</span> <span class="token punctuation">{</span>  loading<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>  error<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  list<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">const</span> initialState<span class="token operator">:</span> PackagesState <span class="token operator">=</span> <span class="token punctuation">{</span>  loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>  list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">packagesReducer</span><span class="token punctuation">(</span>  state<span class="token operator">:</span> PackagesState <span class="token operator">=</span> initialState<span class="token punctuation">,</span>  action<span class="token operator">:</span> SearchAction<span class="token punctuation">)</span><span class="token operator">:</span> PackagesState <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> searchActionType<span class="token punctuation">.</span><span class="token constant">SEARCH_PACKAGES</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> loading<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> searchActionType<span class="token punctuation">.</span><span class="token constant">SEARCH_PACKAGES_SUCCESS</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> list<span class="token operator">:</span> action<span class="token punctuation">.</span>payload <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> searchActionType<span class="token punctuation">.</span><span class="token constant">SEARCH_PACKAGES_ERROR</span><span class="token operator">:</span>      <span class="token keyword">return</span> <span class="token punctuation">{</span> loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> error<span class="token operator">:</span> action<span class="token punctuation">.</span>error<span class="token punctuation">,</span> list<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>      <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第四步：合并 reducer 函数</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/state/reducers/index.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> packagesReducer <span class="token keyword">from</span> <span class="token string">"./packages.reducer"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> reducers <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  packages<span class="token operator">:</span> packagesReducer<span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第五步：创建用于发送请求获取 npm 包的 action creator 函数</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/state/action-creators/packages.action.creators.ts</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Dispatch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> searchActionType <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../action-types"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> SearchAction <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../actions"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">searchPackages</span> <span class="token operator">=</span>  <span class="token punctuation">(</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>dispatch<span class="token operator">:</span> Dispatch<span class="token operator">&lt;</span>SearchAction<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      type<span class="token operator">:</span> searchActionType<span class="token punctuation">.</span><span class="token constant">SEARCH_PACKAGES</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://registry.npmjs.org/-/v1/search</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          params<span class="token operator">:</span> <span class="token punctuation">{</span>            text<span class="token operator">:</span> key<span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        type<span class="token operator">:</span> searchActionType<span class="token punctuation">.</span><span class="token constant">SEARCH_PACKAGES_SUCCESS</span><span class="token punctuation">,</span>        payload<span class="token operator">:</span> data<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>package<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>error <span class="token keyword">instanceof</span> <span class="token class-name">Error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>          type<span class="token operator">:</span> searchActionType<span class="token punctuation">.</span><span class="token constant">SEARCH_PACKAGES_ERROR</span><span class="token punctuation">,</span>          error<span class="token operator">:</span> error<span class="token punctuation">.</span>message<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// unknow 是更加严格的 any 类型.</span><span class="token comment">// 在对 unknown 类型的值执行大多数操作之前, 我们必须进行某种形式的检查</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"./packages.action.creators"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第五步：创建 Store 对象，配置 redux-thunk 中间件函数</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token keyword">import</span> <span class="token punctuation">{</span> applyMiddleware<span class="token punctuation">,</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">"redux-thunk"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> reducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"."</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducers<span class="token punctuation">,</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第六步：创建 state 入口文件</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/state/index.ts</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">as</span> actionCreators <span class="token keyword">from</span> <span class="token string">"./action-creators"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"./reducers"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">"./store"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>第七步：配置 Provider 组件</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// src/components/App.tsx</span><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">FC</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../state"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Packages <span class="token keyword">from</span> <span class="token string">"./Packages"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> App<span class="token operator">:</span> <span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Packages</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第八步：在组件中，当点击按钮时向服务器端发送请求获取 npm 包</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// src/components/Packages.tsx</span><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">FC</span><span class="token punctuation">,</span> FormEvent<span class="token punctuation">,</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../hooks/useActions"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Packages<span class="token operator">:</span> <span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> setKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token punctuation">{</span> searchPackages <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useActions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">onSubmitHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> FormEvent<span class="token operator">&lt;</span>HTMLFormElement<span class="token operator">&gt;</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">searchPackages</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onSubmit</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onSubmitHandler<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>key<span class="token punctuation">}</span></span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">setKey</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">}</span></span> <span class="token punctuation">/&gt;</span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">search</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/hooks/useActions.ts</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useDispatch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> bindActionCreators <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> actionCreators <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../state"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">useActions</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">bindActionCreators</span><span class="token punctuation">(</span>actionCreators<span class="token punctuation">,</span> dispatch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第九步：在组件中获取状态并根据状态渲染 UI</p><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"react-redux"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AppState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../state"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> PackagesState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../state/reducers/packages.reducer"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Packages<span class="token operator">:</span> <span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token generic-function"><span class="token function">useSelector</span><span class="token generic class-name"><span class="token operator">&lt;</span>AppState<span class="token punctuation">,</span> PackagesState<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>packages<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">      </span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>loading <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">loading....</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>error <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>error<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">}</span><span class="token plain-text">      </span><span class="token punctuation">{</span>state<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">&gt;</span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义应用全局状态的类型，用于传递给 useSelecter 钩子函数</p><pre class="line-numbers language-typescript" data-language="typescript"><code class="language-typescript"><span class="token comment">// src/state/reducers/index.ts</span><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">AppState</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> reducers<span class="token operator">&gt;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>第十步：优化为应用全局状态设置类型的代码</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// src/hooks/useTypedSelector.tsimport { useSelector, TypedUseSelectorHook } from "react-redux";import { AppState } from "../state/reducers";export const useTypedSelector: TypedUseSelectorHook&lt;AppState&gt; = useSelector;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-tsx" data-language="tsx"><code class="language-tsx"><span class="token comment">// src/components/Packages.tsx</span><span class="token keyword">import</span> <span class="token punctuation">{</span> useTypedSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"../hooks/useTypedSelector"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Packages<span class="token operator">:</span> <span class="token function-variable function">FC</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">useTypedSelector</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> state<span class="token punctuation">.</span>packages<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-流行库"><a href="#8-流行库" class="headerlink" title="8. 流行库"></a>8. 流行库</h2><h3 id="8-1-Styled-Components"><a href="#8-1-Styled-Components" class="headerlink" title="8.1 Styled Components"></a>8.1 Styled Components</h3><h4 id="8-1-1-概述"><a href="#8-1-1-概述" class="headerlink" title="8.1.1 概述"></a>8.1.1 概述</h4><p><a href="https://styled-components.com/">styled-components</a> 允许开发者通过创建组件的方式为元素添加样式, 创建出来的组件叫做样式化组件。</p><img src="/medias/assets/images/46.png" align="left" width="50%"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save styled-components<span class="token function">yarn</span> <span class="token function">add</span> styled-components<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="8-1-2-基本使用"><a href="#8-1-2-基本使用" class="headerlink" title="8.1.2 基本使用"></a>8.1.2 基本使用</h4><img src="/medias/assets/images/47.png" align="left" width="50%"><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 创建样式化组件import styled from "styled-components";export const Wrapper = styled.div`  padding: 30px;  background: papayawhip;`;export const Title = styled.h1`  font-size: 24px;  color: palevioletred;  text-align: center;  margin: 0;`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// 使用样式化组件function App() {  return (    &lt;Wrapper&gt;      &lt;Title&gt;Hello, styled-components&lt;/Title&gt;    &lt;/Wrapper&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-1-3-根据属性适配样式"><a href="#8-1-3-根据属性适配样式" class="headerlink" title="8.1.3 根据属性适配样式"></a>8.1.3 根据属性适配样式</h4><img src="/medias/assets/images/48.png" align="left" width="25%"><pre class="line-numbers language-react" data-language="react"><code class="language-react">export const Button = styled.button`  border: 2px solid palevioletred;  border-radius: 3px;  padding: 10px 15px;  background-color: ${(props) =&gt; (props.primary ? "palevioletred" : "white")};  color: ${(props) =&gt; (props.primary ? "white" : "palevioletred")};`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  return (    &lt;&gt;      &lt;Button primary&gt;Primary Button&lt;/Button&gt;    &lt;Button&gt;Primary Button&lt;/Button&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/medias/assets/images/50.png" align="left" width="40%"><pre class="line-numbers language-react" data-language="react"><code class="language-react">export const Input = styled.input`  border: none;  border-radius: 3px;  padding: 10px;  background-color: papayawhip;  color: ${(props) =&gt; props.color || "palevioletred"};`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">function App() {  return (    &lt;&gt;      &lt;Input defaultValue="Hello" type="text" color="rebeccapurple" /&gt;      &lt;Input defaultValue="styled-components" type="text" /&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-1-4-扩展样式化组件"><a href="#8-1-4-扩展样式化组件" class="headerlink" title="8.1.4 扩展样式化组件"></a>8.1.4 扩展样式化组件</h4><img src="/medias/assets/images/49.png" align="left" width="25%"><pre class="line-numbers language-react" data-language="react"><code class="language-react">export const Button = styled.button`  color: palevioletred;  background-color: #fff;  font-size: 18px;  padding: 15px 20px;  border: 2px solid palevioletred;  border-radius: 3px;`;export const TomatoButton = styled(Button)`  color: tomato;  border-color: tomato;`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { Button, TomatoButton } from "./components/Wrapper";function App() {  return (    &lt;&gt;      &lt;Button&gt;Button&lt;/Button&gt; &lt;TomatoButton&gt;TomatoButton&lt;/TomatoButton&gt;    &lt;/&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-1-5-为任何组件设置样式"><a href="#8-1-5-为任何组件设置样式" class="headerlink" title="8.1.5 为任何组件设置样式"></a>8.1.5 为任何组件设置样式</h4><p>styled 方法不仅可以创建样式化组件，它还可以为普通的 React 组件设置样式。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import styled from "styled-components";const Link = ({ className, children }) =&gt; {  return (    &lt;a href="http://www.example.com" className={className}&gt;      {children}    &lt;/a&gt;  );};const StyledLink = styled(Link)`  color: palevioletred;  font-weight: bold;`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-2-React-Hook-Form"><a href="#8-2-React-Hook-Form" class="headerlink" title="8.2. React Hook Form"></a>8.2. React Hook Form</h3><h4 id="8-2-1-概述"><a href="#8-2-1-概述" class="headerlink" title="8.2.1 概述"></a>8.2.1 概述</h4><p><a href="https://react-hook-form.com/">React Hook Form</a> 是 React 生态圈中最为流行的表单构建工具，用于简化 React 表单代码复杂冗余的问题。</p><img src="/medias/assets/images/51.png" align="left"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> react-hook-form<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-2-2-基本使用"><a href="#8-2-2-基本使用" class="headerlink" title="8.2.2 基本使用"></a>8.2.2 基本使用</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useForm } from "react-hook-form";function App() {  const { register, handleSubmit, watch } = useForm({    defaultValues: {      username: "张三",      isAgree: true,      hobbies: [],      gender: "男",      transport: "",    },  });  const onSubmit = handleSubmit((data) =&gt; {    console.log(data);  });    const username = watch("username");  useEffect(() =&gt; {    console.log(username);  }, [username]);    return (    &lt;form onSubmit={onSubmit}&gt;      &lt;input type="text" {...register("username")} /&gt;      &lt;input type="checkbox" {...register("isAgree")} /&gt;      &lt;input type="checkbox" value="足球" {...register("hobbies")} /&gt;      &lt;input type="checkbox" value="篮球" {...register("hobbies")} /&gt;      &lt;input type="radio" value="男" {...register("gender")} /&gt;      &lt;input type="radio" value="女" {...register("gender")} /&gt;      &lt;select {...register("transport")}&gt;        &lt;option value=""&gt;请选择交通工具&lt;/option&gt;        &lt;option value="火车"&gt;火车&lt;/option&gt;        &lt;option value="飞机"&gt;飞机&lt;/option&gt;        &lt;option value="自驾"&gt;自驾&lt;/option&gt;      &lt;/select&gt;      &lt;button type="submit"&gt;提交&lt;/button&gt;    &lt;/form&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-2-3-表单验证"><a href="#8-2-3-表单验证" class="headerlink" title="8.2.3 表单验证"></a>8.2.3 表单验证</h4><p>表单验证支持以下字段：required、min、max、minLength、maxLength、pattern、validate</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useForm } from "react-hook-form";function App() {  const { formState: { errors } } = useForm({     // 控制触发表单验证的时机    // onSubmit onBlur onTouched onChange all    mode: "onChange",  });  // 表单提交触发表单验证, 表单提交后触发表单实时验证  const onSubmit = handleSubmit((data) =&gt; {    // 在表单验证没有通过的情况下是不会调用该回调函数的  });    // 注册用户名字段  const usernameRegister = register("username", {    required: "用户名不能为空",    maxLength: {      value: 6,      message: "用户名最大长度是6",    },    pattern: {      value: /^[A-Za-z]+$/i,      message: "用户名只能包含字母",    },  });    return (    &lt;form onSubmit={onSubmit}&gt;      &lt;input type="text" {...usernameRegister} /&gt;      {errors.username &amp;&amp; &lt;span&gt;{errors.username.message}&lt;/span&gt;}      &lt;button type="submit"&gt;提交&lt;/button&gt;    &lt;/form&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useForm } from "react-hook-form";function App() {  const { watch } = useForm({    // 设置表单控件的默认值    defaultValues: {      password: "",      rePassword: "",    },  });  return (    &lt;form onSubmit={onSubmit}&gt;      &lt;input        type="password"        {...register("password", {          pattern: {            value: /^[A-Za-z0-9]+$/,            message: "密码必须是数字或字母",          },        })}      /&gt;      {errors.password?.message}      &lt;input        type="password"        {...register("rePassword", {          validate: (value) =&gt;            value === watch("password") || "两次密码输入不一样",        })}      /&gt;      {errors.rePassword?.message}      &lt;button type="submit"&gt;提交&lt;/button&gt;    &lt;/form&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-2-4-设置表单值"><a href="#8-2-4-设置表单值" class="headerlink" title="8.2.4  设置表单值"></a>8.2.4  设置表单值</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useForm } from "react-hook-form";function App() {  const { setValue, reset } = useForm({    // 设置表单控件的默认值    defaultValues: {      username: "",      isAgree: false,    },  });  const onClickHandler = () =&gt; {    // 设置单个表单控件的值    // setValue("username", "张三");    // 同时设置多个表单控件的值    reset({ username: "张三", isAgree: true });  };  return (    &lt;form onSubmit={onSubmit}&gt;      &lt;input type="text" {...register("username")} /&gt;      &lt;input type="checkbox" {...register("isAgree")} /&gt;      &lt;button type="button" onClick={onClickHandler}&gt;设置表单值&lt;/button&gt;    &lt;/form&gt;  );}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-2-5-useFormContext"><a href="#8-2-5-useFormContext" class="headerlink" title="8.2.5 useFormContext"></a>8.2.5 useFormContext</h4><p>通过 <code>useFormContext</code> 可以获取到表单上下文。</p><p>在表单内部有嵌套结构的情况下，将表单上下文作为 props 传递非常不方便。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { FormProvider, useForm, useFormContext } from "react-hook-form";function App() {  const methods = useForm({    defaultValues: {      username: "",      password: "",    },  });  const onSubmit = methods.handleSubmit((data) =&gt; {    console.log(data);  });  return (    &lt;FormProvider {...methods}&gt;      &lt;form onSubmit={onSubmit}&gt;        &lt;input type="text" {...methods.register("username")} /&gt;        &lt;Password /&gt;        &lt;button type="submit"&gt;提交&lt;/button&gt;      &lt;/form&gt;    &lt;/FormProvider&gt;  );}function Password() {  const { register } = useFormContext();  return &lt;input type="password" {...register("password")} /&gt;;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-3-React-Spring"><a href="#8-3-React-Spring" class="headerlink" title="8.3 React Spring"></a>8.3 React Spring</h3><img src="/medias/assets/react-spring/12.png"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> react-spring@9.4.3 styled-components@5.3.3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/bulma@0.9.2/css/bulma.min.css<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">useSpring// 创建单元素动画, 将元素从一个状态转换为另一个状态useSprings// 创建多元素动画, 将多个元素同时从一个状态转换为另一个状态useTrail// 创建多元素动画, 多个元素的动画依次执行useTransition// 创建入场、离场动画, 可以是单元素入场、离场动画，也可以是多元素入场离场动画<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-1-useSpring"><a href="#8-3-1-useSpring" class="headerlink" title="8.3.1 useSpring"></a>8.3.1 useSpring</h4><img src="/medias/assets/react-spring/13.gif" align="left"><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useSpring, animated } from "react-spring";import { useState } from "react";function App() {  const [toggle, setToggle] = useState(false);  const styles = useSpring({    backgroundSize: toggle ? "150%" : "100%",  });  return (    &lt;animated.div      onMouseEnter={() =&gt; setToggle(true)}      onMouseLeave={() =&gt; setToggle(false)}      style={{        width: 300,        height: 300,        backgroundImage:          "url(https://images.pexels.com/photos/3227984/pexels-photo-3227984.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;w=500)",        backgroundPosition: "center center",        ...styles,      }}    &gt;&lt;/animated.div&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/medias/assets/react-spring/04.gif" align="left"><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useSpring, animated } from "react-spring";function App() {  const { count } = useSpring({    from: {      count: 0,    },    to: {      count: 556,    },    config: {      duration: 2000,    },  });  console.log(count);  return (    &lt;animated.div style={{ fontSize: 54 }}&gt;      {count.to((count) =&gt; count.toFixed(2))}    &lt;/animated.div&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/medias/assets/react-spring/05.gif" align="left"><pre class="line-numbers language-react" data-language="react"><code class="language-react">import styled from "styled-components";import { useSpring, animated } from "react-spring";import { useRef } from "react";const data = [  "Cras justo odio",  "Dapibus ac facilisis in",  "Morbi leo risus",  "Porta ac consectetur ac",  "Vestibulum at eros",  "List group item heading",  "Something else here",  "Separated link",  "Another action",  "Extra small button",  "Signed in as Mark Otto",  "This is a simple hero unit",];const Container = styled(animated.div)`  width: 240px;  height: 100px;  overflow: auto;  background-color: skyblue;  padding: 0 10px;  color: #fff;  &amp; &gt; div {    height: 30px;    line-height: 30px;  }`;function App() {  const ref = useRef(null);  const { scroll } = useSpring({    scroll: ref?.current?.scrollTop || 0,  });  return (    &lt;&gt;      &lt;Container ref={ref} scrollTop={scroll}&gt;        {data.map((item) =&gt; (          &lt;div key={item}&gt;{item}&lt;/div&gt;        ))}      &lt;/Container&gt;      &lt;button        onClick={() =&gt;          scroll.start({            from: { scroll: ref.current.scrollTop },            to: { scroll: 0 },          })        }      &gt;        scrollToTop      &lt;/button&gt;    &lt;/&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-2-useSprings"><a href="#8-3-2-useSprings" class="headerlink" title="8.3.2 useSprings"></a>8.3.2 useSprings</h4><p>创建多元素动画。</p><img src="/medias/assets/react-spring/06.gif"><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useState } from "react"import { animated, useSprings } from "react-spring"const data = ["primary", "success", "danger", "warning"]function App() {  const [on, setOn] = useState(false)  const animations = useSprings(    data.length,    data.map((item, index) =&gt; {      return {        from: {          transform: `translateX(${index % 2 === 0 ? -110 : 110}%)`        },        to: {          transform: "translateX(0%)"        },        // 控制动画执行方向        // false: from -&gt; to        // true: to -&gt; from        // 当 on 状态发生变化后会触发动画执行        reverse: on      }    })  )  return (    &lt;div className="container"&gt;      &lt;button onClick={() =&gt; setOn(!on)} className="button mt-2 is-fullwidth is-info"&gt; Click &lt;/button&gt;      &lt;ul&gt;        {data.map((item, index) =&gt; (          &lt;animated.li style={animations[index]} key={item}&gt;            &lt;button className={`button mt-2 is-fullwidth is-${item}`}&gt;              {item}            &lt;/button&gt;          &lt;/animated.li&gt;        ))}      &lt;/ul&gt;    &lt;/div&gt;  )}export default App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-3-useTrail"><a href="#8-3-3-useTrail" class="headerlink" title="8.3.3 useTrail"></a>8.3.3 useTrail</h4><p>创建交错动画，先创建动画，根据动画创建执行动画的元素。</p><img src="/medias/assets/react-spring/07.gif" align="left"><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useTrail, animated, config } from "react-spring";import { useState } from "react";import mock_data from "./MOCK_DATA.json";function App() {  const [{ dataToShow, indexStartRender }, setState] = useState({    dataToShow: mock_data,    indexStartRender: 0,  });  const animations = useTrail(dataToShow.length, {    from: {      transform: "translateY(100%)",    },    to: {      transform: "translateY(0%)",    },    // 动画执行完成后重置, 以便再次执行动画    reset: true,    // config.wobby 为预置动画形式    config: config.wobbly,  });  const onClickHandler = (index) =&gt; {    const newData = [      ...dataToShow.slice(0, index),      ...dataToShow.slice(index + 1),    ];    setState({      dataToShow: newData,      indexStartRender: index,    });  };  return (    &lt;div className="container"&gt;      {dataToShow.map((item, index) =&gt; (        &lt;animated.button          onClick={() =&gt; onClickHandler(index)}          key={item.id}          style={index &gt;= indexStartRender ? animations[index] : null}          className="button mt-2 is-fullwidth is-primary"        &gt;          {item.first_name}        &lt;/animated.button&gt;      ))}    &lt;/div&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-3-4-useTransition"><a href="#8-3-4-useTransition" class="headerlink" title="8.3.4 useTransition"></a>8.3.4 useTransition</h4><p>创建入场动画和出场动画，可以是一个元素也可以是一组元素。</p><img src="/medias/assets/react-spring/08.gif" align="left" width="40%"><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;div className="app"&gt;  &lt;button&gt;button&lt;/button&gt;  &lt;div className="container"&gt;    &lt;div className="item"&gt;item&lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useState } from "react"import { animated, useTransition } from "react-spring"import "./App.css"function App() {  const [isVisible, setIsVisible] = useState(false)  const transition = useTransition(isVisible, {    from: {      opacity: 0,      x: -300,      y: 800    },    enter: {      opacity: 1,      x: 0,      y: 0    },    leave: {      opacity: 0,      x: 300,      y: 800    }  })  return (    &lt;div className="app"&gt;      &lt;button onClick={() =&gt; setIsVisible(!isVisible)}&gt;       {isVisible ? "卸载" : "挂载"}      &lt;/button&gt;      &lt;div className="container"&gt;        {transition((style, item) =&gt; {          return item ? (            &lt;animated.button className="item" style={style}&gt;&lt;/animated.button&gt;          ) : null        })}      &lt;/div&gt;    &lt;/div&gt;  )}export default App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/medias/assets/react-spring/09.gif" align="left" width="40%"><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useState } from "react"import { animated, useTransition } from "react-spring"import "./App.css"function App() {  const [items, setItems] = useState([])  const transition = useTransition(items, {    from: {      opacity: 0,      x: -300,      y: 800    },    enter: item =&gt; ({ opacity: 1, x: 0, y: item.y, delay: item.delay }),    leave: {      opacity: 0,      x: 300,      y: 800,    }  })  const onClickHandler = () =&gt; {    setItems(prev =&gt;      prev.length        ? []        : [            { y: -50, delay: 200 },            { y: 0, delay: 400 },            { y: 50, delay: 600 }          ]    )  }  return (    &lt;div className="app"&gt;      &lt;button onClick={onClickHandler}&gt;{items.length ? "卸载" : "挂载"}&lt;/button&gt;      &lt;div className="container"&gt;        {transition((style, item) =&gt; {          return item ? (            &lt;animated.div className="item" style={style}&gt;&lt;/animated.div&gt;          ) : null        })}      &lt;/div&gt;    &lt;/div&gt;  )}export default App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="/medias/assets/react-spring/10.gif" align="left" width="40%"><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useState } from "react"import { animated, useTransition } from "react-spring"import "./App.css"function App() {  const [items, setItems] = useState([])  const transition = useTransition(items, {    from: {      opacity: 0,      x: -300,      y: 800,      width: 20,      height: 20    },    enter: item =&gt; async next =&gt; {      await next({ opacity: 1, y: item.y, delay: item.delay })      await next({        x: 0,        width: 100,        height: 100      })    },    leave: {      opacity: 0,      x: 300,      y: 800    }  })  return (    &lt;div className="app"&gt;      &lt;button        onClick={() =&gt;          setItems(prev =&gt; {            return prev.length              ? []              : [                  { y: -50, delay: 200 },                  { y: 0, delay: 400 },                  { y: 50, delay: 600 }                ]          })        }      &gt;        {items.length ? "un-mount" : "mount"}      &lt;/button&gt;      &lt;div className="container"&gt;        {transition((style, item) =&gt; {          return item ? (            &lt;animated.div className="item" style={style}&gt;&lt;/animated.div&gt;          ) : null        })}      &lt;/div&gt;    &lt;/div&gt;  )}export default App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4-React-Query"><a href="#8-4-React-Query" class="headerlink" title="8.4 React Query"></a>8.4 <a href="https://react-query.tanstack.com/">React Query</a></h3><h4 id="8-4-1-概述"><a href="#8-4-1-概述" class="headerlink" title="8.4.1  概述"></a>8.4.1  概述</h4><p>React Query 使 React 应用获取，缓存，同步和更新服务端状态变得轻而易举。</p><ol><li><p>请求管理</p><p>在适当时机自动向服务端发送请求以同步状态。适当时机是指当请求出错时，网络重新连接时，浏览器窗口重新获取焦点时。</p><p>它是基于请求库上层的封装，实现了和请求相关的逻辑， 比如无限加载，失败重试，轮询，请求状态查询等。</p><p>它不生产请求，它只是请求的搬运工。</p></li><li><p>状态管理</p><p>将服务端状态同步到客户端的内存中进行缓存，任何组件都可以从缓存中获取状态，从而实现全局状态共享。</p></li></ol><p>下载：<code>yarn add react-query@3.16.0</code></p><h4 id="8-4-2-状态模拟"><a href="#8-4-2-状态模拟" class="headerlink" title="8.4.2 状态模拟"></a>8.4.2 状态模拟</h4><ol><li><p>本地安装状态模拟工具 <code>yarn add json-server</code></p></li><li><p>创建 db.json 本地状态库</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"todos"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"吃饭"</span><span class="token punctuation">,</span>      <span class="token property">"isCompleted"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"isEditing"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"睡觉"</span><span class="token punctuation">,</span>      <span class="token property">"isCompleted"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token property">"isEditing"</span><span class="token operator">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"打豆豆"</span><span class="token punctuation">,</span>      <span class="token property">"isCompleted"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token property">"isEditing"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">3</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token property">"posts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Hello React Query"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"React Query is Great"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>package.json</code> 文件中添加命令</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"json-server"</span><span class="token operator">:</span> <span class="token string">"json-server --watch db.json --port 3001"</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>启动程序 <code>npm run json-server</code></p></li></ol><h4 id="8-4-3-全局配置"><a href="#8-4-3-全局配置" class="headerlink" title="8.4.3 全局配置"></a>8.4.3 全局配置</h4><ol><li>React Query 会在客户端的内存中缓存状态，任何组件都可以从缓存中获取状态</li><li>组件可以通过 <code>queryClient</code> 对象操作内存中的缓存状态</li><li>开发者需要在应用的入口文件中通过 <code>QueryClient</code> 类创建 <code>queryClient</code> 对象</li><li>开发者需要通过 <code>QueryClientProvider</code> 组件将 <code>queryClient</code> 对象传递到下层组件</li><li>组件通过 <code>useQueryClient</code> 钩子函数获取 <code>queryClient</code> 对象</li></ol><pre class="line-numbers language-react" data-language="react"><code class="language-react">import ReactDOM from "react-dom"import App from "./App"import axios from "axios"import { QueryClient, QueryClientProvider } from "react-query"// 响应拦截器, 让开发者直接获取到服务器端返回的数据axios.interceptors.response.use(response =&gt; response.data)axios.defaults.baseURL = "http://localhost:3001"// 创建 queryClient 对象const queryClient = new QueryClient()ReactDOM.render(  {/* 将 queryClient 对象传递到下层组件 */}  &lt;QueryClientProvider client={queryClient}&gt;    &lt;App /&gt;  &lt;/QueryClientProvider&gt;,  document.getElementById("root"))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-4-4-useQuery-同步服务端状态"><a href="#8-4-4-useQuery-同步服务端状态" class="headerlink" title="8.4.4 useQuery 同步服务端状态"></a>8.4.4 useQuery 同步服务端状态</h4><h5 id="1-基本使用-2"><a href="#1-基本使用-2" class="headerlink" title="1. 基本使用"></a>1. 基本使用</h5><p>在组件挂载完成后发送请求获取状态，缓存状态。</p><p>获取服务端默认待办事项列表。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// TodosMain.js 同步服务端状态待办事项列表import axios from "axios"import { useQuery } from "react-query"import TodoItem from "./TodoItem"async function fetchTodos() {  try {    return axios.get("/todos")  } catch (err) {    throw new Error("服务端默认待办事项加载失败")  }}function TodosMain() {  // useQuery(queryKey, queryFn)  const { isLoading, isError, error, data } = useQuery("todos", fetchTodos)  if (isLoading) return &lt;div&gt;正在加载服务端默认待办事项&lt;/div&gt;  if (isError) return &lt;div&gt;{error.message}&lt;/div&gt;  return (    &lt;section className="main"&gt;      &lt;ul className="todo-list"&gt;        {data.map(todo =&gt; &lt;TodoItem key={todo.id} todo={todo} /&gt;)}      &lt;/ul&gt;    &lt;/section&gt;  )}export default TodosMain<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-配置选项"><a href="#4-配置选项" class="headerlink" title="4. 配置选项"></a>4. 配置选项</h5><h6 id="1-retry"><a href="#1-retry" class="headerlink" title="1. retry"></a>1. retry</h6><p>在请求发生错误时，默认会重试 3 次，如果请求还是不成功 <code>isError</code> 为真。</p><p>可以通过 retry 配置项更改重试次数或者禁用重试 ( false )。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">useQuery("todos", fetchTodos, { retry: 2 })<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="2-refetchOnWindowFocus"><a href="#2-refetchOnWindowFocus" class="headerlink" title="2. refetchOnWindowFocus"></a>2. refetchOnWindowFocus</h6><p>当浏览器窗口重新获取焦点时，重新向服务器端发送请求同步最新状态。</p><p>在状态未更新之前，组件中显示缓存状态。</p><p>可以通过 <code>refetchOnWindowFocus</code> 配置项禁用此行为。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">useQuery("todos", fetchTodos, { refetchOnWindowFocus: false })<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="3-enabled"><a href="#3-enabled" class="headerlink" title="3. enabled"></a>3. enabled</h6><p>默认值为 true，即组件挂载完成后发送请求同步服务端状态。当值为 false 的时候此行为被禁止，当值被改为 true 时，发送请求同步服务端状态。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">const [isLoad, setIsLoad] = useState(false)useQuery("todos", fetchTodos, { enabled: isLoad })&lt;button onClick={() =&gt; setIsLoad(true)}&gt;同步状态&lt;/button&gt;data &amp;&amp; data.map<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="4-staleTime"><a href="#4-staleTime" class="headerlink" title="4. staleTime"></a>4. staleTime</h6><p>状态的保质期。在同步状态时，如果状态仍然在保质期内，直接从缓存中获取状态，不会在后台发送真实的请求来更新状态缓存。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">useQuery("todos", fetchTodos, { staleTime: 5000 }) // 每次状态同步完成后都会有5秒的保质期<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6 id="5-placeholderData"><a href="#5-placeholderData" class="headerlink" title="5. placeholderData"></a>5. placeholderData</h6><p>在服务端状态没有加载完成前，可以使用占位符状态填充客户端缓存以提升用户体验。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">useQuery("todos", fetchTodos, { placeholderData: [ { id: 1, title: "吃饭" } ] })<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="6-refetchInterval"><a href="#6-refetchInterval" class="headerlink" title="6 refetchInterval"></a>6 refetchInterval</h6><p>指定轮询的间隔时间，false 为不轮询。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">useQuery("todos", fetchTodos, { refetchInterval: 1000 })<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="5-queryKey"><a href="#5-queryKey" class="headerlink" title="5. queryKey"></a>5. queryKey</h5><p>useQuery 方法的第一个参数，除可以使用字符串以外，还可以使用数组，实现查询时传递参数。</p><p>实现查询 ID 为 1 的待办事项列表。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import axios from "axios"import { useQuery } from "react-query"function getTodoById({ queryKey }) {  try {    return axios.get(`/todos/${queryKey[1]}`)  } catch (err) {    throw new Error("待办事项获取失败")  }}function FetchTodoById() {  const { data } = useQuery(["todo", 2], getTodoById)  return (    &lt;div&gt;      &lt;pre&gt;{JSON.stringify(data, null, 2)}&lt;/pre&gt;    &lt;/div&gt;  )}export default FetchTodoById<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">useQuery({ queryKey: ["todo", 2], queryFn: getTodoById })<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-4-5-useMutation"><a href="#8-4-5-useMutation" class="headerlink" title="8.4.5 useMutation"></a>8.4.5 useMutation</h4><p>修改状态，使用 useMutation 钩子函数，修改包括，删除，更新，添加。</p><p>实现添加待办事项。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// TodosHeader.js 添加待办事项import axios from "axios"import { useState } from "react"import { useMutation } from "react-query"async function addTodo(todo) {  try {    return axios.post("/todos", todo)  } catch (err) {    throw new Error("任务添加失败")  }}function TodosHeader() {  const [title, setTitle] = useState("")  const { mutate } = useMutation(addTodo, {    onSuccess() {      setTitle("")    }  })  return (    &lt;header className="header"&gt;      &lt;input        value={title}        onChange={event =&gt; setTitle(event.target.value)}        onKeyUp={event =&gt; {          if (event.code === "Enter") {            mutate({ title, isCompleted: false, isEditing: false })          }        }}      /&gt;    &lt;/header&gt;  )}export default TodosHeader<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-4-6-QueryClient"><a href="#8-4-6-QueryClient" class="headerlink" title="8.4.6 QueryClient"></a>8.4.6 QueryClient</h4><h5 id="1-同步服务端缓存"><a href="#1-同步服务端缓存" class="headerlink" title="1. 同步服务端缓存"></a>1. 同步服务端缓存</h5><p>实现在待办事项添加成功后更新客户端缓存以使组件展示出最新的待办事项列表。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useQueryClient } from "react-query"const queryClient = useQueryClient()useMutation(addTodo, {    onSuccess() {      // 使本地缓存中的 todos 状态无效, 重新发送请求同步状态。      queryClient.invalidateQueries("todos")    }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="2-操作客户端缓存"><a href="#2-操作客户端缓存" class="headerlink" title="2. 操作客户端缓存"></a>2. 操作客户端缓存</h5><p>实现更改待办事项的是否已完成状态。</p><p>通过 setQueryData 方法可以手动设置客户端缓存数据。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import axios from "axios"import { useMutation, useQueryClient } from "react-query"async function modifyTodoCompleted({ id, isCompleted }) {  try {    return axios.patch(`/todos/${id}`, { isCompleted })  } catch (err) {    throw new Error("任务状态更改失败")  }}function TodoCompleted({ todo }) {  const queryClient = useQueryClient()  const { mutate } = useMutation(modifyTodoCompleted, {    onSuccess(response) {      queryClient.setQueryData("todos", data =&gt;        data.map(todo =&gt; (todo.id !== response.id ? todo : response))      )    }  })  return (    &lt;input      className="toggle"      type="checkbox"      checked={todo.isCompleted}      onChange={event =&gt; {        mutate({ id: todo.id, isCompleted: event.target.checked })      }}    /&gt;  )}export default TodoCompleted<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-4-7-useQuery-同步客户端状态"><a href="#8-4-7-useQuery-同步客户端状态" class="headerlink" title="8.4.7 useQuery 同步客户端状态"></a>8.4.7 useQuery 同步客户端状态</h4><p>实现计算未完成待办事项的数量。</p><p>当客户端内存中的状态发生变化后，所有使用 useQuery 同步该状态的组件都会得到更新。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// hooks/todos.js// 1. 将同步服务端待办事项抽象成自定义钩子函数 useTodos// 2. 分别在不同组件中调用钩子函数以获取待办事项列表import { useQuery } from "react-query"import axios from "axios"async function fetchTodos() {  try {    return axios.get("/todos")  } catch (err) {    throw new Error("服务端默认待办事项加载失败")  }}export function useTodos() {  return useQuery("todos", fetchTodos)}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useTodos } from "../hooks/todos"function UnCompletedTodoCount() {  const { data } = useTodos()  return (    &lt;span className="todo-count"&gt;      &lt;strong&gt;{data &amp;&amp; data.filter(todo =&gt; !todo.isCompleted).length}&lt;/strong&gt;      item left    &lt;/span&gt;  )}export default UnCompletedTodoCount<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-4-8-QueryObserver-状态订阅"><a href="#8-4-8-QueryObserver-状态订阅" class="headerlink" title="8.4.8 QueryObserver 状态订阅"></a>8.4.8 QueryObserver 状态订阅</h4><p>通过 QueryObserver 可实现在任意组件中订阅状态，实现全局状态共享。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useQueryClient, QueryObserver } from "react-query"import { useEffect, useState } from "react"function UnCompletedTodoCount() {  const queryClient = useQueryClient()  const [todos, setTodos] = useState([])  useEffect(() =&gt; {    const todosObserver = new QueryObserver(queryClient, { queryKey: "todos" })    const unsubscribe = todosObserver.subscribe(result =&gt; setTodos(result.data))    return () =&gt; unsubscribe()  }, [])  return (    &lt;span className="todo-count"&gt;      &lt;strong&gt;{todos &amp;&amp; todos.filter(todo =&gt; !todo.isCompleted).length}&lt;/strong&gt;{" "}      item left    &lt;/span&gt;  )}export default UnCompletedTodoCount<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-4-9-useQueries-并发同步状态"><a href="#8-4-9-useQueries-并发同步状态" class="headerlink" title="8.4.9 useQueries 并发同步状态"></a>8.4.9 useQueries 并发同步状态</h4><p>使用 useQueries 可以并行发送请求，所有结果得到以后返回给开发者。</p><p>实现并发加载待办事项列表和文章列表。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useQueries } from "react-query"import axios from "axios"async function fetchTodos() {  try {    return axios.get("/todos")  } catch (err) {    throw new Error("服务端默认待办事项加载失败")  }}async function fetchPosts() {  try {    return axios.get("/posts")  } catch (err) {    throw new Error("文章列表加载失败")  }}function Parallel() {  const results = useQueries([    {      queryKey: "anotherTodos",      queryFn: fetchTodos    },    {      queryKey: "posts",      queryFn: fetchPosts    }  ])  return (    &lt;div&gt;      &lt;pre&gt;{JSON.stringify(results, null, 2)}&lt;/pre&gt;    &lt;/div&gt;  )}export default Parallel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-4-10-useInfiniteQuery-分页"><a href="#8-4-10-useInfiniteQuery-分页" class="headerlink" title="8.4.10 useInfiniteQuery 分页"></a>8.4.10 useInfiniteQuery 分页</h4><p>使用它可以实现和分页相关的逻辑。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import axios from "axios"import { useInfiniteQuery } from "react-query"async function fetchUser({ pageParam = 1 }) {  try {    return axios.get(`https://reqres.in/api/users?page=${pageParam}`)  } catch (err) {    throw new Error("用户状态同步失败")  }}function LoadMore() {  const {    data,    isLoading,    isFetching,    hasNextPage,    fetchNextPage  } = useInfiniteQuery("users", fetchUser, {    getNextPageParam(current) {      if (current.page &lt; current.total_pages) {        return current.page + 1      }    }  })  if (isLoading) return &lt;div&gt;用户状态正在加载中...&lt;/div&gt;  return (    &lt;div&gt;      &lt;ul&gt;        {data.pages.map(page =&gt;          page.data.map(user =&gt; &lt;li key={user.id}&gt;{user.first_name}&lt;/li&gt;)        )}      &lt;/ul&gt;      {hasNextPage &amp;&amp; &lt;button onClick={() =&gt; fetchNextPage()}&gt;加载更多&lt;/button&gt;}      {isFetching &amp;&amp; &lt;div&gt;更多状态加载中...&lt;/div&gt;}    &lt;/div&gt;  )}export default LoadMore<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>isLoading</code> 只有初次加载时才会变为 true，通常用作首次加载数据时的加载状态。</p><p><code>isFetching</code> 是只要发生加载行为就会变为 true，通过用作加载更多时的加载状态。</p><h4 id="8-4-11-useIsFetching-全局加载状态"><a href="#8-4-11-useIsFetching-全局加载状态" class="headerlink" title="8.4.11 useIsFetching 全局加载状态"></a>8.4.11 useIsFetching 全局加载状态</h4><p>只要程序中有状态在同步，useIsFetching 钩子函数获取的结果就为 true，可以通过它实现全局加载状态的提示。</p><p><code>yarn add react-spinners@0.10.6 @emotion/react@11.1.5</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { PacmanLoader } from "react-spinners"import { useIsFetching } from "react-query"import { css } from "@emotion/react"const loaderCss = css`  position: absolute;  left: 100%;  top: 0;  transform: translateX(-400%);  z-index: 1;`function GlobalLoading() {  const isFetching = useIsFetching()  return (    &lt;PacmanLoader      loading={isFetching}      color={"rgba(175, 47, 47, 0.25)"}      size={15}      css={loaderCss}    /&gt;  )}export default GlobalLoading<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-5-React-Modal"><a href="#8-5-React-Modal" class="headerlink" title="8.5 React Modal"></a>8.5 React Modal</h3><p><a href="http://reactcommunity.org/react-modal/">React Modal 文档</a></p><img src="/medias/assets/images/52.gif" align="left" width="30%"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> react-modal<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useState } from "react";import Modal from "react-modal";Modal.setAppElement("#root");function App() {  const [modalIsOpen, setModalIsOpen] = useState(false);  // onRequestClose: 在请求关闭弹框时执行该回调函数 (单击弹框主体区域外部或按ESC键)  // shouldCloseOnOverlayClick: 点击弹框主体区域外部时是否关闭弹框, 配合 onRequestClose 一起使用   // 比如按ESC关闭弹框, 点击弹框主体区域外部不关闭弹框  return (    &lt;&gt;      &lt;button onClick={() =&gt; setModalIsOpen(true)}&gt;打开弹框&lt;/button&gt;      &lt;Modal        style={{          overlay: {            backgroundColor: "rgba(100,100,100,0.5)",          },          content: {            color: "skyblue",          },        }}        isOpen={modalIsOpen}        onRequestClose={() =&gt; setModalIsOpen(false)}        shouldCloseOnOverlayClick={false}      &gt;        sdfsd        &lt;button onClick={() =&gt; setModalIsOpen(false)}&gt;关闭弹框&lt;/button&gt;      &lt;/Modal&gt;    &lt;/&gt;  );}export default App;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-6-React-Player"><a href="#8-6-React-Player" class="headerlink" title="8.6 React Player"></a>8.6 React Player</h3><p><a href="https://www.npmjs.com/package/react-player">React Player 文档</a></p><img src="/medias/assets/images/53.gif"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> react-player<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import ReactPlayer from "react-player"function App() {  return (    &lt;ReactPlayer      onStart={() =&gt; console.log("onStart calllback")}      onEnded={() =&gt; console.log("onEnded calllback")}      onPause={() =&gt; console.log("onPause calllback")}      width="auto"      muted={true}      controls      url="//vjs.zencdn.net/v/oceans.mp4"    /&gt;  )}export default App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-7-React-Datepicker"><a href="#8-7-React-Datepicker" class="headerlink" title="8.7 React Datepicker"></a>8.7 React Datepicker</h3><img src="/medias/assets/images/53.png" align="left" width="23%"><p><a href="https://reactdatepicker.com/">react-datepicker</a> <a href="https://date-fns.org/">date-fns</a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> react-datepicker date-fns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import DatePicker, { registerLocale, setDefaultLocale } from "react-datepicker"import { useState } from "react"import { addDays, subDays } from "date-fns"import zhCN from "date-fns/locale/zh-CN"import "react-datepicker/dist/react-datepicker.css"// 注册语言registerLocale("zh-CN", zhCN)// 全局设置日期选择框语言setDefaultLocale("zh-CN")// subDays: 基于给定的日期减去指定的天数// addDays: 基于给定的日期添加指定的天数export default function App() {  const [selectedDate, setSelectedDate] = useState(new Date())  // minDate 能够选择的最早的日期  // maxDate 能够选择的最晚的日期  // dateFormat 日期格式化  // onChange 当用户选择日期后执行的回调函数, 回调函数的参数就是用户选择的日期  // selected 默认选中的日期  // filterDate 日期过滤  // showTimeSelect  显示时间选择  return (    &lt;DatePicker      selected={selectedDate}      onChange={date =&gt; setSelectedDate(date)}      dateFormat="yyyy-MM-dd hh:mm:ss"      filterDate={date =&gt; date.getDay() !== 6 &amp;&amp; date.getDay() !== 0}      minDate={subDays(new Date(), 2)}      maxDate={addDays(new Date(), 2)}      showTimeSelect    /&gt;  )}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-8-React-Table"><a href="#8-8-React-Table" class="headerlink" title="8.8 React Table"></a>8.8 <a href="https://react-table.tanstack.com/">React Table</a></h3><h4 id="8-8-1-概述"><a href="#8-8-1-概述" class="headerlink" title="8.8.1 概述"></a>8.8.1 概述</h4><h5 id="1-为什么学习-React-Table"><a href="#1-为什么学习-React-Table" class="headerlink" title="1. 为什么学习 React Table"></a>1. 为什么学习 React Table</h5><ol><li>使用表格进行数据可视化是不可避免的。</li><li>构建自己的表格组件可能会充满挑战。</li></ol><h5 id="2-React-Table"><a href="#2-React-Table" class="headerlink" title="2. React Table"></a>2. React Table</h5><p>React Table 用于构建强大的可扩展的数据表格，是一组钩子函数的集合，使用什么功能就调用什么钩子函数。</p><ol><li>React Table 采用无头设计，即不提供 UI 样式，开发者可以完全控制表格如何呈现，所以它不是表格组件，而是表格的实用工具集。</li><li>功能强大，提供了过滤，排序，分组，分页和列固定等等功能。</li><li>React Table 是可扩展的，因为它拥有自己的插件系统，使开发者可以覆盖或扩展React Table 内部的逻辑步骤，阶段或过程。</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> react-table@7.6.3 dateformat@4.5.1 react-table-sticky@1.1.3 styled-components@5.2.3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="8-8-2-Basic-Table"><a href="#8-8-2-Basic-Table" class="headerlink" title="8.8.2 Basic Table"></a>8.8.2 Basic Table</h4><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/03.png"><ol><li><p>获取要展示的数据。 生成模拟数据：<a href="https://mockaroo.com/">mockaroo</a></p><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/01.png"></li><li><p>定义表格的列。</p></li><li><p>使用 react-table 创建表格实例对象并传入要展示的数据和列信息。</p></li><li><p>使用 HTML 定义一个基本的表格结构。</p></li><li><p>将表格实例对象信息赋值给 HTML，展示数据。</p></li><li><p>引入 CSS 文件为表格添加样式 <a href="https://www.w3schools.com/css/tryit.asp?filename=trycss_table_fancy">样式来源</a>。</p></li></ol><pre class="line-numbers language-react" data-language="react"><code class="language-react">// columns.js// Header: 定义页头列名称// accessor: 定义列关联的数据属性export const COLUMNS = [  {    Header: "ID",    accessor: "id"  },  {    Header: "名",    accessor: "first_name"  },  {    Header: "姓",    accessor: "last_name"  },  {    Header: "出生日期",    accessor: "date_of_birth"  },  {    Header: "国家",    accessor: "country"  },  {    Header: "电话",    accessor: "phone"  }]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// BasicTable.jsimport { COLUMNS } from "./columns"import MOCK_DATA from "./MOCK_DATA.json"import { useMemo } from "react"import { useTable } from "react-table"import "./table.css"const BasicTable = () =&gt; {  // 缓存列信息  const columns = useMemo(() =&gt; COLUMNS, [])  // 缓存表格数据  const data = useMemo(() =&gt; MOCK_DATA, [])  // 创建表格实例对象  const {    // 获取 table 标记属性    getTableProps,    // 获取 tbody 标记属性    getTableBodyProps,    // 获取表格页头信息    headerGroups,    // 获取表格中要展示的数据    rows,    // 计算要显示的行信息 (比如分页, 当前页要显示哪些行)    prepareRow  } = useTable({    columns,    data  })  return (    &lt;&gt;      &lt;table {...getTableProps()}&gt;        &lt;thead&gt;          {headerGroups.map(headerGroup =&gt; (            &lt;tr {...headerGroup.getHeaderGroupProps()}&gt;              {headerGroup.headers.map(column =&gt; (                &lt;th {...column.getHeaderProps()}&gt;                  {column.render("Header")}                &lt;/th&gt;              ))}            &lt;/tr&gt;          ))}        &lt;/thead&gt;        &lt;tbody {...getTableBodyProps()}&gt;          {rows.map(row =&gt; {            prepareRow(row)            return (              &lt;tr {...row.getRowProps()}&gt;                {row.cells.map(cell =&gt; (                  &lt;td {...cell.getCellProps()}&gt;{cell.render("Cell")}&lt;/td&gt;                ))}              &lt;/tr&gt;            )          })}        &lt;/tbody&gt;      &lt;/table&gt;    &lt;/&gt;  )}export default BasicTable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">table</span> <span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> Arial<span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>  <span class="token property">border-collapse</span><span class="token punctuation">:</span> collapse<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">table td,table th</span> <span class="token punctuation">{</span>  <span class="token property">border</span><span class="token punctuation">:</span> 1px solid #ddd<span class="token punctuation">;</span>  <span class="token property">padding</span><span class="token punctuation">:</span> 8px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">table tr:nth-child(even)</span> <span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #f2f2f2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">table tr:hover</span> <span class="token punctuation">{</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #ddd<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">table th, tfoot td</span> <span class="token punctuation">{</span>  <span class="token property">padding-top</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> #4caf50<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-3-创建表格页脚"><a href="#8-8-3-创建表格页脚" class="headerlink" title="8.8.3 创建表格页脚"></a>8.8.3 创建表格页脚</h4><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/04.png"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// columns.js</span><span class="token comment">// Footer: 定义页脚列名称</span>export const COLUMNS = <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    Footer<span class="token operator">:</span> <span class="token string">"ID"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    Footer<span class="token operator">:</span> <span class="token string">"名"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    Footer<span class="token operator">:</span> <span class="token string">"姓"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    Footer<span class="token operator">:</span> <span class="token string">"出生日期"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    Footer<span class="token operator">:</span> <span class="token string">"国家"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    Footer<span class="token operator">:</span> <span class="token string">"电话"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">const BasicTable = () =&gt; {  // 获取表格页脚信息  const { footerGroups } = useTable({})  return (    &lt;table&gt;      &lt;tfoot&gt;        {footerGroups.map(footerGroup =&gt; (          &lt;tr {...footerGroup.getFooterGroupProps()}&gt;            {footerGroup.headers.map(column =&gt; (              &lt;th {...column.getFooterProps()}&gt;{column.render("Footer")}&lt;/th&gt;            ))}          &lt;/tr&gt;        ))}      &lt;/tfoot&gt;    &lt;/table&gt;  )}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-4-创建表格分组"><a href="#8-8-4-创建表格分组" class="headerlink" title="8.8.4 创建表格分组"></a>8.8.4 创建表格分组</h4><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/05.png"><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token comment">// columns.js</span>export const COLUMNS_GROUP = <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    Header<span class="token operator">:</span> <span class="token string">"ID"</span><span class="token punctuation">,</span>    Footer<span class="token operator">:</span> <span class="token string">"ID"</span><span class="token punctuation">,</span>    accessor<span class="token operator">:</span> <span class="token string">"id"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    Header<span class="token operator">:</span> <span class="token string">"Name"</span><span class="token punctuation">,</span>    Footer<span class="token operator">:</span> <span class="token string">"Name"</span><span class="token punctuation">,</span>    columns<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        Header<span class="token operator">:</span> <span class="token string">"First Name"</span><span class="token punctuation">,</span>        Footer<span class="token operator">:</span> <span class="token string">"First Name"</span><span class="token punctuation">,</span>        accessor<span class="token operator">:</span> <span class="token string">"first_name"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        Header<span class="token operator">:</span> <span class="token string">"Last Name"</span><span class="token punctuation">,</span>        Footer<span class="token operator">:</span> <span class="token string">"Last Name"</span><span class="token punctuation">,</span>        accessor<span class="token operator">:</span> <span class="token string">"last_name"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    Header<span class="token operator">:</span> <span class="token string">"Info"</span><span class="token punctuation">,</span>    Footer<span class="token operator">:</span> <span class="token string">"Info"</span><span class="token punctuation">,</span>    columns<span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        Header<span class="token operator">:</span> <span class="token string">"Date Of Birth"</span><span class="token punctuation">,</span>        Footer<span class="token operator">:</span> <span class="token string">"Date Of Birth"</span><span class="token punctuation">,</span>        accessor<span class="token operator">:</span> <span class="token string">"date_of_birth"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        Header<span class="token operator">:</span> <span class="token string">"Country"</span><span class="token punctuation">,</span>        Footer<span class="token operator">:</span> <span class="token string">"Country"</span><span class="token punctuation">,</span>        accessor<span class="token operator">:</span> <span class="token string">"country"</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        Header<span class="token operator">:</span> <span class="token string">"Phone"</span><span class="token punctuation">,</span>        Footer<span class="token operator">:</span> <span class="token string">"Phone"</span><span class="token punctuation">,</span>        accessor<span class="token operator">:</span> <span class="token string">"phone"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// BasicTabel.jsimport { COLUMNS_GROUP } from "./columns"const BasicTable = () =&gt; {  const columns = useMemo(() =&gt; COLUMNS_GROUP, [])}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-5-实现表格排序"><a href="#8-8-5-实现表格排序" class="headerlink" title="8.8.5 实现表格排序"></a>8.8.5 实现表格排序</h4><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/06.png"><pre class="line-numbers language-react" data-language="react"><code class="language-react">// SortingTable.jsimport { useTable, useSortBy } from "react-table"const SortingTable = () =&gt; {  useTable({}, useSortBy)  // column.getSortByToggleProps()  // 将标记的鼠标移入样式改为手势, 表示该列是可以点击的  // 实现点击列后, 对列数据进行排序 (升序, 降序, 默认排序交替)  return (    &lt;thead&gt;      &lt;th {...column.getHeaderProps(column.getSortByToggleProps())}&gt;        {column.render("Header")}        &lt;span&gt;          {column.isSorted ? (column.isSortedDesc ? "↓" : "↑") : ""}        &lt;/span&gt;      &lt;/th&gt;    &lt;/thead&gt;  )}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-6-单元格内容格式化"><a href="#8-8-6-单元格内容格式化" class="headerlink" title="8.8.6 单元格内容格式化"></a>8.8.6 单元格内容格式化</h4><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/07.png"><p>日期格式化：<code>yarn add dateformat</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> dateformat <span class="token keyword">from</span> <span class="token string">"dateformat"</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">COLUMNS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    Header<span class="token operator">:</span> <span class="token string">"Date Of Birth"</span><span class="token punctuation">,</span>    Footer<span class="token operator">:</span> <span class="token string">"Date Of Birth"</span><span class="token punctuation">,</span>    accessor<span class="token operator">:</span> <span class="token string">"date_of_birth"</span><span class="token punctuation">,</span>    <span class="token function-variable function">Cell</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> value <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dateformat</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">"yyyy-mm-dd"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-7-实现全局过滤"><a href="#8-8-7-实现全局过滤" class="headerlink" title="8.8.7 实现全局过滤"></a>8.8.7 实现全局过滤</h4><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/08.png"><pre class="line-numbers language-react" data-language="react"><code class="language-react">// GlobalFilter.js// 进行全局搜索的搜索框组件const GlobalFilter = ({ filter, setFilter }) =&gt; {  return (    &lt;div&gt;      搜索:{" "}      &lt;input        value={filter}        onChange={event =&gt; setFilter(event.target.value)}      /&gt;    &lt;/div&gt;  )}export default GlobalFilter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { useGlobalFilter } from "react-table"import GlobalFilter from "./GlobalFilter"const FilterTable = () =&gt; {  const { state, setGlobalFilter } = useTable({}, useGlobalFilter)  const { globalFilter } = state  return (    &lt;&gt;      &lt;GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} /&gt;      &lt;table&gt;&lt;/table&gt;    &lt;/&gt;  )}export default FilterTable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-8-实现列过滤"><a href="#8-8-8-实现列过滤" class="headerlink" title="8.8.8 实现列过滤"></a>8.8.8 实现列过滤</h4><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/09.png"><pre class="line-numbers language-react" data-language="react"><code class="language-react">// ColumnFilter.js// 进行列搜索的搜索框组件const ColumnFilter = ({ column }) =&gt; {  const { filterValue, setFilter } = column  return (    &lt;div&gt;      搜索:{" "}      &lt;input        value={filterValue}        onChange={event =&gt; setFilter(event.target.value)}      /&gt;    &lt;/div&gt;  )}export default ColumnFilter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// FilterTable.jsimport { useFilters } from "react-table"const FilterTable = () =&gt; {  const { } = useTable({}, useFilters, useGlobalFilter)  return (    &lt;thead&gt;      &lt;th&gt;        &lt;div&gt;          {column.canFilter ? column.render("Filter") : null}        &lt;/div&gt;      &lt;/th&gt;    &lt;/thead&gt;  )}export default FilterTable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// columns.js</span><span class="token keyword">import</span> ColumnFilter <span class="token keyword">from</span> <span class="token string">"./ColumnFilter"</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">COLUMNS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    Header<span class="token operator">:</span> <span class="token string">"ID"</span><span class="token punctuation">,</span>    Footer<span class="token operator">:</span> <span class="token string">"ID"</span><span class="token punctuation">,</span>    accessor<span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span>    Filter<span class="token operator">:</span> ColumnFilter  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-9-禁用过滤"><a href="#8-8-9-禁用过滤" class="headerlink" title="8.8.9 禁用过滤"></a>8.8.9 禁用过滤</h4><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/10.png"><p>在表格中的某一列不想使用过滤，需要显式进行声明，否则报错，声明如下：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// columns.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">COLUMNS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    Header<span class="token operator">:</span> <span class="token string">"ID"</span><span class="token punctuation">,</span>    Footer<span class="token operator">:</span> <span class="token string">"ID"</span><span class="token punctuation">,</span>    accessor<span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span>    disableFilters<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-10-设置默认列属性"><a href="#8-8-10-设置默认列属性" class="headerlink" title="8.8.10 设置默认列属性"></a>8.8.10 设置默认列属性</h4><p>在每一列中 Filter 配置选项的值都是一样的，通过配置默认列可以去除重复配置。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// FilterTable.jsimport ColumnFilter from "./ColumnFilter"const FilterTable = () =&gt; {  const defaultColumn = useMemo(() =&gt; ({ Filter: ColumnFilter }), [])  const {} = useTable({ defaultColumn })}export default FilterTable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后删除 columns.js 文件中的 Filter 配置选项。</p><h4 id="8-8-11-实现过滤防抖"><a href="#8-8-11-实现过滤防抖" class="headerlink" title="8.8.11 实现过滤防抖"></a>8.8.11 实现过滤防抖</h4><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/12.gif"><pre class="line-numbers language-react" data-language="react"><code class="language-react">// GlobalFilter.jsimport { useAsyncDebounce } from "react-table"import { useState } from "react"const GlobalFilter = ({ filter, setFilter }) =&gt; {  const [value, setValue] = useState(filter)  const onChange = useAsyncDebounce(() =&gt; {    setFilter(value)  }, 1000)  return (    &lt;div&gt;      搜索:{" "}      &lt;input        value={value || ""}        onChange={event =&gt; {          setValue(event.target.value)          onChange()        }}      /&gt;    &lt;/div&gt;  )}export default GlobalFilter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-12-实现基本分页"><a href="#8-8-12-实现基本分页" class="headerlink" title="8.8.12 实现基本分页"></a>8.8.12 实现基本分页</h4><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/11.png"><pre class="line-numbers language-react" data-language="react"><code class="language-react">// PaginationTable.jsimport { usePagination } from "react-table"const PaginationTable = () =&gt; {  const {    // 分页数据    page,    // 跳转到下一页    nextPage,    // 跳转到上一页    previousPage,    // 是否存在下一页    canNextPage,    // 是否存在上一页    canPreviousPage,    // 一共有多少页    pageCount,    state,  } = useTable({}, usePagination)  // 页码  const { pageIndex } = state  return (    &lt;&gt;      &lt;table&gt;        &lt;tbody&gt;          {page.map(row =&gt; {})}        &lt;/tbody&gt;      &lt;/table&gt;      &lt;div&gt;        &lt;span&gt;          {pageIndex + 1} / {pageCount}        &lt;/span&gt;        &lt;button disabled={!canPreviousPage} onClick={() =&gt; previousPage()}&gt;          上一页        &lt;/button&gt;        &lt;button disabled={!canNextPage} onClick={() =&gt; nextPage()}&gt;          下一页        &lt;/button&gt;      &lt;/div&gt;    &lt;/&gt;  )}export default PaginationTable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-13-实现页码跳转"><a href="#8-8-13-实现页码跳转" class="headerlink" title="8.8.13 实现页码跳转"></a>8.8.13 实现页码跳转</h4><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/13.png"><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { usePagination } from "react-table"const PaginationTable = () =&gt; {  const { gotoPage } = useTable({ initialState: { pageIndex: 3 } }, usePagination)  return (    &lt;div&gt;      &lt;span&gt;        跳转到:{" "}        &lt;input          type="number"          style={{ width: 50 }}          value={pageIndex + 1}          onChange={event =&gt; gotoPage(Number(event.target.value) - 1)}         /&gt;      &lt;/span&gt;      &lt;button disabled={!canPreviousPage} onClick={() =&gt; gotoPage(0)}&gt;        第一页      &lt;/button&gt;      &lt;button disabled={!canNextPage} onClick={() =&gt; gotoPage(pageCount - 1)}&gt;        最后一页      &lt;/button&gt;    &lt;/div&gt;  )}export default PaginationTable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-14-设置数据显示条数"><a href="#8-8-14-设置数据显示条数" class="headerlink" title="8.8.14 设置数据显示条数"></a>8.8.14 设置数据显示条数</h4><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/14.png"><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { usePagination } from "react-table"const PaginationTable = () =&gt; {  const { setPageSize } = useTable({initialState: {pageSize: 25}})  const { pageSize } = state  return (    &lt;select value={pageSize} onChange={event =&gt; setPageSize(Number(event.target.value))}&gt;      {[10, 25, 50].map(pagesize =&gt; (        &lt;option key={pagesize} value={pagesize}&gt;          显示 {pagesize} 条数据        &lt;/option&gt;      ))}    &lt;/select&gt;  )}export default PaginationTable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-15-实现选择行数据"><a href="#8-8-15-实现选择行数据" class="headerlink" title="8.8.15 实现选择行数据"></a>8.8.15 实现选择行数据</h4><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/15.png"><pre class="line-numbers language-react" data-language="react"><code class="language-react">// Checkbox.jsimport { forwardRef } from "react"// 将 indeterminate 从 props 单独解构出来, 它不能直接被添加到 input 身上// ref: 因为 react-table 要为复选添加功能, 要对其进行操作, 所以通过 Ref 的方式获取该复选// rest: 通过 props 的方式向复选框中添加属性以实现复选框的单选和全选功能const Checkbox = forwardRef(({ indeterminate, ...rest }, ref) =&gt; {  return &lt;input type="checkbox" ref={ref} {...rest} /&gt;})export default Checkbox<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// RowSelection.js// 实现选择行数据功能import { useRowSelect } from "react-table"// 通过此复选框选择行数据import Checkbox from "./Checkbox"const RowSelection = () =&gt; {  const {    // 选择的结果数组    selectedFlatRows  } = useTable({ columns, data }, useRowSelect, hooks =&gt; {    // 在初始化表格实例对象时调用    // hooks: 对象, 钩子函数集合    // 以编程方式向表格中添加列    hooks.visibleColumns.push(columns =&gt; {      // columns 现有的列数据      return [        {          id: "selection",          Header: ({ getToggleAllRowsSelectedProps }) =&gt; (            // 实现全选功能            &lt;Checkbox {...getToggleAllRowsSelectedProps()} /&gt;          ),          // 实现单选功能          Cell: ({ row }) =&gt; &lt;Checkbox {...row.getToggleRowSelectedProps()} /&gt;        },        ...columns      ]    })  })  // 只显示前 10 条数据  const firstPageRows = rows.slice(0, 10)  return (    &lt;div&gt;      {JSON.stringify(        { selectedRows: selectedFlatRows.map(row =&gt; row.original) },        null,        2      )}    &lt;/div&gt;  )}export default RowSelection<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-16-更改列顺序"><a href="#8-8-16-更改列顺序" class="headerlink" title="8.8.16 更改列顺序"></a>8.8.16 更改列顺序</h4><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/16.gif"><p>在更改列顺序时，需要使用到列 id，对列 id 排序就是对列进行排序 。在没有为列添加 id 属性时， accessor 默认为列的 id。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// ColumnOrder.jsimport { useColumnOrder } from "react-table"const ColumnOrder = () =&gt; {  const { setColumnOrder } = useTable({}, useColumnOrder)  return (    &lt;button      onClick={() =&gt;        setColumnOrder([          "id",          "first_name",          "last_name",          "phone",          "country",          "date_of_birth"        ])       }      &gt;      更改列书序    &lt;/button&gt;  )}export default ColumnOrder<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-17-显示隐藏列"><a href="#8-8-17-显示隐藏列" class="headerlink" title="8.8.17 显示隐藏列"></a>8.8.17 显示隐藏列</h4><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/17.png"><pre class="line-numbers language-react" data-language="react"><code class="language-react">// ColumnHiding.jsimport Checkbox from "./Checkbox"const ColumnHiding = () =&gt; {  const {    // 列信息数组    allColumns,    // 显示和隐藏所有列    getToggleHideAllColumnsProps  } = useTable()  return (    &lt;div&gt;      &lt;div&gt;        &lt;Checkbox {...getToggleHideAllColumnsProps()} /&gt; 显示/隐藏所有列      &lt;/div&gt;      {allColumns.map(column =&gt; (        &lt;div key={column.id}&gt;          &lt;Checkbox {...column.getToggleHiddenProps()} /&gt; {column.Header }        &lt;/div&gt;      ))}    &lt;/div&gt;  )}export default ColumnHiding<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="8-8-18-实现列固定"><a href="#8-8-18-实现列固定" class="headerlink" title="8.8.18 实现列固定"></a>8.8.18 实现列固定</h4><img src="../../../../Downloads/ReactTable/讲义/assets/react-table-images/02.gif"><p>创建样式化组件，为表格设置样式 <a href="https://github.com/GuillaumeJasmin/react-table-sticky#simple-example">simple-example</a></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// TableStyles.jsimport styled from "styled-components"export const Styles = styled.div`  .table {    border: 1px solid #ddd;    .tr {      :last-child {        .td {          border-bottom: 0;        }      }    }    .th,    .td {      padding: 5px;      border-bottom: 1px solid #ddd;      border-right: 1px solid #ddd;      background-color: #fff;      overflow: hidden;      :last-child {        border-right: 0;      }    }    &amp;.sticky {      overflow: scroll;      .header,      .footer {        position: sticky;        z-index: 1;        width: fit-content;      }      .header {        top: 0;        box-shadow: 0px 3px 3px #ccc;      }      .footer {        bottom: 0;        box-shadow: 0px -3px 3px #ccc;      }      .body {        position: relative;        z-index: 0;      }      [data-sticky-td] {        position: sticky;      }      [data-sticky-last-left-td] {        box-shadow: 2px 0px 3px #ccc;      }      [data-sticky-first-right-td] {        box-shadow: -2px 0px 3px #ccc;      }    }  }`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>创建 StickyTable 组件</p><p>先拷贝 BasicTable 组件，在此基础上进行修改。</p><p>在  <a href="https://github.com/GuillaumeJasmin/react-table-sticky">react-table-sticky</a> 此处拷贝 JSX 。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// StickyTable.js// useBlockLayout// 为 row, cell 添加固定宽度// 将 row 的 display 设置为 flex// 将 cell 的 display 设置为 inline-block// 将 cell 的 box-sizing 设置 border-boximport { useBlockLayout } from "react-table"import { useSticky } from "react-table-sticky"import { Styles } from "./TableStyles"const StickyTable = () =&gt; {  const {} = useTable({}, useBlockLayout, useSticky)  return (    &lt;Styles&gt;      &lt;div        {...getTableProps()}        className="table sticky"        style={{ width: 1000, height: 500 }}      &gt;        &lt;div className="header"&gt;          {headerGroups.map(headerGroup =&gt; (            &lt;div {...headerGroup.getHeaderGroupProps()} className="tr"&gt;              {headerGroup.headers.map(column =&gt; (                &lt;div {...column.getHeaderProps()} className="th"&gt;                  {column.render("Header")}                &lt;/div&gt;              ))}            &lt;/div&gt;          ))}        &lt;/div&gt;        &lt;div {...getTableBodyProps()} className="body"&gt;          {rows.map(row =&gt; {            prepareRow(row)            return (              &lt;div {...row.getRowProps()} className="tr"&gt;                {row.cells.map(cell =&gt; (                  &lt;div {...cell.getCellProps()} className="td"&gt;                    {cell.render("Cell")}                  &lt;/div&gt;                ))}              &lt;/div&gt;            )          })}        &lt;/div&gt;      &lt;/div&gt;    &lt;/Styles&gt;  )}export default StickyTable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>指定固定列，添加 Email，Age 列。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// columns.js</span><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">COLUMNS</span> <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    Header<span class="token operator">:</span> <span class="token string">"ID"</span><span class="token punctuation">,</span>    Footer<span class="token operator">:</span> <span class="token string">"ID"</span><span class="token punctuation">,</span>    accessor<span class="token operator">:</span> <span class="token string">"id"</span><span class="token punctuation">,</span>    disableFilters<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    sticky<span class="token operator">:</span> <span class="token string">"left"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    Header<span class="token operator">:</span> <span class="token string">"First Name"</span><span class="token punctuation">,</span>    Footer<span class="token operator">:</span> <span class="token string">"First Name"</span><span class="token punctuation">,</span>    accessor<span class="token operator">:</span> <span class="token string">"first_name"</span><span class="token punctuation">,</span>    sticky<span class="token operator">:</span> <span class="token string">"left"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    Header<span class="token operator">:</span> <span class="token string">"Last Name"</span><span class="token punctuation">,</span>    Footer<span class="token operator">:</span> <span class="token string">"Last Name"</span><span class="token punctuation">,</span>    accessor<span class="token operator">:</span> <span class="token string">"last_name"</span><span class="token punctuation">,</span>    sticky<span class="token operator">:</span> <span class="token string">"left"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    Header<span class="token operator">:</span> <span class="token string">"Date Of Birth"</span><span class="token punctuation">,</span>    Footer<span class="token operator">:</span> <span class="token string">"Date Of Birth"</span><span class="token punctuation">,</span>    accessor<span class="token operator">:</span> <span class="token string">"date_of_birth"</span><span class="token punctuation">,</span>    <span class="token function-variable function">Cell</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> value <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">dateformat</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    Header<span class="token operator">:</span> <span class="token string">"Country"</span><span class="token punctuation">,</span>    Footer<span class="token operator">:</span> <span class="token string">"Country"</span><span class="token punctuation">,</span>    accessor<span class="token operator">:</span> <span class="token string">"country"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    Header<span class="token operator">:</span> <span class="token string">"Phone"</span><span class="token punctuation">,</span>    Footer<span class="token operator">:</span> <span class="token string">"Phone"</span><span class="token punctuation">,</span>    accessor<span class="token operator">:</span> <span class="token string">"phone"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    Header<span class="token operator">:</span> <span class="token string">"Email"</span><span class="token punctuation">,</span>    Footer<span class="token operator">:</span> <span class="token string">"Email"</span><span class="token punctuation">,</span>    accessor<span class="token operator">:</span> <span class="token string">"email"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    Header<span class="token operator">:</span> <span class="token string">"Age"</span><span class="token punctuation">,</span>    Footer<span class="token operator">:</span> <span class="token string">"Age"</span><span class="token punctuation">,</span>    accessor<span class="token operator">:</span> <span class="token string">"age"</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="1-类组件"><a href="#1-类组件" class="headerlink" title="1. 类组件"></a>1. 类组件</h3><h4 id="1-1-创建类组件"><a href="#1-1-创建类组件" class="headerlink" title="1.1 创建类组件"></a>1.1 创建类组件</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">import React, { Component } from 'react';class Person extends Component {  render () {    return &lt;div&gt;Hello I am a class component&lt;/div&gt;  }}export default Person;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-2-向类组件内部传递属性"><a href="#1-2-向类组件内部传递属性" class="headerlink" title="1.2 向类组件内部传递属性"></a>1.2 向类组件内部传递属性</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;Person name="张三" age={20}/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">class Person extends Component {  render() {    const { name, age } = this.props    return (      &lt;div&gt;        &lt;span&gt;{name}&lt;/span&gt;        &lt;span&gt;{age}&lt;/span&gt;      &lt;/div&gt;    )  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-3-Props-默认值"><a href="#1-3-Props-默认值" class="headerlink" title="1.3 Props 默认值"></a>1.3 Props 默认值</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">class Person extends Component {  static defaultProps = {}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="1-4-组件状态"><a href="#1-4-组件状态" class="headerlink" title="1.4 组件状态"></a>1.4 组件状态</h4><pre class="line-numbers language-react" data-language="react"><code class="language-react">class Person extends Component {  constructor(){    super();    this.state = {      name: "张三",      age: 20    }    this.onClickHandler = this.onClickHandler.bind(this);  }   onClickHandler() {    this.setState({ ...this.state, name: "李四" });  }  render() {    return (      &lt;&gt;        &lt;span&gt;{this.state.name}&lt;/span&gt;        &lt;span&gt;{this.state.age}&lt;/span&gt;      &lt;button onClick={this.onClickHandler}&gt;更改数据&lt;/button&gt;      &lt;/&gt;    )  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-5-类组件生命周期函数"><a href="#1-5-类组件生命周期函数" class="headerlink" title="1.5 类组件生命周期函数"></a>1.5 类组件生命周期函数</h4><h5 id="1-5-1-概述"><a href="#1-5-1-概述" class="headerlink" title="1.5.1 概述"></a>1.5.1 概述</h5><p>生命周期如同四季更替，一个人的生、老、病、死，在每个特殊的年龄阶段，做着不同的事情。</p><p>组件也有生命周期，从组件被创建、被挂载到DOM中、直到从 DOM 中移除，这就是组件的生命周期。在组件生命周期的不同阶段，React 提供了对应的生命周期函数，让我们在不同阶段做不同的事情。这些函数将会被 React 自动调用执行。</p><p>生命周期大致分为三个部分：挂载、更新和卸载。</p><h5 id="1-5-2-组件挂载"><a href="#1-5-2-组件挂载" class="headerlink" title="1.5.2 组件挂载"></a>1.5.2 组件挂载</h5><p>当组件被创建并且被整体插入到 DOM 中叫做是挂载组件，在组件被创建和挂载的过程中以下方法被调用：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment">// 设置组件的初始配置</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>              <span class="token comment">// 解析 JSX, 渲染DOM, 呈递用户界面</span><span class="token function">componentDidMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 组件挂载完成后执行, 放置所有和DOM相关的操作，比如发送Ajax请求、设置定时器、添加事件监听、获取DOM元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="1-5-3-组件更新"><a href="#1-5-3-组件更新" class="headerlink" title="1.5.3 组件更新"></a>1.5.3 组件更新</h5><p>当组件状态发生变化时，组件重新渲染。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">shouldComponentUpdate</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">,</span> nextState<span class="token punctuation">)</span>rendercomponentDidUpdate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="1-5-3-组件卸载"><a href="#1-5-3-组件卸载" class="headerlink" title="1.5.3 组件卸载"></a>1.5.3 组件卸载</h5><p>组件卸载是指将组件从 DOM 中删除。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">componentWillUnmount   // 这个方法在组件从 DOM 中移除之前调用. 方法中可以执行清理工作. 例如删除事件监听, 清除定时器<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-6-上下文"><a href="#1-6-上下文" class="headerlink" title="1.6 上下文"></a>1.6 上下文</h4><ol><li><p>创建 Context 上下文对象, 导出 Provider 组件</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// TestContext.jsimport { createContext } from "react"export const TestContext = createContext()export function TestProvider({ children, value }) {  return &lt;TestContext.Provider value={value}&gt;{children}&lt;/TestContext.Provider&gt;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将状态存储到上下文对象中</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import ReactDOM from "react-dom"import App from "./App"import { TestProvider } from "./TestContext"ReactDOM.render(  &lt;TestProvider value={{ test: "test" }}&gt;    &lt;App /&gt;  &lt;/TestProvider&gt;,  document.getElementById("root"))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在组件中获取上下文对象中的状态</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { Component } from "react"import { TestContext } from "./TestContext"class App extends Component {  render() {    return (      &lt;div&gt;        &lt;TestContext.Consumer&gt;          {context =&gt; &lt;div&gt;{context.test}&lt;/div&gt;}        &lt;/TestContext.Consumer&gt;      &lt;/div&gt;    )  }}export default App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在组件中获取上下文的另一种方式</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">import { Component } from "react"import { TestContext } from "./TestContext"class App extends Component {  static contextType = TestContext  render() {    return &lt;div&gt;{this.context.test}&lt;/div&gt;  }}export default App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="1-7-错误边界"><a href="#1-7-错误边界" class="headerlink" title="1.7 错误边界"></a>1.7 错误边界</h4><p>默认情况下，组件渲染错误会导致整个应用程序中断，创建错误边界可确保在特定组件发生错误时应用程序不会中断。</p><p>错误边界是一个 React 组件，可以捕获子级组件在渲染时发生的错误，当错误发生时可以将错误记录下来，可以显示备用 UI 界面。</p><p>错误边界涉及到两个生命周期函数，分别为 getDerivedStateFromError 和 componentDidCatch。</p><p>getDerivedStateFromError 为静态方法，方法中需要返回一个对象，该对象会和state对象进行合并，用于更改应用程序状态。</p><p>componentDidCatch 方法用于记录应用程序错误信息，该方法的参数就是错误对象。 </p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// ErrorBoundaries.jsimport React from "react"import App from "./App"export default class ErrorBoundaries extends React.Component {  constructor() {    super()    this.state = {      hasError: false    }  }  componentDidCatch(error) {    console.log("componentDidCatch")  }  static getDerivedStateFromError() {    console.log("getDerivedStateFromError")    return {      hasError: true    }  }  render() {    if (this.state.hasError) {      return &lt;div&gt;发生了错误&lt;/div&gt;    }    return &lt;App /&gt;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// App.jsimport React from "react"export default class App extends React.Component {  render() {    // throw new Error("lalala")    return &lt;div&gt;App works&lt;/div&gt;  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// index.jsimport React from "react"import ReactDOM from "react-dom"import ErrorBoundaries from "./ErrorBoundaries"ReactDOM.render(&lt;ErrorBoundaries /&gt;, document.getElementById("root"))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-8-渲染属性"><a href="#1-8-渲染属性" class="headerlink" title="1.8 渲染属性"></a>1.8 渲染属性</h4><p>渲染属性是 React 中实现逻辑复用的一种高级技巧。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">// Resizeable.jsimport React, { useEffect, useState } from "react"function Resizeable({ render }) {  const [sizes, setSizes] = useState([window.innerWidth, window.innerHeight])  useEffect(() =&gt; {    window.addEventListener("resize", () =&gt; {      setSizes([window.innerWidth, window.innerHeight])    })  }, [])  return render(sizes)}export default Resizeable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// index.jsimport React from "react"import ReactDOM from "react-dom"import Resizeable from "Resizeable"import App from "./App"ReactDOM.render(  &lt;Resizeable render={sizes =&gt; &lt;App sizes={sizes} /&gt;} /&gt;,  document.getElementById("root"))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">// App.jsimport React from "react"function App({ sizes }) {  return &lt;div&gt;{JSON.stringify(sizes)}&lt;/div&gt;}export default App<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-9-高阶组件"><a href="#1-9-高阶组件" class="headerlink" title="1.9  高阶组件"></a>1.9  高阶组件</h4><p>高阶组件用于共享代码，增加逻辑复用。</p><p>高阶组件是一种模式，一个函数接收组件作为参数，返回一个新的组件。</p><p>函数名称通常以with开头，接收的组件形参名称为 WrappedComponent，返回的组件名称和函数名称一样，只不过with中的w要大写。</p><pre class="line-numbers language-react" data-language="react"><code class="language-react">function withResizable(WrappedComponent, number) {  class WithResizable extends Component {    constructor() {      this.state = {        size: [window.innerWidth, window.innerHeight],      };    }    onResize = () =&gt; {      this.setState({        size: [window.innerWidth * number, window.innerHeight],      });    };    componentDidMount() {      window.addEventListener("resize", this.onResize);    }    componentWillUnMount() {      window.removeEventListener("resize", this.onResize);    }    render() {      return &lt;WrappedComponent size={this.state.size} {...this.props} /&gt;;    }  }  return WithResizable;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">class Foo extends Component {  render () {    const size = this.props.size;    return &lt;div&gt;{size[0]} --- {size[1]}&lt;/div&gt;  }}const WrapperedFoo = withResizable(Foo, 10);export default WrapperedFoo;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;WrapperedFoo hello="world"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-配置路径别名"><a href="#2-配置路径别名" class="headerlink" title="2. 配置路径别名"></a>2. 配置路径别名</h3><ol><li><p>下载 <code>@craco/craco</code> 用于覆盖 <code>create-react-app</code> 脚手架工具自动生成的配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> @craco/craco<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在应用根目录下创建 <code>craco.config.js</code> 配置文件并加入路径别名配置</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  webpack<span class="token operator">:</span> <span class="token punctuation">{</span>    alias<span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token string">"@component"</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src/components/"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">"@layouts"</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src/components/layouts"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">"@pages"</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src/components/pages"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">"@shared"</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src/components/shared"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token string">"@state"</span><span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"src/state"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改 <code>package.json</code> 文件中的应用启动命令</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"craco start"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"craco build"</span><span class="token punctuation">,</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"craco test"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在应用根目录下创建 <code>jsconfig.json</code> 文件，加入路径别名的配置，该配置用于让编译器识别路径别名。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"paths"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"@component/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/components/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"@layouts/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/components/layouts/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"@pages/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/components/pages/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"@shared/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/components/shared/*"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"@state/*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"./src/state/*"</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>一般建议把不依赖props和state的函数提到你的组件外面，把那些仅被useEffect使用的函数放到useEffect里面。</p><p>如果在 useEffect 里面用到了组件内的函数或者通过 props 传递过来的函数，建议在创建函数的地方使用 useCallback 包裹函数并指定依赖项。</p><p>每次组件重新渲染，所有的东西都属于这次特定渲染，包括 props、state、事件处理函数、effect 等等。</p>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue3</title>
      <link href="/2021/11/05/vue3/"/>
      <url>/2021/11/05/vue3/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h1><h2 id="1-为什么学习-Vue3"><a href="#1-为什么学习-Vue3" class="headerlink" title="1. 为什么学习 Vue3"></a>1. 为什么学习 Vue3</h2><blockquote><p>目标: 了解学习 Vue3 的必要性。</p></blockquote><ul><li><p>Vue3 运行性能大幅提升，速度是 Vue2 的 1.5 倍左右</p></li><li><p>Vue3 支持 tree shaking，可以进行按需编译，编译后的文件体积比 Vue2 更小</p></li><li><p>Vue3 组合式 API 使应用中的功能代码更聚合，使组件间公共逻辑的抽取更容易</p></li><li><p>Vue3 对 TypeScript 的支持更加友好，对大型前端应用的支持更加游刃有余</p></li><li><p>Vue3 中提供了更加先进的功能，比如 teleport，suspense 等</p></li><li><p>Vue 是目前国内前端使用者最多的框架，Vue3 是将来的必然趋势</p></li></ul><img src="/medias/images/04.png" width="40%" align="left"><p><a href="https://v3.cn.vuejs.org/">Vue3 官方中文文档</a></p><h2 id="2-使用-Vite-创建项目"><a href="#2-使用-Vite-创建项目" class="headerlink" title="2. 使用 Vite 创建项目"></a>2. 使用 Vite 创建项目</h2><blockquote><p>目标: 能够使用 vite 构建工具创建 Vue 应用。<a href="https://cn.vitejs.dev/">Vite官方</a></p></blockquote><p>Vite 是一款新型的前端构建工具，核心卖点就是快，启用速度快，编译速度快。</p><ol><li>创建应用：<code>npm init vite-app vue-tutorial</code> 或者 <code>npx create-vite-app vue-tutorial</code></li><li>切换至应用根目录：<code>cd vue-tutorial</code></li><li>下载应用依赖：<code>npm install</code></li><li>启动应用：<code>npm run dev</code></li><li>访问应用：<code>localhost:3000</code></li></ol><img src="/medias/images/05.png" width="35%" align="left"><p>Vite 虽然构建速度非常快，但目前它默认安装的插件非常少，随着开发过程依赖增多，需要自己额外配置，所以做项目时仍然使用vue-cli</p><h2 id="3-安装编辑器插件"><a href="#3-安装编辑器插件" class="headerlink" title="3. 安装编辑器插件"></a>3. 安装编辑器插件</h2><blockquote><p>目标：安装 VSCode 编辑器插件</p></blockquote><ol><li><a href="https://marketplace.visualstudio.com/items?itemName=johnsoncodehk.volar">Volar</a>: Vue3 语法支持</li><li><a href="https://marketplace.visualstudio.com/items?itemName=ishiyama.vue-autoimport">Vue.js AutoImport</a>: 引用组件</li><li><a href="https://marketplace.visualstudio.com/items?itemName=hollowtree.vue-snippets">Vue3 Snippets</a>: Vue3 代码片段 </li><li><a href="https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode">Prettier-Code formatter</a>: 代码格式化</li><li><a href="https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint">ESLint</a>: 代码质量检查</li><li><a href="https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig">EditorConfig for VS Code</a>: 覆盖编辑器编码风格配置</li><li><a href="https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme">Material Icon Theme</a>: 编辑器主题</li><li><a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans">Chinese (Simplified) Language Pack for Visual Studio Code</a>: 中文语言支持</li></ol><h2 id="4-组合式-API-的优势"><a href="#4-组合式-API-的优势" class="headerlink" title="4. 组合式 API 的优势"></a>4. 组合式 API 的优势</h2><blockquote><p>目标：掌握组合式 API 相比较选项式 API，它的优势是什么。</p></blockquote><p>在选项式API中，它将数据和逻辑进行了分离，所有不相关的数据被放置在了一起，所以不相关的逻辑被放置在了一起，随着应用规模的增加，项目将会变得越来越难以维护。</p><img src="/medias/images/01.gif" width="40%" align="left"><p>在组合式 API 中，它将同一个功能的逻辑和数据放置在了一起，使同一个的功能代码更加聚合。</p><img src="/medias/images/02.gif" width="50%" align="left"><p>同一个功能的代码可以被抽取到单独的文件中，使应用代码更加维护。</p><img src="/medias/images/03.gif" align="left" width="50%"><h2 id="5-组合式-API-入口"><a href="#5-组合式-API-入口" class="headerlink" title="5. 组合式 API 入口"></a>5. 组合式 API 入口</h2><blockquote><p>目标：掌握 setup 函数的基本使用。</p></blockquote><hr><ul><li><input disabled="" type="checkbox"> 讲解 setup 函数的执行时机以及 this 指向</li><li><input disabled="" type="checkbox"> 讲解 setup 函数的返回值</li><li><input disabled="" type="checkbox"> 讲解 setup 函数如何使用</li></ul><hr><p><code>setup</code> 函数是一个新的组件选项，作为在组件中使用组合式 API 的入口</p><p><code>setup</code> 函数在任何生命周期函数之前执行，且函数内部 <code>this</code> 为 <code>undefined</code>，它不绑定组件实例对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// 1. undefined</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"before create"</span><span class="token punctuation">)</span> <span class="token comment">// 2. before create</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>setup</code> 函数的返回值为对象类型，对象中的属性可以在其他选项和模板中使用, 因为对象中的属性会被添加到组件实例对象中</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"张三"</span>    <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">20</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>{{ name }} | {{ age }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：在 setup 方法中声明的变量虽然可以在模板中显示，但它不是响应式数据，就是说当数据更改后界面不会发生变化。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"张三"</span>    <span class="token keyword">let</span> age <span class="token operator">=</span> <span class="token number">20</span>    <span class="token keyword">const</span> <span class="token function-variable function">onClickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      name <span class="token operator">=</span> <span class="token string">"李四"</span>      age <span class="token operator">=</span> <span class="token number">30</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> onClickHandler <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  {{ name }} | {{ age }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickHandler<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-响应式组件状态-ref"><a href="#6-响应式组件状态-ref" class="headerlink" title="6. 响应式组件状态 ref"></a>6. 响应式组件状态 ref</h2><blockquote><p>目标：掌握使用 ref 方法创建、修改响应式数据的方式。</p></blockquote><hr><ul><li><input disabled="" type="checkbox"> 讲解 ref 函数的作用是什么</li><li><input disabled="" type="checkbox"> 讲解如何使用 ref 方法创建、修改基本数据类型的响应式数据</li><li><input disabled="" type="checkbox"> 讲解如何使用 ref 方法创建、修改引用数据类型的响应式数据</li></ul><hr><p>ref 函数用于创建响应式数据，即数据变化视图更新。</p><hr><p>使用 ref 函数创建基本数据类型的响应式数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 ref 创建的数据在模板中可以直接使用。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>{{ name }} | {{ age }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 JavaScript 中通过 value 属性修改数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">onClickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      name<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"李四"</span>      age<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token number">30</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> onClickHandler <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  {{ name }} | {{ age }} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickHandler<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>使用 ref 函数创建引用数据类型的响应式数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">onClickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      person<span class="token punctuation">.</span>value<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"王五"</span>      person<span class="token punctuation">.</span>value<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">50</span>      <span class="token comment">// 重新为 person 赋值也是可以的</span>      <span class="token comment">// person.value = {name: '李四', age: 40}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> person<span class="token punctuation">,</span> onClickHandler <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  {{ person.name }} | {{ person.age }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickHandler<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-响应式组件状态-reactive"><a href="#7-响应式组件状态-reactive" class="headerlink" title="7. 响应式组件状态 reactive"></a>7. 响应式组件状态 reactive</h2><blockquote><p>目标: 掌握使用 reactive 函数创建响应式数据的方式, 掌握 reactive 函数和 ref 函数的区别</p></blockquote><hr><ul><li><input disabled="" type="checkbox"> 讲解 reactive 函数的作用</li><li><input disabled="" type="checkbox"> 讲解如何使用 reactive 函数创建基于引用数据类型的响应式数据</li><li><input disabled="" type="checkbox"> 讲解 reactive 函数在使用时的注意事项</li><li><input disabled="" type="checkbox"> 对比 ref 方法和 reactive 方法在使用上的不同</li></ul><hr><p>reactive 函数也可以用来创建响应式数据。</p><hr><p>使用 reactive 函数创建基于引用数据类型的响应式数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">onClickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李四"</span>      person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">50</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> person<span class="token punctuation">,</span> onClickHandler <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  {{ person.name }} | {{ person.age }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickHandler<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>reactive 函数只能基于引用数据类型创建响应式数据，对于基本数据类型它是不起作用的。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">onClickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token comment">// name = "李四"</span>      <span class="token comment">// name.value = "李四"</span>      name <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> onClickHandler <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需求: 在点击按钮后将 <code>newPerson</code> 中的值赋值给 <code>person</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">'张三'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> newPerson <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token operator">:</span> <span class="token string">'李四'</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">}</span>    <span class="token keyword">const</span> <span class="token function-variable function">onClickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> attr <span class="token keyword">in</span> newPerson<span class="token punctuation">)</span> <span class="token punctuation">{</span>        person<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> newPerson<span class="token punctuation">[</span>attr<span class="token punctuation">]</span>      <span class="token punctuation">}</span>      <span class="token comment">// Object.assign(person, newPerson);</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>person<span class="token punctuation">,</span> onClickHandler<span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>ref 既可以创建基于基本数据类型的响应式数据也可以创建基于引用数据类型的响应式数据，reactive 只用于创建基于引用数据类型的响应式数据</p><p>ref 在 JS 中使用时需要点上 value, 而 reactive 在 JS 中使用时不需要点上 value，在模板中使用时都不需要加 value</p><p>ref 创建的响应式数据可以被直接整体赋值，而 reactive 创建的响应式数据不可以，若要整体赋值需要使用遍历的方式</p><hr><p>为什么使用 ref 方法创建的响应式数据在修改时需要使用 value 属性，而使用 reactive 方法创建的响应式数据不需要? </p><p>ref 既可以创建基于基本数据类型的响应式数据, 也可以创建基于引用数据类型的响应式数据, 基本数据类型的响应式是通过类的属性访问器实现的, 引用数据类型的响应式是通过代理对象实现的, 虽然内部实现不同, 但是为了更好的API使用体验, 内部封装了统一的调用入口, 即 value 属性, 具体通过哪种方式创建响应式数据由内部统一处理.</p><p>reactive 只用于创建基于引用数据类型的响应式数据, 不需要供统一的调用入口, 所以没有必要使用 value 属性.</p><h2 id="8-计算属性-computed"><a href="#8-计算属性-computed" class="headerlink" title="8. 计算属性 computed"></a>8. 计算属性 computed</h2><blockquote><p>目标：掌握使用 computed 函数创建计算属性的方式</p></blockquote><hr><ul><li><input disabled="" type="checkbox"> 说明 computed 方法的作用及使用方式</li><li><input disabled="" type="checkbox"> 通过名字搜索案例学习 computed 方法的使用</li></ul><hr><p>接收回调函数作为参数，基于回调函数中使用的响应式数据进行计算属性的创建. 回调函数的返回值就是计算结果.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> computed <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token string">"林俊杰"</span><span class="token punctuation">,</span>      <span class="token string">"孙燕姿"</span><span class="token punctuation">,</span>      <span class="token string">"周杰伦"</span><span class="token punctuation">,</span>      <span class="token string">"张惠妹"</span><span class="token punctuation">,</span>      <span class="token string">"刘若英"</span><span class="token punctuation">,</span>      <span class="token string">"林宥嘉"</span><span class="token punctuation">,</span>      <span class="token string">"刘德华"</span><span class="token punctuation">,</span>      <span class="token string">"张韶涵"</span><span class="token punctuation">,</span>      <span class="token string">"周笔畅"</span><span class="token punctuation">,</span>      <span class="token string">"孙楠"</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> search <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> filterNames <span class="token operator">=</span> <span class="token function">computed</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>      names<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">name</span> <span class="token operator">=&gt;</span> name<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>search<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> search<span class="token punctuation">,</span> filterNames <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>search<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>name in filterNames<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-监听状态-watch"><a href="#9-监听状态-watch" class="headerlink" title="9. 监听状态 watch"></a>9. 监听状态 watch</h2><blockquote><p>目标：掌握 watch 函数监听数据的方式</p></blockquote><hr><ul><li><input disabled="" type="checkbox"> 说明 watch 函数的作用是什么</li><li><input disabled="" type="checkbox"> 如何使用 watch 函数监听基于 ref 创建的响应式数据 (基本数据类型、引用数据类型)</li><li><input disabled="" type="checkbox"> 如何使用 watch 监听响应式数据内部的具体属性 (基本数据类型、引用数据类型)</li><li><input disabled="" type="checkbox"> 如何使用 watch 监听多个值的变化</li><li><input disabled="" type="checkbox"> 说明 watch 方法中的 immediate 配置选项的作用 </li></ul><hr><p>watch 函数用于监听响应式数据的变化。</p><hr><p>使用 watch 函数监听基于 ref 创建的响应式数据 (基本数据类型)。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token function">watch</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> previous</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"current"</span><span class="token punctuation">,</span> current<span class="token punctuation">)</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"previous"</span><span class="token punctuation">,</span> previous<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> text <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 watch 监听基于 ref 创建的响应式数据 (引用数据类型)。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"张三"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">watch</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>value<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;button @click="onClickHandler"&gt;{{ person.name }}&lt;/button&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用 watch 监听响应式数据内部的具体属性 (基本数据类型)</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"张三"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">watch</span><span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> person<span class="token punctuation">.</span>value<span class="token punctuation">.</span>name<span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token parameter">current</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> person <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>使用 watch 监听响应式数据内部的具体属性 (引用数据类型)</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;p&gt;{{ person.brand.title }} {{ person.name }}&lt;/p&gt;  &lt;button @click="changeBrandTitle"&gt;title&lt;/button&gt;  &lt;button @click="changeName"&gt;name&lt;/button&gt;&lt;/template&gt;&lt;script&gt;import { ref, watch } from "vue";export default {  name: "App",  setup() {    const person = ref({ brand: { title: "宝马" }, name: "张三" });    const changeBrandTitle = () =&gt; {      person.value.brand.title = "奔驰";    };    const changeName = () =&gt; {      person.value.name = "李四";    };    watch(person.value.brand, (current) =&gt; {      console.log(current);    });    return { person, changeBrandTitle, changeName };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用 watch 监听基于 reactive 创建的响应式数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"张三"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">onClickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李四"</span>    <span class="token punctuation">}</span>    <span class="token function">watch</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">current<span class="token punctuation">,</span> previous</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> person<span class="token punctuation">,</span> onClickHandler <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  {{ person.name }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickHandler<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><hr><p>使用 watch 监听多个值的变化</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token function">watch</span><span class="token punctuation">(</span><span class="token punctuation">[</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token parameter">current</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstName<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>使 watch 监听数据在初始时执行一次</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span>    <span class="token function">watch</span><span class="token punctuation">(</span>      <span class="token punctuation">[</span>firstName<span class="token punctuation">,</span> lastName<span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token parameter">current</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        immediate<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-监听状态-watchEffect"><a href="#10-监听状态-watchEffect" class="headerlink" title="10. 监听状态 watchEffect"></a>10. 监听状态 watchEffect</h2><blockquote><p>目标：掌握使用 watchEffect 监听数据的方式</p></blockquote><hr><ul><li><input disabled="" type="checkbox"> 说明 watchEffect 方法的作用</li><li><input disabled="" type="checkbox"> 说明 watchEffect 方法的使用方式</li></ul><hr><p>watchEffect 和 watch 一样，都是用于监听响应式数据的变化。</p><hr><p>watchEffect 只关心数据的最新值，不关心旧值是什么，而且 watchEffect 默认会在初始时执行一次。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> watchEffect <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> firstName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> lastName <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">watchEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>firstName<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>lastName<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>firstName<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-toRef-函数"><a href="#11-toRef-函数" class="headerlink" title="11. toRef 函数"></a>11. toRef 函数</h2><blockquote><p>目标：掌握 toRef 函数的使用方式及应用场景</p></blockquote><hr><ul><li><input disabled="" type="checkbox"> 通过一段基础的 JavaScript 代码回顾基本数据类型的在赋值时的值传递特性, 为讲解 toRef 方法做铺垫</li><li><input disabled="" type="checkbox"> 通过一段基础的 Vue 代码了解在不使用 toRef 方法时存在的问题</li><li><input disabled="" type="checkbox"> 说明 toRef 方法的作用并使用 toRef 方法解决问题</li><li><input disabled="" type="checkbox"> 说明 toRef 方法的应用场景</li></ul><hr><p>说出以下代码的输出结果是什么?</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"张三"</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> name <span class="token operator">=</span> person<span class="token punctuation">.</span>name<span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "李四"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>当按钮被点击时模板中的数据会发生更新吗?</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;p&gt;{{ name }}&lt;/p&gt;  &lt;p&gt;{{ person }}&lt;/p&gt;  &lt;button @click="onClickHandler"&gt;button&lt;/button&gt;&lt;/template&gt;&lt;script&gt;import { ref } from "vue";export default {  name: "App",  setup() {    const person = ref({ name: "张三" });    const onClickHandler = () =&gt; {      person.value.name = "李四";    };    return {      name: person.value.name,      person,      onClickHandler,    };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>toRef 方法用于将响应式数据内部的普通数据转换为响应式数据，并且转换后的数据和原始数据存在引用关系，存在引用关系意味着当原始数据发生变化后，toRef 转换后的数据也会跟着变化。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;p&gt;{{ name }}&lt;/p&gt;  &lt;p&gt;{{ person }}&lt;/p&gt;  &lt;button @click="onClickHandler"&gt;button&lt;/button&gt;&lt;/template&gt;&lt;script&gt;import { ref, toRef } from "vue";export default {  name: "App",  setup() {    const person = ref({ name: "张三" });    const onClickHandler = () =&gt; {      person.value.name = "李四";    };    return {      name: toRef(person.value, "name"),      person,      onClickHandler,    };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>需求: 当响应式数据的结构层级比较深时，在模板中使用起来也比较繁琐，能不能在模板中使用时简化结构层级呢？</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">{</span> brand<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"宝马"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> person <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>{{ person.brand.name }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果能够将模板中的 <code>person.brand.name</code> 简化成 <code>brandName</code> 的话，模板代码会更加简洁，所以按照想法代码很自然的就写成了下面这样。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;p&gt;{{ person }}&lt;/p&gt;  &lt;p&gt;{{ brandName }}&lt;/p&gt;  &lt;button @click="onClickHandler"&gt;button&lt;/button&gt;&lt;/template&gt;&lt;script&gt;import { ref } from "vue";export default {  name: "App",  setup() {    const person = ref({ brand: { name: "宝马" } });    const onClickHandler = () =&gt; {      person.value.brand.name = "奔驰";    };    return {      person,      brandName: person.value.brand.name,      onClickHandler,    };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;p&gt;{{ person }}&lt;/p&gt;  &lt;p&gt;{{ brandName }}&lt;/p&gt;  &lt;button @click="onClickHandler"&gt;button&lt;/button&gt;&lt;/template&gt;&lt;script&gt;import { ref, toRef } from "vue";export default {  name: "App",  setup() {    const person = ref({ brand: { name: "宝马" } });    const onClickHandler = () =&gt; {      person.value.brand.name = "奔驰";    };    return {      person,      brandName: toRef(person.value.brand, "name"),      onClickHandler,    };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-toRefs-函数"><a href="#12-toRefs-函数" class="headerlink" title="12. toRefs 函数"></a>12. toRefs 函数</h2><blockquote><p>目标：掌握 toRefs 方法批量转换响应式数据的方式。</p></blockquote><hr><ul><li><input disabled="" type="checkbox"> 说明 toRefs 方法的作用是什么以及基本用法</li><li><input disabled="" type="checkbox"> 通过例子验证 toRefs 方法的使用方式</li></ul><hr><p>通过 <code>toRef</code> 方法一次只能转换一个数据，通过 <code>toRefs</code> 方法可以实现批量数据转换。</p><p>toRefs 方法接收引用数据类型的响应式数据，它可以将数据中的第一层属性全部转换为响应式数据, 返回值是一个对象, 对象中存储了所有转换之后的响应式数据。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> toRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name<span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>      brand<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">"宝马"</span><span class="token punctuation">,</span> year<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;{{ name }} {{ age }} {{ brand.title }} {{ brand.year }}&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对引用数据类型内部的数据进行转换</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> reactive<span class="token punctuation">,</span> toRefs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name<span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>      age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>      brand<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">"宝马"</span><span class="token punctuation">,</span> year<span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">toRefs</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>brand<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;{{ name }} {{ age }} {{ title }} {{ year }}&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="13-组件通讯"><a href="#13-组件通讯" class="headerlink" title="13. 组件通讯"></a>13. 组件通讯</h2><blockquote><p>目标：掌握组合式 API 中父子组件通信的方式</p></blockquote><hr><ul><li><input disabled="" type="checkbox"> 讲解父组件如何向子组件传递数据</li><li><input disabled="" type="checkbox"> 讲解子组件如何更改父组件传递过来的数据</li></ul><hr><p>父组件通过 props 向子组件传递数据</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>I am parent component<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComp</span> <span class="token attr-name">:msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ChildComp</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> ChildComp <span class="token keyword">from</span> <span class="token string">"./components/ChildComp.vue"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span> ChildComp <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"a message from parent"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> msg <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    {{ childMsg }}    &lt;hr /&gt;    {{ msg }}  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { computed } from "vue";export default {  name: "ChildComponent",  props: ["msg"],  setup(props) {    // 当父组件更新 props 时 setup 函数是不会重新执行的    // 所以在 setup 函数中使用 props 时需要用到 computed 或者 watch 来响应 props 的变化    // 注意: 直接在模板中使用 props 数据是没有这个问题的    const childMsg = computed(() =&gt; props.msg + "😀😀");    return { childMsg };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子组件通过自定义事件向父组件传递数据</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;&lt;div&gt;    {{ childMsg }}    &lt;hr /&gt;    {{ msg }}    &lt;hr /&gt;    &lt;button @click="onMsgChanged"&gt;change msg&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import { computed } from "vue";export default {  name: "ChildComponent",  props: ["msg"],  setup(props, { emit }) {    const onMsgChanged = () =&gt; {      emit("onMsgChanged", "changed msg from children");    };    return { onMsgChanged };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ChildComponent</span> <span class="token attr-name">:msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>msg<span class="token punctuation">"</span></span> <span class="token attr-name">@onMsgChanged</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onMsgChanged<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> ChildComponent <span class="token keyword">from</span> <span class="token string">"./components/child-component.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span> ChildComponent <span class="token punctuation">}</span><span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token string">"i am a message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">onMsgChanged</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      msg<span class="token punctuation">.</span>value <span class="token operator">=</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> msg<span class="token punctuation">,</span> onMsgChanged <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意事项：在 Vue2 中，模板需要被一个根元素包裹，但是在 Vue3 中是不需要的，Vue3 支持在模板中编写代码片段。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;{{ childMsg }}&lt;/div&gt;  &lt;button @click="onClickHandler"&gt;change msg&lt;/button&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果在模板中使用代码片段, 自定义事件需要被显式的声明在 emits 选项中.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">emits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"onMsgChanged"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="14-组件生命周期"><a href="#14-组件生命周期" class="headerlink" title="14. 组件生命周期"></a>14. 组件生命周期</h2><blockquote><p>目标：掌握组件生命周期函数的使用方式  <a href="https://v3.cn.vuejs.org/guide/composition-api-lifecycle-hooks.html">VUE3 生命周期函数</a></p></blockquote><hr><ul><li><input disabled="" type="checkbox"> 说明 setup 函数的执行时机</li><li><input disabled="" type="checkbox"> 说明 onMounted、onUpdated、onUnmounted 组件生命周期函数的执行时机</li></ul><hr><p><code>setup</code>: Vue3 中组合式 API 的入口, 它会在创建组件实例对象前执行, 会在每次组件重新挂载时执行。</p><p>创建组件实例对象前执行 </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'setup'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"before create"</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>每次组件重新挂载时执行</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- App组件 父组件  --&gt;&lt;template&gt;  &lt;button @click="show = !show"&gt;toggle&lt;/button&gt;  &lt;ChildComponent v-if="show"&gt;&lt;/ChildComponent&gt;&lt;/template&gt;&lt;script&gt;import { ref } from "vue";import ChildComponent from "./components/child-component.vue";export default {  components: { ChildComponent },  name: "App",  setup() {    const show = ref(true);    return { show };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- ChildComponent 组件 子组件 --&gt;&lt;template&gt;child component&lt;/template&gt;&lt;script&gt;export default {  name: "ChildComponent",  setup() {    // setup 函数会在组件每次重新渲染时执行    console.log("setup");  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>onMounted</code> 组件挂载完成后执行</p><p><code>onUpdated</code> 组件数据更新后执行</p><p><code>onUnmounted</code> 组件卸载后执行</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- child-component  --&gt;&lt;template&gt;{{ count }} &lt;button @click="onClickHandler"&gt;button&lt;/button&gt;&lt;/template&gt;&lt;script&gt;import { onMounted, onUnmounted, onUpdated, ref } from "vue";export default {  name: "ChildComponent",  setup() {    let timer = null;    // 组件挂载完成之后开启定时器    onMounted(() =&gt; {      timer = setInterval(() =&gt; {        console.log("timer...");      }, 1000);    });    // 组件卸载完成之后清除定时器    onUnmounted(() =&gt; {      clearInterval(timer);    });    const count = ref(0);    const onClickHandler = () =&gt; {      count.value = count.value + 1;    };    // 组件更新之后在控制台中输出 onUpdated    onUpdated(() =&gt; {      console.log("onUpdated");    });    return { count, onClickHandler };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-与服务端通信"><a href="#15-与服务端通信" class="headerlink" title="15. 与服务端通信"></a>15. 与服务端通信</h2><blockquote><p>目标：掌握在组合式 API 中实现与服务器端通讯的方式</p></blockquote><hr><ul><li><input disabled="" type="checkbox"> 通过例子说明如何在组合式 API 中实现与服务器端通讯的方式</li><li><input disabled="" type="checkbox"> 讲解抽取可重用逻辑的方式, 充分发挥组合式API的优势</li></ul><hr><p>向服务器端发送请求获取列表数据渲染列表数据, 没有数据要显示暂无数据, 如果请求报错展示错误信息, 加载过程显示loading.</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;import { ref } from "vue";import axios from "axios";  export default {  name: "App",  setup() {    // 用于存储列表数据    const data = ref(null);    // 用于标识加载状态    const loading = ref(false);    // 用于存储错误信息    const error = ref(null);    // 用于发送请求的方法    async function getPosts() {      // 更新加载状态      loading.value = true;      try {        // 发送请求        let response = await axios.get(          "https://jsonplaceholder.typicode.com/posts"        );        // 存储列表数据        data.value = response.data;      } catch (err) {        // 存储错误信息        error.value = err.message;      }      // 更新加载状态      loading.value = false;    }    // 调用方法 发送请求    getPosts();    // 返回模板所需数据    return { data, loading, error };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>loading<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>loading...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>error<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ error }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>data &amp;&amp; data.length &gt; 0<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in data<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>{{ item.title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-else</span><span class="token punctuation">&gt;</span></span>暂无数据<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意: 如果在导入 axios 时报错，重新启动应用程序即可。</p><p>将获取 Posts 数据的逻辑抽取单独文件中，使其可以在多个组件中被重复使用。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> error<span class="token punctuation">,</span> getPosts <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">usePosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> error <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">usePosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> error <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> response <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>        <span class="token string">"https://jsonplaceholder.typicode.com/posts"</span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>      data<span class="token punctuation">.</span>value <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      error<span class="token punctuation">.</span>value <span class="token operator">=</span> err<span class="token punctuation">.</span>message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    loading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span> data<span class="token punctuation">,</span> loading<span class="token punctuation">,</span> error<span class="token punctuation">,</span> getPosts <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-获取-DOM-对象"><a href="#16-获取-DOM-对象" class="headerlink" title="16. 获取 DOM 对象"></a>16. 获取 DOM 对象</h2><blockquote><p>目标：掌握在组合式 API 中获取 DOM 对象的方式</p></blockquote><hr><ul><li><input disabled="" type="checkbox"> 说明如何使用 ref 获取单个 DOM 对象</li><li><input disabled="" type="checkbox"> 说明如何使用 ref 获取一组 DOM 对象</li></ul><hr><p>获取单个 DOM 对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> divRef <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>divRef<span class="token punctuation">.</span>value<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> divRef <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>divRef<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Hello Ref<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>获取一组 DOM 对象</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> ref<span class="token punctuation">,</span> onMounted<span class="token punctuation">,</span> onUpdated <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> elms <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> <span class="token function-variable function">onClickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> list<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">"d"</span><span class="token punctuation">)</span>    <span class="token function">onMounted</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elms<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">onUpdated</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>elms<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> list<span class="token punctuation">,</span> elms<span class="token punctuation">,</span> onClickHandler <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(item, index) in list<span class="token punctuation">"</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index<span class="token punctuation">"</span></span> <span class="token attr-name">:ref</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>(el) =&gt; (elms[index] = el)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>      {{ item }}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickHandler<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="17-provide、inject-函数"><a href="#17-provide、inject-函数" class="headerlink" title="17. provide、inject 函数"></a>17. provide、inject 函数</h2><blockquote><p>目标：掌握跨组件层级传递数据的方式</p></blockquote><p>通过 provide、inject 函数的配合使用，可以实现跨组件传递数据（组件与组件存在嵌套关系）</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- 父组件 App --&gt;&lt;template&gt;  &lt;ChildComponent /&gt;&lt;/template&gt;&lt;script&gt;import { ref, provide } from "vue";import ChildComponent from "./components/ChildComponent.vue";export default {  components: { ChildComponent },  name: "App",  setup() {    const person = ref({ name: "张三" });    const changePerson = () =&gt; {      person.value.name = "李四";    };    provide("person", person);    provide("changePerson", changePerson);  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 子组件 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LastComponent</span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> LastComponent <span class="token keyword">from</span> <span class="token string">"./LastComponent.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span> LastComponent <span class="token punctuation">}</span><span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token string">"ChildComponent"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- 孙组件 --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  {{ person.name }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>changePerson<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> inject <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"LastComponent"</span><span class="token punctuation">,</span>  <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">"person"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> changePerson <span class="token operator">=</span> <span class="token function">inject</span><span class="token punctuation">(</span><span class="token string">"changePerson"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> person<span class="token punctuation">,</span> changePerson <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="18-teleport-组件"><a href="#18-teleport-组件" class="headerlink" title="18. teleport 组件"></a>18. teleport 组件</h2><blockquote><p>目标：掌握 teleport 组件的使用方式</p></blockquote><hr><ul><li><input disabled="" type="checkbox"> 说明 teleport 组件的作用</li><li><input disabled="" type="checkbox"> 通过案例验证 teleport 组件的用法</li></ul><hr><p>teleport 组件可以将指定组件渲染到应用外部的其他位置。</p><p>比如弹框组件，它可能在任意组件中使用，但它不属于任意组件，所以不能在使用它的组件中渲染它，我们需要将它渲染到指定位置。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- Modal.vue --&gt;&lt;template&gt;  &lt;div class="wrapper"&gt;    &lt;div class="content"&gt;      &lt;a class="close" href="javascript:"&gt;关闭&lt;/a&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "Modal",};&lt;/script&gt;&lt;style scoped&gt;.wrapper {  position: absolute;  left: 0;  top: 0;  right: 0;  bottom: 0;  background: rgba(0, 0, 0, 0.4);}.content {  width: 660px;  height: 400px;  background: white;  position: absolute;  left: 50%;  top: 50%;  transform: translate(-50%, -50%);}.close {  position: absolute;  right: 10px;  top: 10px;  color: #999;  text-decoration: none;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- App.vue --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>teleport</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#modal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Modal</span> <span class="token punctuation">/&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>teleport</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> Modal <span class="token keyword">from</span> <span class="token string">"./components/Modal.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span> Modal <span class="token punctuation">}</span><span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- index.html --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>modal<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="19-Suspense-组件"><a href="#19-Suspense-组件" class="headerlink" title="19. Suspense 组件"></a>19. Suspense 组件</h2><blockquote><p>目标：掌握 Suspense 组件的使用方式</p></blockquote><hr><ul><li><input disabled="" type="checkbox"> 说明 suspense 组件的作用及使用场景</li><li><input disabled="" type="checkbox"> 通过代码验证 suspense 组件的使用方式</li></ul><hr><p>Suspense 用于确保组件中的 setup 函数调用和模板渲染之间的执行顺序。先执行 setup 后渲染模板。</p><p>当组件中的 setup 被写成异步函数的形式, 代码执行的顺序就变成了先渲染模板后执行 setup 函数了。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- Posts.vue --&gt;&lt;template&gt;  &lt;pre&gt;{{ data }}&lt;/pre&gt;&lt;/template&gt;&lt;script&gt;import axios from "axios";export default {  name: "Posts",  async setup() {    let response = await axios.get(      "https://jsonplaceholder.typicode.com/posts"    );    return { data: response.data };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;!-- App.vue --&gt;&lt;template&gt;  &lt;Suspense&gt;    &lt;Posts /&gt;  &lt;/Suspense&gt;&lt;/template&gt;&lt;script&gt;import Posts from "./components/Posts.vue";export default {  components: { Posts },  name: "App",};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过 suspense 组件还可以为异步操作添加等待提示效果。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!-- App.vue --&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Suspense</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>default</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Posts</span> <span class="token punctuation">/&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name"><span class="token namespace">v-slot:</span>fallback</span><span class="token punctuation">&gt;</span></span> loading... <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Suspense</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> Posts <span class="token keyword">from</span> <span class="token string">"./components/Posts.vue"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  components<span class="token operator">:</span> <span class="token punctuation">{</span> Posts <span class="token punctuation">}</span><span class="token punctuation">,</span>  name<span class="token operator">:</span> <span class="token string">"App"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="20-过渡动画"><a href="#20-过渡动画" class="headerlink" title="20. 过渡动画"></a>20. 过渡动画</h2><blockquote><p>目标：掌握 transition 组件的使用方式</p></blockquote><h3 id="20-1-概述"><a href="#20-1-概述" class="headerlink" title="20.1 概述"></a>20.1 概述</h3><p>Vue 提供了 transition 组件供我们执行过渡动画, 我们只需要使用 transition 组件包裹你要执行动画的元素即可。</p><p>执行过渡动画的前提条件是元素具有创建与销毁的操作。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;transition&gt;  &lt;h1&gt;hello world&lt;/h1&gt;&lt;/transition&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当创建元素时, transiton 组件会为执行动画的元素添加三个类名, 我们可以通过这三个类名为元素添加入场动画。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.enter-from</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token selector">// 元素执行动画的初始样式 (动画起点样式).enter-to</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token selector">// 元素执行动画的目标样式 (动画终点样式).enter-active</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  // 可以用于指定元素指定动画的类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.enter-from</span> <span class="token punctuation">{</span> <span class="token property">opacity</span><span class="token punctuation">:</span> 0 <span class="token punctuation">}</span><span class="token selector">.enter-to</span> <span class="token punctuation">{</span> <span class="token property">opacity</span><span class="token punctuation">:</span> 1 <span class="token punctuation">}</span><span class="token selector">.enter-active</span> <span class="token punctuation">{</span> <span class="token property">transition</span><span class="token punctuation">:</span> opacity 2s ease-in <span class="token punctuation">}</span> // ease-in 先慢后快<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>当销毁元素时, transition 组件会为执行动画的元素添加三个类名, 我们可以通过这个三个类名为元素添加离场动画样式。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.leave-from</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>      <span class="token selector">// 元素执行动画的初始样式 (动画起点样式).leave-to</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token selector">// 元素执行动画的目标样式 (动画终点样式).leave-active</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    // 可以用于指定元素指定动画的类型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.leave-from</span> <span class="token punctuation">{</span> <span class="token property">opacity</span><span class="token punctuation">:</span> 1 <span class="token punctuation">}</span><span class="token selector">.leave-to</span> <span class="token punctuation">{</span> <span class="token property">opacity</span><span class="token punctuation">:</span> 0 <span class="token punctuation">}</span><span class="token selector">.leave-active</span> <span class="token punctuation">{</span> <span class="token property">transition</span><span class="token punctuation">:</span> opacity 2s ease-out <span class="token punctuation">}</span> // ease-out 先快后慢<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果在页面中有多个元素要执行动画, 而多个元素要执行的动画不同时, 为了对多个元素的动画样式进行区分, 在调用 transiton 组件时需要为它添加 name 属性以区分样式类名。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;transition name="fade"&gt;  &lt;h1&gt;hello world&lt;/h1&gt;&lt;/transition&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.fade-enter-from</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">.fade-enter-to</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">.fade-enter-active</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">.fade-leave-from</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">.fade-leave-to</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector">.fade-leave-active</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="20-2-示例"><a href="#20-2-示例" class="headerlink" title="20.2 示例"></a>20.2 示例</h3><p>需求: 点击按钮让元素显示隐藏 (执行动画)</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;transition name="fade"&gt;  &lt;h2 v-if="show"&gt;hello world&lt;/h2&gt;&lt;/transition&gt;&lt;button @click="show = !show"&gt;button&lt;/button&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> show <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.fade-enter-from</span> <span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.fade-enter-to</span> <span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.fade-enter-active</span> <span class="token punctuation">{</span>  <span class="token property">transition</span><span class="token punctuation">:</span> opacity 2s ease-in<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.fade-leave-from</span> <span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.fade-leave-to</span> <span class="token punctuation">{</span>  <span class="token property">opacity</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">.fade-leave-active</span> <span class="token punctuation">{</span>  <span class="token property">transition</span><span class="token punctuation">:</span> opacity 2s ease-out<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="21-状态管理-Vuex"><a href="#21-状态管理-Vuex" class="headerlink" title="21. 状态管理 Vuex"></a>21. 状态管理 Vuex</h2><blockquote><p>掌握 Vuex 实现全局状态管理的方式</p></blockquote><h3 id="21-1-问题"><a href="#21-1-问题" class="headerlink" title="21.1 问题"></a>21.1 问题</h3><p>在不使用全局状态管理库时, 应用状态由组件管理, 当多个组件需要共享使用同一个应用状态时, 应用状态需要通过 props 或自定义事件在组件之间进行传递, 在组件与组件之间的关系比较疏远时, 手递手的这种传递方式显得特别混乱, 使得应用的维护变得困难.</p><img src="/medias/images/87.png" align="left" width="30%">  <p>在使用了全局状态管理库后, 需要共享的应用状态被单独存储在一个独立于组件的 Store 对象中, 所有组件可以直接从这个对象中获取状态, 省去了繁琐的组件状态传递过程. 而且当 Store 中的状态发生变化后，组件也会自动更新。</p><img src="/medias/images/87_1.png" align="left" width="30%"><h3 id="21-2-Vuex-工作流程"><a href="#21-2-Vuex-工作流程" class="headerlink" title="21.2 Vuex 工作流程"></a>21.2 Vuex 工作流程</h3><p>State: 用于存储应用状态 (store.state)</p><p>Action: 用于执行异步操作 (dispatch)</p><p>Mutation: 用于修改 state 中的应用状态 (commit)</p><p>Getter: vuex 中的计算属性 (store.getters)</p><p>Module: 模块, 用于对状态进行拆分</p><p>在组件中开发者可以调用 dispatch 方法触发 Action 执行异步操作, 当异步操作执行完成后, 在 Action 中可以继续调用 commit 方法触发 mutation 修改状态, 当状态被修改以后, 视图更新. </p><img src="/medias/images/85.png" align="left" width="70%"><h3 id="21-3-下载"><a href="#21-3-下载" class="headerlink" title="21.3 下载"></a>21.3 下载</h3><p>Vuex 目前有两个版本, 一个是 <code>3.6.2</code>, 另一个是 <code>4.0.2</code>, 3.x 的版本是供 Vue2 使用的, 4.x 版本是供 Vue3 使用的.</p><p>在下载 Vuex 的时候如果不加版本号，默认下载的是 3.x 版本, 而我们要使用的是 4.x 的版本, 所以在下载时千万记得加版本号.</p><p><code>npm install vuex@4.0.2</code></p><h3 id="21-4-创建-Store"><a href="#21-4-创建-Store" class="headerlink" title="21.4 创建 Store"></a>21.4 创建 Store</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// src/store/index.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// src/main.js</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-5-state"><a href="#21-5-state" class="headerlink" title="21.5 state"></a>21.5 state</h3><p>在应用状态对象中存储 <code>username</code> 状态.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token operator">:</span> <span class="token punctuation">{</span>    username<span class="token operator">:</span> <span class="token string">'张三'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在组件中获取 <code>username</code> 状态</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  {{$store.state.username}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;import { useStore } from 'vuex'export default {  setup () {    const store = useStore()    console.log(store.state.username)  }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-6-getters"><a href="#21-6-getters" class="headerlink" title="21.6 getters"></a>21.6 getters</h3><p>getters 是 vuex 中的计算属性, 基于现有状态计算出新的状态。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  getters<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">newUsername</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>username <span class="token operator">+</span> <span class="token string">'😀😀😀😀'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  {{$store.getters.newUsername}}&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;script&gt;export default {  setup () {    console.log(store.getters.newUsername)  }}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-7-mutations"><a href="#21-7-mutations" class="headerlink" title="21.7 mutations"></a>21.7 mutations</h3><p>mutations 是 vuex 中用于修改状态的方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mutations<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">updateUsername</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> username</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>username <span class="token operator">=</span> username    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$store.commit(<span class="token punctuation">'</span>updateUsername<span class="token punctuation">'</span>, <span class="token punctuation">'</span>李四<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>    change username  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-8-actions"><a href="#21-8-actions" class="headerlink" title="21.8 actions"></a>21.8 actions</h3><p>actions 在 Vuex 中用于执行异步操作, 当异步操作执行完成以后可以调用 commit 方法触发 mutation 来修改应用状态</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  actions<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">updateName</span> <span class="token punctuation">(</span><span class="token parameter">ctx</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'updateName'</span><span class="token punctuation">,</span> <span class="token string">'李四'</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>onClickHandler<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token function-variable function">onClickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>      store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'updateName'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> onClickHandler <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="21-9-module"><a href="#21-9-module" class="headerlink" title="21.9 module"></a>21.9 module</h3><h4 id="21-9-1-概述"><a href="#21-9-1-概述" class="headerlink" title="21.9.1 概述"></a>21.9.1 概述</h4><p>Vuex 允许开发者通过模块对状态进行拆分，允许开发者将不同功能的状态代码拆分到不同的模块中。</p><p>模块分为两种，一种是不具备命名空间的模块，另一种是具备命名空间的模块，推荐使用命名空间，命名空间使模块更加独立。</p><h4 id="21-9-2-非命名空间模块"><a href="#21-9-2-非命名空间模块" class="headerlink" title="21.9.2 非命名空间模块"></a>21.9.2 非命名空间模块</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">state</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      name<span class="token operator">:</span> <span class="token string">'模块A'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">state</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      name<span class="token operator">:</span> <span class="token string">'模块B'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token operator">:</span> <span class="token punctuation">{</span>    a<span class="token operator">:</span> moduleA<span class="token punctuation">,</span>    b<span class="token operator">:</span> moduleB  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  {{$store.state['a'].name}}  {{$store.state['b'].name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> useStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">'App'</span><span class="token punctuation">,</span>  <span class="token function">setup</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">useStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a<span class="token punctuation">.</span>name<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>b<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非命名空间模块中的 mutation 方法, 当 <code>updateName</code> 方法被触发后，所有定义了此方法的模块都会调用该方法。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>  mutations<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">updateName</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'😀模块A😀'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>  mutations<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">updateName</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'😝模块B😝'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token operator">:</span> <span class="token punctuation">{</span>    a<span class="token operator">:</span> moduleA<span class="token punctuation">,</span>    b<span class="token operator">:</span> moduleB  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  {{$store.state['a'].name}}  {{$store.state['b'].name}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$store.commit(<span class="token punctuation">'</span>updateName<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>updateName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>非命名空间模块中的 getter，不能在两个模块中定义相同的 <code>getter</code> 以避免程序报错。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>  getters<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">newName</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'😀'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>  getters<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">newName</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'😝'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token operator">:</span> <span class="token punctuation">{</span>    a<span class="token operator">:</span> moduleA<span class="token punctuation">,</span>    b<span class="token operator">:</span> moduleB  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  {{$store.getters.newName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="/medias/images/17.png"><h4 id="21-9-3-命名空间模块"><a href="#21-9-3-命名空间模块" class="headerlink" title="21.9.3 命名空间模块"></a>21.9.3 命名空间模块</h4><p>命名空间模块需要在模块对象中添加 <code>namespaced: true</code> 选项。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>  namespaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token function">state</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'模块A'</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>  namespaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token function">state</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">'模块B'</span> <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token operator">:</span> <span class="token punctuation">{</span>    a<span class="token operator">:</span> moduleA<span class="token punctuation">,</span>    b<span class="token operator">:</span> moduleB  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  {{$store.state['a'].name}}  {{$store.state['b'].name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>具有命名空间的模块状态更加独立，比如可以在不同的命令空间中定义相同的 <code>getter</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>  namespaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">newName</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'😀'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>  namespaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  getters<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">newName</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'😀'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token operator">:</span> <span class="token punctuation">{</span>    a<span class="token operator">:</span> moduleA<span class="token punctuation">,</span>    b<span class="token operator">:</span> moduleB  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>  {{$store.getters['a/newName']}}  {{$store.getters['b/newName']}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在不同的命名空间模块中定义相同的变异方法</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> createStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>  namespaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">updateName</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'我是模块A'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>  namespaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  mutations<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token function">updateName</span> <span class="token punctuation">(</span><span class="token parameter">state</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'我是模块B'</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">createStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  modules<span class="token operator">:</span> <span class="token punctuation">{</span>    a<span class="token operator">:</span> moduleA<span class="token punctuation">,</span>    b<span class="token operator">:</span> moduleB  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  {{$store.getters['a/newName']}}  {{$store.getters['b/newName']}}  &lt;button @click="$store.commit('a/updateName')"&gt;update moduleA&lt;/button&gt;  &lt;button @click="$store.commit('b/updateName')"&gt;update moduleb&lt;/button&gt;&lt;/template&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="22-代理对象"><a href="#22-代理对象" class="headerlink" title="22. 代理对象"></a>22. 代理对象</h2><blockquote><p>目标: 了解代理对象的使用方式</p></blockquote><p>什么是数据响应式?</p><p>数据驱动视图, 即数据和视图进行绑定, 当数据发生变化后, 视图自动更新.</p><p>如何实现数据响应式?</p><p>实现数据响应式的核心在于监听数据的变化, 当数据发生变化后, 执行视图更新操作.</p><p>Vue3 使用代理对象监听数据变化.</p><p>创建对象的代理对象, 从而实现对对象操作的拦截和自定义.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// person 对象, 源数据对象</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">20</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// p 对象, person 对象的代理对象</span><span class="token comment">// 对 p 对象进行的所有操作都会映射到 person 对象</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 查询代码对象</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Proxy { name: "张三", age: 20 }</span><span class="token comment">// 修改代理对象中的 name 属性</span>p<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李四"</span><span class="token punctuation">;</span><span class="token comment">// 输出源数据对象中的 name 属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 李四</span><span class="token comment">// 删除代理对象中的 age 属性</span><span class="token keyword">delete</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span><span class="token comment">// 输出源数据对象中的 age 属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span><span class="token comment">// 在代理对象中增加 sex 属性</span>p<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span><span class="token comment">// 输出源数据对象中的 sex 属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// person 对象, 源数据对象</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token operator">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span>  age<span class="token operator">:</span> <span class="token number">20</span><span class="token punctuation">,</span>  brand<span class="token operator">:</span> <span class="token punctuation">{</span> group<span class="token operator">:</span> <span class="token punctuation">{</span> title<span class="token operator">:</span> <span class="token string">"宝马"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">// p 对象, person 对象的代理对象</span><span class="token comment">// 对 p 对象进行的所有操作都会映射到 person 对象</span><span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token function">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"拦击到了获取操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> property<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"拦截到了设置或者新增操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    target<span class="token punctuation">[</span>property<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">deleteProperty</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> property</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"拦截到了删除操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">delete</span> target<span class="token punctuation">[</span>property<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// console.log(p.name);</span><span class="token comment">// p.name = "李四";</span><span class="token comment">// delete p.name;</span><span class="token comment">// p.sex = "男";</span><span class="token comment">// proxy 代理的是整个对象, 不论对象层级有多深, 都可以进行拦截.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>brand<span class="token punctuation">.</span>group<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="23-双向数据绑定"><a href="#23-双向数据绑定" class="headerlink" title="23. 双向数据绑定"></a>23. 双向数据绑定</h2><h3 id="23-1-实现表单双向数据绑定"><a href="#23-1-实现表单双向数据绑定" class="headerlink" title="23.1 实现表单双向数据绑定"></a>23.1 实现表单双向数据绑定</h3><p><strong>1. 什么是双向数据绑定?</strong></p><p>双向指的是视图(template)和逻辑(script), 双向数据绑定是指视图更新数据后自动同步到逻辑, 逻辑更新数据后自动同步到视图。</p><p><strong>2. 如何实现双向数据绑定?</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;input type="text" v-model="firstName" /&gt;  &lt;button @click="onClickHandler"&gt;button&lt;/button&gt;&lt;/template&gt;&lt;script&gt;import { ref } from "vue";export default {  setup() {    const firstName = ref("张三");    const onClickHandler = () =&gt; {      firstName.value = "李四";    };    return { firstName, onClickHandler };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3. 如何监听双向数据绑定中数据的变化</strong></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;input    type="text"    v-model="firstName"    @update:modelValue="onFirstNameChanged($event)"  /&gt;&lt;/template&gt;&lt;script&gt;import { ref } from "vue";export default {  setup() {    const firstName = ref("张三");    const onFirstNameChanged = (event) =&gt; {      console.log(event);    };    return { firstName, onFirstNameChanged };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="23-2-实现组件双向数据绑定"><a href="#23-2-实现组件双向数据绑定" class="headerlink" title="23.2 实现组件双向数据绑定"></a>23.2 实现组件双向数据绑定</h3><h4 id="1-普通版"><a href="#1-普通版" class="headerlink" title="1. 普通版"></a>1. 普通版</h4><p><code>App.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;Test    :firstName="firstName"    @onFirstNameChanged="onFirstNameChanged($event)"  /&gt;  &lt;button @click="onClickHandler"&gt;我是App组件中的 button&lt;/button&gt;&lt;/template&gt;&lt;script&gt;import Test from "./components/Test.vue";import { ref } from "vue";export default {  components: { Test },  name: "App",  setup() {    const firstName = ref("张三");    const onClickHandler = () =&gt; {      firstName.value = "李四";    };    const onFirstNameChanged = (event) =&gt; {      firstName.value = event;    };    return { firstName, onClickHandler, onFirstNameChanged };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Test.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    {{ firstName }}    &lt;button @click="onClickHandler"&gt;我是Test组件中的button&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  props: ["firstName"],  setup(props, { emit }) {    const onClickHandler = () =&gt; {      emit("onFirstNameChanged", "王五");    };    return { onClickHandler };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-升级版"><a href="#2-升级版" class="headerlink" title="2. 升级版"></a>2. 升级版</h4><p><code>App.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;Test v-model="firstName" /&gt;  &lt;button @click="onClickHandler"&gt;我是App组件中的 button&lt;/button&gt;&lt;/template&gt;&lt;script&gt;import Test from "./components/Test.vue";import { ref } from "vue";export default {  components: { Test },  name: "App",  setup() {    const firstName = ref("张三");    const onClickHandler = () =&gt; {      firstName.value = "李四";    };    return { firstName, onClickHandler };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Test.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;div&gt;    {{ modelValue }}    &lt;button @click="onClickHandler"&gt;我是Test组件中的button&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  props: ["modelValue"],  setup(props, { emit }) {    const onClickHandler = () =&gt; {      emit("update:modelValue", "王五");    };    return { onClickHandler };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-终极版"><a href="#3-终极版" class="headerlink" title="3. 终极版"></a>3. 终极版</h4><p><code>App.vue</code></p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;Test v-model:firstName="firstName" v-model:lastName="lastName" /&gt;  &lt;button @click="onClickHandler"&gt;我是App组件中的 button&lt;/button&gt;&lt;/template&gt;&lt;script&gt;import Test from "./components/Test.vue";import { ref } from "vue";export default {  components: { Test },  name: "App",  setup() {    const firstName = ref("张三");    const lastName = ref("李四");    const onClickHandler = () =&gt; {      firstName.value = "孙悟空";      lastName.value = "猪八戒";    };    return { firstName, lastName, onClickHandler };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Test.vue</code></p><pre class="line-numbers language-react" data-language="react"><code class="language-react">&lt;template&gt;  &lt;div&gt;    {{ firstName }} {{ lastName }}    &lt;button @click="onClickHandler"&gt;我是Test组件中的button&lt;/button&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  props: ["firstName", "lastName"],  setup(props, { emit }) {    const onClickHandler = () =&gt; {      emit("update:firstName", "刘备");      emit("update:lastName", "诸葛亮");    };    return { onClickHandler };  },};&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="24-customRef"><a href="#24-customRef" class="headerlink" title="24. customRef"></a>24. customRef</h2><p>创建具有自定义行为的响应式数据, 通过拦截响应式数据的读取和设置实现。</p><p>防抖: 监听用户的连续操作, 最终只响应连续操作中的最后一次操作。</p><pre class="line-numbers language-vue" data-language="vue"><code class="language-vue">&lt;template&gt;  &lt;input type="text" v-model="keyword" /&gt;  {{ keyword }}&lt;/template&gt;&lt;script&gt;import { customRef } from "vue";export default {  name: "App",  setup() {    const keyword = useDebounceRef("Hello", 400);    return { keyword };  },};function useDebounceRef(initialValue, delay) {  let timer = null;  return customRef((track, trigger) =&gt; {    return {      get() {        // 跟踪 initialValue 值的变量        track();        return initialValue;      },      set(newValue) {        clearTimeout(timer);        timer = setTimeout(() =&gt; {          initialValue = newValue;          // 触发视图更新          trigger();        }, delay);      },    };  });}&lt;/script&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
